Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Call for Backup Warrior,Warrior Smash|[sword]<var:bopcount> dmg[;] +1 per bop,2,attack(self.getvar(~bopcount~));,Lucky Shot,,,BRIGHTCYAN,,change_power,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,,
Call for Backup Thief,Yoink|Borrow equipment,2,//$var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~)){ enemyequipment.push(eq);}} if(enemyequipment.length > 0){var randomequipment = rand(enemyequipment); replacemewith(randomequipment.name + randomequipment.namemodifier); }$,Steal,,,GREEN,,change_power,,none,0,NO,NO,excludefromrandomlists|cannotsteal|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot,Slot Machine|Get random equipment,2,//$replacemewith(rand(getequipmentlist(null|[]|[~skillcard~|~excludefromrandomlists~|~robotonly~|~witchonly~|~onceperbattle~|~alternateversion~]))| -1);$,Reversal,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1| 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?,Black Market|Rent a powerful item|Costs [gold]1[;] you have [gold]<gold>,2,//$if(self.gold > 0){ self.gold--; replacemewith(rand([~Dark Shadow~|~Bear Maul~|~Two Handed Sword~|~Tower Shield~|~Earthquake~|~Very Good Sword~|~Counterfeit~|~Spatulasword~|~Quarterstaff~])| -1); } else { self.textparticle(~Can't afford!~); }$,,,,GREEN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?,Power Surge|Add +1 to all dice|less than six,2,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue < 6){ mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1| 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Mystery Box,Very mysterious,1,giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false);,Reversal,NORMAL,,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Scrap Kettle,Start turn: Burn yourself|(Always offered as scrap),1,,Frying Pan,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(FIRE[;]1); e.animate(~flashandshake~); if(self.getvar(~kettlesfx~) != 1) { self.setvar(~kettlesfx~[;]1); sfx(~_fire~); } },,,,self.setvar(~kettlesfx~[;]0);,,,,
Scrap Kettle_upgraded,[95%]Start turn: Roll a burning dice|(Always offered as scrap),1,,Frying Pan,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); inflictself(FIRE[;]1); givedice(); sfx(~_fire~);,,,,,,,
Scrap Kettle_downgraded,Start turn: Gain [fire]2 burn|(Always offered as scrap),1,,Frying Pan,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(FIRE[;]2); e.animate(~flashandshake~); if(self.getvar(~kettlesfx~) != 1) { self.setvar(~kettlesfx~[;]1); sfx(~_fire~); } },,,,self.setvar(~kettlesfx~[;]0);,,,,
Iced Latte,Start turn: Freeze yourself|(Always offered as scrap),1,,Ice Cream Truck,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(ICE[;]1); e.animate(~flashandshake~); if(self.getvar(~lattesfx~) != 1) { self.setvar(~lattesfx~[;]1); sfx(~_ice~); } },,,,self.setvar(~lattesfx~[;]0);,,,,
Iced Latte_upgraded,[95%]Start turn: roll an extra one|(Always offered as scrap),1,,Ice Cream Truck,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); givedice(1);,,,,,,,
Iced Latte_downgraded,Start turn: Gain [ice]2 freeze|(Always offered as scrap),1,,Ice Cream Truck,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(ICE[;]2); e.animate(~flashandshake~); if(self.getvar(~lattesfx~) != 1) { self.setvar(~lattesfx~[;]1); sfx(~_ice~); } },,,,self.setvar(~lattesfx~[;]0);,,,,
Judgement@plants,Do [sword]<triple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_upgraded,Do [sword]<quadruple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_downgraded,Do [sword]<d6>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats,Do [sword]<triple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_upgraded,Do [sword]<quadruple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_downgraded,Do [sword]<d6>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green,Do [sword]<triple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_upgraded,Do [sword]<quadruple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_downgraded,Do [sword]<d6>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords,Do [sword]<triple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_upgraded,Do [sword]<quadruple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_downgraded,Do [sword]<d6>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields,Do [sword]<triple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_upgraded,Do [sword]<quadruple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_downgraded,Do [sword]<d6>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears,Do [sword]<triple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_upgraded,Do [sword]<quadruple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_downgraded,Do [sword]<d6>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals,Do [sword]<triple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_upgraded,Do [sword]<quadruple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_downgraded,Do [sword]<d6>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating,Do [sword]<triple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_upgraded,Do [sword]<quadruple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_downgraded,Do [sword]<d6>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear,Do [sword]<triple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_upgraded,Do [sword]<quadruple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_downgraded,Do [sword]<d6>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses,Do [sword]<triple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_upgraded,Do [sword]<quadruple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_downgraded,Do [sword]<d6>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1,Do [sword]<triple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_upgraded,Do [sword]<quadruple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_downgraded,Do [sword]<d6>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire,Do [sword]<triple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_upgraded,Do [sword]<quadruple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_downgraded,Do [sword]<d6>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison,Do [sword]<triple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_upgraded,Do [sword]<quadruple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_downgraded,Do [sword]<d6>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines,Do [sword]<triple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_upgraded,Do [sword]<quadruple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_downgraded,Do [sword]<d6>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic,Do [sword]<triple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_upgraded,Do [sword]<quadruple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_downgraded,Do [sword]<d6>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings,Do [sword]<triple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_upgraded,Do [sword]<quadruple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_downgraded,Do [sword]<d6>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople,Do [sword]<triple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_upgraded,Do [sword]<quadruple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_downgraded,Do [sword]<d6>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs,Do [sword]<triple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_upgraded,Do [sword]<quadruple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_downgraded,Do [sword]<d6>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp,Do [sword]<triple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_upgraded,Do [sword]<quadruple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_downgraded,Do [sword]<d6>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp,Do [sword]<triple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_upgraded,Do [sword]<quadruple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_downgraded,Do [sword]<d6>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Flaming Sword,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d[;]FIRE); inflict(FIRE[;] 2);,,MAX5|MAX5,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,if(!self.usecpuinsteadofdice) { self.addstatus(FIRE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(FIRE[;] 1); sfx(~_fire~); },,,,,,,
Flaming Sword_upgraded,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d[;]FIRE); inflict(FIRE[;] 2);,,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,if(!self.usecpuinsteadofdice) { self.addstatus(FIRE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(FIRE[;] 1); sfx(~_fire~); },,,,,,,
Fruit Bowl,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice),1,if(getstatusself(~freetrades~) > 0) { givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Fruit Bowl_upgraded,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice)|[gray](Reuseable),1,if(getstatusself(~freetrades~) > 0) { givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,,,,,,,,,,,,,
Enchanted Shield,Add [shield]<d6> shield|(Cost [mana]2[]: +[shield]<d6> shield),1,if(getstatusself(~freetrades~) > 0) { inflictself(SHIELD[;] d * 2); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); inflictself(SHIELD[;] d * 2); } else { inflictself(SHIELD[;] d); },,MAX3,,ORANGE,increaserange,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Sun Beam,Do [sword]5 damage|(Cost [mana]2[]: double damage),1,if(getstatusself(~freetrades~) > 0) { attack(10); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attack(10); } else { attack(5); },,EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Magnifying Glass,Double dice value|(Cost [mana]1[]: instead[;] triple),1,if(getstatusself(~freetrades~) > 0) { givedice(d * 3[;] ~combinedice~); } else if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice(d * 3[;] ~combinedice~); } else { givedice(d * 2[;] ~combinedice~); },Clone Device,MAX3,,BRIGHTCYAN,change_requirements,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Stew Pot,Do [sword]1 damage[;] reroll dice|(If [mana]>=6: return 5 or 6),1,if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Stew Pot_upgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=4: return 5 or 6),1,if(getstatusself(MANA) >= 4 # getstatusself(~freetrades~) >= 1) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Stew Pot_downgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=8: return 5 or 6),1,if(getstatusself(MANA) >= 8 # getstatusself(~freetrades~) >= 1) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Moon Beam,Do [sword]5 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7 # getstatusself(~freetrades~) >= 1) { attack(10); } else { attack(5); },,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Moon Beam_upgraded,Do [sword]7 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7 # getstatusself(~freetrades~) >= 1) { attack(14); } else { attack(7); },,EVEN,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Northern Lights,Get 2x<d6>s next turn|(If [mana]>=5: get 3 instead),1,if(getstatusself(MANA) >= 5 # getstatusself(~freetrades~) >= 1) { inflictself(~stash~+d[;]3); inflictself(~illuminate~); } else { inflictself(~stash~+d[;]2); inflictself(~illuminate~); },,NORMAL,,PURPLE,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Sunburn,Do [fire]<d6> damage|(Cost [mana]1[]: burn a dice),1,if(getstatusself(~freetrades~) > 0) { attack(d[;] FIRE); inflict(FIRE[;] 1); } else if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); attack(d[;] FIRE); inflict(FIRE[;] 1); } else { attack(d[;] FIRE); },Ember,MIN4,,RED,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Cold Snap,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2 # getstatusself(~freetrades~) > 0) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Cold Snap_upgraded,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2 # getstatusself(~freetrades~) > 0) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Summer Solstice,Do [sword]<d6> damage|(Cost [mana]4[]: triple damage),1,if(getstatusself(~freetrades~) > 0) { attack(d * 3); } else if(getstatusself(MANA) >= 4) { removestatusself(MANA[;]4); attack(d * 3); } else { attack(d); },Hellfire,EVEN|EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,,2,,,,,,,,,,,
Winter Solstice,Do [sword]<d6> damage|(If [mana]>=12: triple damage),1,if(getstatusself(MANA) >= 12 # getstatusself(~freetrades~) >= 1) { attack(d * 3); } else { attack(d); },,ODD|ODD,,PURPLE,simplify,complicate,,,0,NO,NO,,2,,,,,,,,,,,
Moonlight Spear,Do [sword]10 damage|(If [mana]>=8: do double),1,if(getstatusself(MANA) >= 8 # getstatusself(~freetrades~) >= 1) { attack(20); } else { attack(10); },Magic Six,REQUIRE6,,PURPLE,change_power,doublerequirements,,,0,NO,NO,,2,,,,,,,,,,,
Magic Thistle,Gain [thorns]1 thorns|(Cost [mana]1[]: +[thorns]1 extra),1,if(getstatusself(~freetrades~) > 0) { inflictself(THORNS[;] 2); } else if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); inflictself(THORNS[;] 2); } else { inflictself(THORNS[;] 1); },Plasma Gun,ODD,,GREEN,simplify,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Blue Ocean,Do [sword]<d6> damage|(Cost [mana]2[]: heal 3),1,if(getstatusself(~freetrades~) > 0) { attackself(-3); attack(d); sfx(~_heal~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attackself(-3); attack(d); sfx(~_heal~[;]~~[;]0.2); } else { attack(d); } sfxdamage(target[;]d);,Regenerate,MAX4,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Frozen Sword,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d[;]ICE); inflict(ICE[;] 2);,Flash Freeze,MAX5|MAX5,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,1,,,if(!self.usecpuinsteadofdice) { self.addstatus(ICE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(ICE[;] 1); sfx(~_ice~); },,,,,,,
Frozen Sword_upgraded,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d[;]ICE); inflict(ICE[;] 2);,Flash Freeze,NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,if(!self.usecpuinsteadofdice) { self.addstatus(ICE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(ICE[;] 1); sfx(~_ice~); },,,,,,,
Winds of Winter,Do [sword]1 damage for each|[mana]1 mana you have,1,if(getstatusself(MANA) > 0) {attack(getstatusself(MANA)); },,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
