Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Inventor Gadgets,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Robot Calculate,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Robot Request,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thief Stolen Card,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Witch Spellbook,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Witch Deck,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Jester Deck,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Combat Roll,Reroll a dice|[gray](Reuseable),2,if(simulation){ if(d < 5){ bonus(500); } else { bonus(50); } } else { givedice(); },Random Roll,NORMAL,,GRAY,,,,,3,YES,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Shield Bash,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,DOUBLES|DOUBLES,,ORANGE,change_requirements,change_function,,,0,NO,NO,|vanilla,,,,,,,,,,,,
Shield Bash_downgraded,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,REQUIRE6|REQUIRE6,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Shield Bash_upgraded,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,EVEN,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,RED,add1,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,
Broadsword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE2,,RED,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Broadsword_upgraded,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Two Handed Sword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|NORMAL,,RED,change_power,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,
Two Handed Sword_upgraded,Do [sword]<d6> damage[;]|on 12[;] lock [lock]1 dice,2,attack(d); if(d == 12) inflict(LOCK[;] 1); if(d >= 12) { sfx(~_lock~[;]~~[;]0.2); } sfxdamage(target[;]d);,Plasma Gun,NORMAL|NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Four Handed Sword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|NORMAL|NORMAL|NORMAL,,RED,change_power,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,
Four Handed Sword_upgraded,Do [sword]<d6> damage[;]|on 24[;] lock [lock]2 dice,2,attack(d); if(d == 24) inflict(LOCK[;] 2); if(d >= 24) { sfx(~_lock~[;]~~[;]0.2); } sfxdamage(target[;]d);,Plasma Gun,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Plasma Blaster,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,MAX5,,RED,increaserange,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Short Sword,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,MAX4,,RED,increaserange,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wooden Shield,Add [shield]<d6> shield,2,inflictself(SHIELD[;] d);,Protection,MAX4,,ORANGE,simplify,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Small Shield,Add [shield]<d6> shield,1,inflictself(SHIELD[;] d);,Protection,MAX3,,ORANGE,add1,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Iron Shield,Add [shield]<d6> shield,2,inflictself(SHIELD[;] d);,Protection,NORMAL,,ORANGE,add1,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Tower Shield,Add [shield]<d6> shield|[gray](Reuseable),2,inflictself(SHIELD[;] d);,Protection,MAX5,,ORANGE,change_power,change_power,,,2,YES,NO,vanilla,,,,,,,,,,,,
Tower Shield_downgraded,Add [shield]<d6> shield,2,inflictself(SHIELD[;] d);,Protection,MAX5,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Tower Shield_upgraded,Add [shield]<d6> shield|[gray](Reuseable),2,inflictself(SHIELD[;] d);,Protection,NORMAL,,ORANGE,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Divine Rod,Reduce health to [heart]1,2,pierceattack(target.hp - 1); bonus(10000);,Time Stop,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Divine Rod_upgraded,Reduce health to [heart]1,2,pierceattack(target.hp - 1); bonus(10000);,Time Stop,REQUIRE6|EVEN|EVEN|REQUIRE6,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Divine Rod_downgraded,Reduce health in half,2,pierceattack((target.hp / 2)); bonus(10000);,Time Stop,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Snowball,Do [ice]<d6> damage|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE[;] 1);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,vanilla,,,,,,,,,,,,
Snowball_upgraded,Do [ice]<d6> damage|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE[;] 1);,Refrigerator,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Snowball_downgraded,Do [sword]<d6> damage,1,attack(d);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Freeze Spell,Deal [ice]5 damage|Freeze [ice]2 dice,1,attack(5[;] ICE); inflict(ICE[;] 2);,Refrigerator,REQUIRE1,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,vanilla,,,,,,,,,,,,
Freeze Spell_downgraded,Deal [ice]5 damage|Freeze [ice]1 dice,1,attack(5[;] ICE); inflict(ICE[;] 1);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Freeze Spell_upgraded,Deal [ice]5 damage|Freeze [ice]ALL dice,1,attack(5[;] ICE); inflict(ICE[;] ALL);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Spell,Deal [fire]5 damage|Burn [fire]2 dice,1,attack(5[;] FIRE); inflict(FIRE[;] 2);,Hellfire,REQUIRE2,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Spell_upgraded,Deal [fire]6 damage|Burn [fire]ALL dice,1,attack(6[;] FIRE); inflict(FIRE[;] ALL);,Hellfire,REQUIRE2,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Spell_downgraded,Deal [sword]5 damage,1,attack(5);,Hellfire,REQUIRE2,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fireball,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 1);,Hellfire,EVEN,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fireball_upgraded,Deal [fire]<d6> damage|Burn [fire]2 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Hellfire,EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fireball_downgraded,Deal [sword]<d6> damage,1,attack(d);,Hellfire,EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Backfire,Lose [heart]5 health,1,pierceattackself(5);,Infinity Mirror,REQUIRE1,,PURPLE,change_backfire,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Backfire_downgraded,Lose [heart]15 health,1,pierceattackself(15);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Backfire_weakened,Lose [heart]15 health,1,pierceattackself(15);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Backfire_upgraded,Lose [heart]10 health,1,pierceattackself(10);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Poison Spell,Inflict [poison]4 poison,1,inflict(POISON[;] 4);,Poison Arrow,REQUIRE3,,PURPLE,change_power,doublerequirements,,,0,NO,NO,vanilla,,,,,,,,,,,,
Poison Spell_upgraded,Inflict [poison]5 poison,1,inflict(POISON[;] 5);,Poison Arrow,REQUIRE3,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Toxic Ooze,Do [sword]<d6> damage[;]|on 6[;] add [poison]2 poison,2,attack(d); if(d == 6) inflict(POISON[;] 2); if(d >= 6) { sfx(~_poison~[;]~~[;]0.2); } sfxdamage(target[;]d);,Emetic,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Toxic Ooze_downgraded,Do [sword]<d6> damage[;]|on 6[;] add [poison]1 poison,2,attack(d); if(d == 6) inflict(POISON[;] 1); if(d >= 6) { sfx(~_poison~[;]~~[;]0.2); } sfxdamage(target[;]d);,Emetic,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Toxic Ooze_upgraded,Do [sword]<d6> damage[;]|on 6[;] add [poison]3 poison,2,attack(d); if(d == 6) inflict(POISON[;] 3); if(d >= 6) { sfx(~_poison~[;]~~[;]0.2); } sfxdamage(target[;]d);,Emetic,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Poison Slingshot,Add [poison]4 poison,1,inflict(POISON[;] 4); bonus(1000);,Poison Arrow,COUNTDOWN,12,PURPLE,change_countdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Poison Slingshot_downgraded,Add [poison]2 poison,1,inflict(POISON[;] 2); bonus(1000);,Poison Arrow,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Poison Slingshot_upgraded,Add [poison]4 poison,1,inflict(POISON[;] 4); bonus(1000);,Poison Arrow,COUNTDOWN,9,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Blight,Double [poison] poison,1,inflict(POISON[;] getstatus(POISON));,Poison Arrow,COUNTDOWN,24,PURPLE,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Blight_weakened,Increase [poison] poison|by 50 percent,1,inflict(POISON[;] getstatus(POISON) * 0.5);,Poison Arrow,COUNTDOWN,18,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Blight_downgraded,Increase [poison] poison|by 50 percent,1,inflict(POISON[;] getstatus(POISON) * 0.5);,Poison Arrow,COUNTDOWN,24,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Claw,Do [sword]<d6> damage[;]|and add [poison]1 poison,1,attack(d); inflict(POISON[;] 1);,Poison Arrow,MAX3,,PURPLE,change_requirements,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Claw_downgraded,Do [sword]<d6> damage,1,attack(d);,Poison Arrow,MAX3,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Claw_upgraded,Do [sword]<d6> damage[;]|and add [poison]1 poison,1,attack(d); inflict(POISON[;] 1);,Poison Arrow,MAX5,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dagger,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Steal,MAX3,,RED,add1,complicate,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Six Shooter,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,change_requirements,change_power,,,3,NO,NO,vanilla,,,,,,,,,,,,
Six Shooter_downgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,,,,,2,NO,NO,vanilla,,,,,,,,,,,,
Six Shooter_upgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,,,,,6,NO,NO,vanilla,,,,,,,,,,,,
Pierce Spell,Ignore shields,1,inflictself(PIERCE);,Weaken Spell,COUNTDOWN,7,YELLOW,change_countdown,change_power,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,
Pierce Spell_upgraded,Ignore shields,1,inflictself(PIERCE);,Weaken Spell,COUNTDOWN,5,YELLOW,,,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,
Pierce Spell_downgraded,Ignore shields,1,inflictself(PIERCE);,Weaken Spell,COUNTDOWN,12,YELLOW,,,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,
Magic Barrier,Add [shield]5 shield,1,inflictself(SHIELD[;] 5);,Protection,REQUIRE5,,ORANGE,simplify,doublerequirements,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Hall of Mirrors,[]+1 dice this fight,1,if(simulation) { bonus(1000); } else{ self.extradice++; },Focus,REQUIRE6,,PURPLE,simplify,doublerequirements,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Magic Shield,Add [shield]3 shield,1,inflictself(SHIELD[;] 3);,Barricade,ODD,,ORANGE,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Magic Shield_upgraded,Add [shield]4 shield,1,inflictself(SHIELD[;] 4);,Barricade,ODD,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Magic Missile,Do [sword]5 damage,1,attack(5);,Magic Dice,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Magic Missile_upgraded,Do [sword]8 damage,1,attack(8);,Magic Dice,EVEN,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Burning Light,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 1); bonus(1000);,Ember,MIN4,,RED,simplify,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Burning Light_downgraded,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 1);,Ember,MAX3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Healing Crystal,Recover [heal]<d6> health,1,attackself(-d); if(self.hp < self.maxhp) bonus(500 * d);,Regenerate,MAX3,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Healing Crystal_upgraded,Recover [heal]<d6> health[;]|reduce poison by 1,1,attackself(-d); removestatusself(POISON[;] 1); if(self.hp < self.maxhp) { bonus(500 * d); },Regenerate,MAX4,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Staff,Deal [fire]6 damage|Burn [fire]1 dice,2,attack(6[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Staff_downgraded,Deal [fire]3 damage|Burn [fire]1 dice,2,attack(3[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Staff_upgraded,Deal [fire]8 damage|Burn [fire]1 dice,2,attack(8[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wail,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,REQUIRE5,,PURPLE,change_requirements,doublerequirements,,,0,NO,NO,excludefromrandomlists|cannotsteal|vanilla,,,,,,,,,,,,
Wail_upgraded,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,MIN5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal|vanilla,,,,,,,,,,,,
Squawk,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal|vanilla,,,,,,,,,,,,
Squawk_upgraded,Do [sword]2 damage|Silence Enemy,2,attack(2); inflict(SILENCE); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal|vanilla,,,,,,,,,,,,
Squawk_downgraded,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal|vanilla,,,,,,,,,,,,
Woof Woof Woof,Repeat next action,2,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,8,RED,halfcountdown,noeffect,fury,,0,YES,NO,vanilla,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Dire Wolf Howl,Curse enemy,2,inflict(CURSE);,Cackle,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dire Wolf Howl_upgraded,Curse enemy,2,inflict(CURSE);,Cackle,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dire Wolf Howl_downgraded,Curse enemy,2,inflict(CURSE);,Cackle,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dire Wolf Howl_weakened,No effect,2,donothing(); bonus(-10000);,Cackle,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Shriek,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,REQUIRE2,,PURPLE,change_power,doublerequirements,,,0,NO,NO,vanilla,,,,,,,,,,,,
Shriek_upgraded,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,MAX2,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lament,Do [ice]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d[;]ICE); if(d == 6) { inflict(ICE[;] 1); } sfx(~_ice~[;]~~[;]0.2); sfxdamage(target[;]d);,Arctic Storm,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lament_upgraded,Do [ice]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d[;]ICE); if(actualdice[0].basevalue == 6) { inflict(ICE[;] 1); } sfx(~_ice~[;]~~[;]0.2); sfxdamage(target[;]d);,Arctic Storm,NORMAL|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lament_downgraded,Do [ice]<d6> damage,2,attack(d[;]ICE); sfx(~_ice~[;]~~[;]0.2);,Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Nightmare,Do [sword]999 damage,2,attack(999);,Reversal,COUNTDOWN,99,PURPLE,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Nightmare_downgraded,Do [sword]998 damage,2,attack(998);,Reversal,COUNTDOWN,99,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Nightmare_weakened,Do [sword]998 damage,2,attack(998);,Reversal,COUNTDOWN,74,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Midnight Charm,Roll 2 sixes,1,givedice([6[;] 6]);,Focus,COUNTDOWN,10,GREEN,halfcountdown,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Midnight Charm_weakened,Roll 1 six,1,givedice(6);,Focus,COUNTDOWN,5,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Midnight Charm_downgraded,Roll 1 six,1,givedice(6);,Focus,COUNTDOWN,10,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Snake Eye Charm,Roll 2 ones,1,givedice([1[;] 1]);,Magic Dice,COUNTDOWN,6,GREEN,halfcountdown,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Snake Eye Charm_downgraded,Roll 1 one,1,givedice(1);,Magic Dice,COUNTDOWN,6,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Snake Eye Charm_weakened,Roll 1 one,1,givedice(1);,Magic Dice,COUNTDOWN,3,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Chocolate Cookie,Repeat next action,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,fury,,0,YES,NO,vanilla,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Chocolate Cookie_downgraded,Next equipment has|+1 use this turn,1,inflictself(REEQUIPNEXT);,Fury,COUNTDOWN,12,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Fury Spell,Repeat next action,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,REQUIRE6,,PURPLE,simplify,noeffect,,,0,YES,NO,vanilla,2,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Dexterity Charm,All equipment is|reuseable this turn,2,inflictself(RECYCLE);,Efficiency,COUNTDOWN,24,ORANGE,reducesize,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Dexterity Charm_downgraded,No effect,2,bonus(-1500);,Efficiency,COUNTDOWN,24,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Dexterity Charm_weakened,No effect,1,bonus(-1500);,Efficiency,COUNTDOWN,24,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Wall of Flame,[fire]6 dmg + [fire]1 burn|[gray](once per battle),2,attack(6[;] FIRE); inflict(FIRE[;] 1);,Ember,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Wall of Flame_upgraded,[fire]8 dmg + [fire]1 burn|[gray](once per battle),2,attack(8[;] FIRE); inflict(FIRE[;] 1);,Ember,DOUBLES|DOUBLES,,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Wall of Flame_downgraded,[fire]4 dmg + [fire]1 burn|[gray](once per battle),2,attack(4[;] FIRE); inflict(FIRE[;] 1);,Ember,DOUBLES|DOUBLES,,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Infestation,Curse everyone,1,inflict(CURSE); inflictself(CURSE);,Cackle,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);
Infestation_upgraded,Curse enemy,1,inflict(CURSE);,Cackle,EVEN,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Infestation_downgraded,Curse yourself,1,inflictself(CURSE);,Cackle,EVEN,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Detonator,Do [sword]1 damage for|every [poison]1 on enemy,1,attack(getstatus(POISON));,Emetic,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Antidote,Cure [poison]<slotdoubles> poison,1,removestatusself(POISON[;] d);,Emetic,DOUBLES|DOUBLES,,PURPLE,change_power,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Antidote_downgraded,Cure [poison]<slotdoubles> poison|(for both you and enemy),1,removestatus(POISON[;] d); removestatusself(POISON[;] d);,Emetic,DOUBLES|DOUBLES,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,removestatusself(POISON[;] d);
Antidote_upgraded,Cure [poison]<d6> poison,1,removestatusself(POISON[;] d);,Emetic,NORMAL,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Crystal Sword,Do [sword]<triple> damage|[gray](once per battle),2,attack(d * 3);,Fury,MAX5,,RED,reducesize,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Crystal Sword_downgraded,Do [sword]<double> damage|[gray](once per battle),2,attack(d * 2);,Fury,MAX5,,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Crystal Sword_weakened,Do [sword]<double> damage|[gray](once per battle),1,attack(d * 2);,Fury,MAX5,,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Crystal Sword_deckupgrade,Do [sword]<triple> damage,2,attack(d * 3);,Fury,MAX3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bump,Dice value +1,1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Bump_upgraded,Dice value +1|[gray](Reuseable),1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Nudge,Dice value -1,1,if(d >= 2) givedice(d - 1);,Meganudge,MIN2,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Nudge_upgraded,Dice value -1|[gray](Reuseable),1,if(d >= 2) givedice(d - 1);,Meganudge,MIN2,,GREEN,,,,,3,YES,NO,vanilla,,,,,,,,,,,,
Counter Spell,If enemy rolls <d6>[;]|that dice is locked,1,inflict(~counter_~ + d);,Quick Thinking,NORMAL,,PURPLE,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Counter Spell_upgraded,Lock dice that roll <d6>|[gray](Reuseable),1,inflict(~counter_~ + d);,Quick Thinking,NORMAL,,PURPLE,,,,,2,NO,NO,vanilla,,,,,,,,,,,,
Nightstick,[shock]Shocks the enemy|[gray](Reuseable),1,inflict(SHOCK);,Zap,EVEN,,YELLOW,change_power,removereusable,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Nightstick_upgraded,[shock]Shocks the enemy|[gray](Reuseable),1,inflict(SHOCK);,Zap,NORMAL,,YELLOW,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Rock,Do [sword]<d6> damage|[gray](once per battle),1,attack(d);,Shuriken,NORMAL,,RED,add2,complicate,,,0,NO,YES,vanilla,,,,,,,,,,,,
Yoink,Borrow equipment|until next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I've borrowed this.~[;]~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); } } } else { bonus(1000 + (self.dicepool.length * 500)); },Reversal,EVEN,,PINK,simplify,complicate,,,0,NO,NO,excludefromrandomlists|cannotsteal|curseavoid|cannotreuse|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Plasma Cannon,Do [sword]10 damage,1,attack(10);,Accelerate,COUNTDOWN,20,RED,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Plasma Cannon_weakened,Do [sword]5 damage,1,attack(5);,Accelerate,COUNTDOWN,15,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Plasma Cannon_downgraded,Do [sword]5 damage,1,attack(5);,Accelerate,COUNTDOWN,20,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Crossbow,Do [sword]9 damage,2,attack(9);,Plasma Gun,COUNTDOWN,12,RED,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Crossbow_weakened,Do [sword]4 damage,2,attack(4);,Plasma Gun,COUNTDOWN,9,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Crossbow_downgraded,Do [sword]4 damage,2,attack(4);,Plasma Gun,COUNTDOWN,12,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Target Shield,Add [shield]<d6> to shield|[gray](Reuseable),1,inflictself(SHIELD[;] d);,Barricade,MAX2,,ORANGE,increaserange,removereusable,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Buckler,Add [shield]4 to shield,1,inflictself(SHIELD[;] 4);,Barricade,COUNTDOWN,7,ORANGE,threequartercountdown,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Buckler_weakened,Add [shield]2 to shield,1,inflictself(SHIELD[;] 2);,Barricade,COUNTDOWN,5,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Buckler_downgraded,Add [shield]2 to shield,1,inflictself(SHIELD[;] 2);,Barricade,COUNTDOWN,7,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Boomerang,Do [sword]<double> to enemy[;]|but [sword]<d6> to yourself,1,attack(2 * d); boomerang(d);,Fury,NORMAL,,RED,change_boomerang,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,attackself(d); sfxdamage(self[;]d);
Boomerang_upgraded,Do [sword]<double> to enemy[;]|but [sword]3 to yourself,1,attack(2 * d); boomerang(3);,Fury,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,attackself(3); sfxdamage(self[;]3);
Wolf Puppy Bite,Do [sword]4 damage,2,attack(4);,Lucky Shot,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wolf Puppy Bite_upgraded,Do [sword]5 damage,2,attack(5);,Lucky Shot,EVEN,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fire Breath,Do [fire]4 damage|Burn [fire]1 dice,2,attack(4[;] FIRE); inflict(FIRE[;] 1);,Hellfire,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fire Breath_upgraded,Do [fire]6 damage|Burn [fire]1 dice,2,attack(6[;] FIRE); inflict(FIRE[;] 1);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fire Breath_downgraded,Do [sword]4 damage,2,attack(4);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lockpick,Split a dice in two,1,givedice(split(d)[;] ~splitdice~);,Steal,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Lockpick_downgraded,Split value in two,1,givedice(d / 2);,Steal,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Lockpick_upgraded,Split a dice in two|On six[;] split into three,1,if(d==6){ givedice(split(d[;] 3)[;] ~splitdice~); } else { givedice(split(d)[;] ~splitdice~); },Steal,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Nudgeblade,Do [sword]<d6> damage[;] get|new dice (value -1),2,attack(d); if(d >= 2) givedice(d - 1);,Meganudge,MIN2,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d >= 2) givedice(d - 1);
Nudgeblade_upgraded,Do [sword]<d6> damage[;] get|new dice (value -1),1,attack(d); if(d >= 2) givedice(d - 1);,Meganudge,MIN2,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d >= 2) givedice(d - 1);
Nudgeblade_downgraded,Do [sword]<d6> damage[;] get|new dice (value -1),2,attack(d); if(d >= 2) givedice(d - 1);,Meganudge,MIN4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d >= 2) givedice(d - 1);
Nudgeblade_weakened,Do [sword]<d6> damage[;] get|new dice (value -1),1,attack(d); if(d >= 2) givedice(d - 1);,Meganudge,MIN4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d >= 2) givedice(d - 1);
Counterfeit,Duplicate a dice,2,givedice([d[;] d]);,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Counterfeit_upgraded,Duplicate a dice,1,givedice([d[;] d]);,Clone Device,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Counterfeit_downgraded,Duplicate a dice,2,givedice([d[;] d]);,Clone Device,MAX3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Counterfeit_weakened,Duplicate a dice,1,givedice([d[;] d]);,Clone Device,MAX3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Dodge,Dodge next attack,1,inflictself(DODGE);,Quick Thinking,COUNTDOWN,16,ORANGE,threequartercountdown,noeffect,dodge,,0,YES,NO,vanilla,,,,,,,,,,,,
Flight,Dodge next attack,2,inflictself(DODGE);,Quick Thinking,EVEN,,YELLOW,simplify,complicate,dodge,,0,YES,NO,vanilla,,,,,,,,,,,,
Pickpocket,Steals [gold]1 gold|[gray](once per battle),1,bonus(1000); self.gold += 1; target.gold -= 1; if(target.gold < 0) target.gold = 0; screenshake();,Harvest,EVEN,,GREEN,change_power,complicate,,,0,NO,YES,showgold|vanilla,,,,,,,,,,,,
Pickpocket_upgraded,Steals [gold]2 gold|[gray](once per battle),1,bonus(1000); self.gold += 2; target.gold -= 2; if(target.gold < 0) target.gold = 0; screenshake();,Harvest,EVEN,,GREEN,,,,,0,NO,YES,showgold|vanilla,,,,,,,,,,,,
Poison Needle,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,change_power,change_power,,,3,NO,NO,vanilla,,,,,,,,,,,,
Poison Needle_upgraded,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,,,,,5,NO,NO,vanilla,,,,,,,,,,,,
Poison Needle_downgraded,Inflict [poison]1 poison,1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Crowbar,Reduce the countdowns|on all equipment by <d6>,1,boostcountdowns(d);,Accelerate,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Crowbar_upgraded,Reduce countdowns by <d6>|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,NORMAL,,GREEN,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Leather Armor,Reduce [reduce]1 damage|from each attack,1,inflictself(REDUCE[;] 1);,Protection,ODD,,ORANGE,simplify,complicate,reduce,,0,YES,NO,vanilla,,,,,,,,,,,,
Iron Armor,Reduce [reduce]2 damage|from each attack,1,inflictself(REDUCE[;] 2);,Protection,REQUIRE5,,ORANGE,simplify,change_power,reduce,,0,YES,NO,vanilla,1,,,,,,,,,,,
Iron Armor_downgraded,Reduce [reduce]1 damage|from each attack,1,inflictself(REDUCE[;] 1);,Protection,REQUIRE5,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hookshot,Next equipment has|+1 use this turn,1,if(simulation){ if(getstatusself(REEQUIPNEXT) == 0) { bonus(1000); } else { bonus(-1000); } } else { inflictself(REEQUIPNEXT); },Steal,REQUIRE2,,GREEN,change_power,change_power,reequipnext,,0,YES,NO,vanilla,1,,,,,,,,,,,
Hookshot_upgraded,Next equipment has|+1 use this turn,1,if(simulation){ if(getstatusself(REEQUIPNEXT) == 0) { bonus(1000); } else { bonus(-1000); } } else { inflictself(REEQUIPNEXT); },Steal,EVEN,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hookshot_downgraded,Next equipment has|+1 use this turn,1,if(simulation){ if(getstatusself(REEQUIPNEXT) == 0) { bonus(1000); } else { bonus(-1000); } } else { inflictself(REEQUIPNEXT); },Steal,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hacksaw,Split a dice in three,1,if(simulation) { bonus(50 + (d * 10)); } else { givedice(split(d[;] 3)[;] ~splitdice~); },Magic Lockpick,MIN3,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hacksaw_upgraded,Split a dice in three,1,if(simulation) { bonus(50 + (d * 10)); } else { givedice(split(d[;] 3)[;] ~splitdice~); },Magic Lockpick,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Skeleton Key,Set all dice to <slotdoubles>,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(d[;] self.screenposition()[;] c * 0.05); c++; } } } } } sfx(~diceroll~); },Replicate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Skeleton Key_upgraded,Set all dice to <d6>,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(d[;] self.screenposition()[;] c * 0.05); c++; } } } } } sfx(~diceroll~); },Replicate,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Skeleton Key_downgraded,Set all dice to 2,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(2[;] self.screenposition()[;] c * 0.05); c++; } } } } } sfx(~diceroll~); },Replicate,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Lantern,Get 2x<d6>s next turn|[gray](once per battle),1,inflictself(~stash~+d[;]2); inflictself(~lantern~);,Replicate,NORMAL,,YELLOW,change_power,complicate,,,0,YES,YES,vanilla,,,,,,,,,,,,
Lantern_upgraded,Get 2x<d6>s next turn,1,inflictself(~stash~+d[;]2); inflictself(~lantern~);,Replicate,NORMAL,,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Spiked Shield,Even: [sword]<evendice_d6> damage|Odd: [shield]<odddice_d6> shield,2,if(d%2 == 0){ attack(d); sfxdamage(target[;]d); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },Protection,MAX5,,RED,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,if(d%2 == 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Last Stand,Survive the next fatal|blow (Doesn't stack),1,inflictself(SURVIVE);,Still Standing,COUNTDOWN,12,GREEN,threequartercountdown,noeffect,survive,,0,YES,NO,vanilla,,,,,,,,,,,,
Wooden Stake,Takes final [heart]5 hp|from vampires,1,if(target.hp <= 5 && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); attack(target.hp); } else{ attack(5); target.textparticle(~No effect!~); },Heat Ray,COUNTDOWN,40,RED,halfcountdown,noeffect,vampire,,0,NO,NO,excludefromrandomlists|vanilla,1,,,,,,,,,,,
Blood Suck,Drain [heart]<d6> health,2,drain(d);,Blood Sip,MAX4,,RED,simplify,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bandage,Heal [heal]1 health|[gray](Reuseable),1,attackself(-1);,Regenerate,ODD,,GREEN,simplify,removereusable,,,-1,YES,NO,vanilla,1,,,,,,,,,,,
First Aid Kit,Heal [heal]8 health,1,attackself(-8);,Regenerate,COUNTDOWN,16,GREEN,threequartercountdown,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
First Aid Kit_downgraded,Heal [heal]4 health,1,attackself(-4);,Regenerate,COUNTDOWN,16,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
First Aid Kit_weakened,Heal [heal]4 health,1,attackself(-4);,Regenerate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Rosepetal Staff,Mysterious old staff|Inflict [poison]??? poison,2,var p = 0; for(d in actualdice){ if(d.basevalue == 3 # d.basevalue == 5){ p += d.basevalue - 1; } } if(p > 0) inflict(POISON[;] p);,Poison Arrow,NORMAL|NORMAL,,PURPLE,change_description,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Rosepetal Staff_upgraded,Mysterious old staff|Inflict [poison]??? poison,2,var p = 4; var d = actualdice[0]; if(d.basevalue == 3 # d.basevalue == 5){ p += d.basevalue - 1; } if(p > 0) inflict(POISON[;] p);,Poison Arrow,NORMAL|FREE5,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Rosepetal Shield,Mysterious shield|Add [shield]??? shield,2,var s = 0; for(d in actualdice){ if(d.basevalue == 3 # d.basevalue == 5) { s += d.basevalue - 1; } } if(s > 0) inflictself(SHIELD[;] s);,Protection,NORMAL|NORMAL,,ORANGE,change_description,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Rosepetal Shield_upgraded,Mysterious shield|Add [shield]??? shield,2,var s = 4; var d = actualdice[0]; if(d.basevalue == 3 # d.basevalue == 5){ s += d.basevalue - 1; } if(s > 0) inflictself(SHIELD[;] s);,Protection,NORMAL|FREE5,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Second Wind,Take an extra turn|[gray](once per battle),1,inflictself(EXTRATURN);,Time Stop,COUNTDOWN,16,YELLOW,halfcountdown,change_power,,,0,YES,YES,vanilla,,,,,,,,,,,,
Second Wind_downgraded,Roll an extra dice|[gray](once per battle),1,givedice();,Time Stop,COUNTDOWN,16,YELLOW,,,,,0,YES,YES,vanilla,,,,,,,,,,,,
Second Wind_weakened,Roll an extra dice|[gray](once per battle),1,givedice();,Time Stop,COUNTDOWN,8,YELLOW,,,,,0,YES,YES,vanilla,,,,,,,,,,,,
Smog Cloud,Inflict [poison]3 poison|and [blind]3 blind,2,inflict(POISON[;] 3); inflict(BLIND[;] 3);,Poison Arrow,COUNTDOWN,15,PURPLE,change_poison,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Smog Cloud_downgraded,Inflict [poison]3 poison,2,inflict(POISON[;] 3);,Poison Arrow,COUNTDOWN,15,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Smog Cloud_upgraded,Inflict [poison]4 poison|and [blind]4 blind,2,inflict(POISON[;] 4); inflict(BLIND[;] 4);,Poison Arrow,COUNTDOWN,15,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Run away!,Run away!,2,flee();,Jetpack,COUNTDOWN,20,YELLOW,change_power,noeffect,,,0,YES,NO,vanilla,,,,,,,,,,,,
Run away!_upgraded,Run away!,2,flee();,Jetpack,COUNTDOWN,15,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Run away!_downgraded,No effect,2,donothing();,Jetpack,COUNTDOWN,20,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Run away!_weakened,No effect,2,donothing();,Jetpack,COUNTDOWN,15,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Fists,Do [sword]3 damage|[gray](Reuseable),2,attack(3); if(d <= 3) bonus(1000);,Shuriken,NORMAL,,RED,change_power,removereusable,,,2,NO,NO,vanilla,,,,,,,,,,,,
Fists_upgraded,Do [sword]4 damage|[gray](Reuseable),2,attack(4); if(d <= 4) bonus(1000);,Shuriken,NORMAL,,RED,,,,,2,NO,NO,vanilla,,,,,,,,,,,,
Knuckle Duster,Do [sword]3 damage|[gray](Reuseable),2,attack(3); if(d <= 3) bonus(1000);,Shuriken,NORMAL,,RED,change_power,removereusable,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Knuckle Duster_upgraded,Do [sword]4 damage|[gray](Reuseable),2,attack(4); if(d <= 4) bonus(1000);,Shuriken,NORMAL,,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Poison Cloud,Inflict [poison]<d6> poison,1,inflict(POISON[;] d);,Poison Arrow,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Poison Cloud_downgraded,Inflict [poison]<d6> poison,1,inflict(POISON[;] d);,Poison Arrow,MAX2,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Poison Cloud_upgraded,Inflict [poison]3 poison,1,inflict(POISON[;] 3);,Poison Arrow,MAX3,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Earthquake,Weaken [weaken]3 equipment[;]|do [weaken]6 damage,2,attack(6[;] WEAKEN); inflict(WEAKEN[;] 3);,Scream,COUNTDOWN,10,ORANGE,change_power,change_power,weaken,,0,NO,NO,vanilla,,,,,,,,,,,,
Earthquake_downgraded,Weaken [weaken]2 equipment[;]|do [weaken]6 damage,2,attack(6[;] WEAKEN); inflict(WEAKEN[;] 2);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Earthquake_upgraded,Weaken [weaken]3 equipment[;]|do [weaken]9 damage,2,attack(9[;] WEAKEN); inflict(WEAKEN[;] 3);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hammer,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock,2,attack(d[;] SHOCK); if(d == 6) inflict(SHOCK); if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.2); },Jackhammer,NORMAL,,YELLOW,reducesize,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hammer_downgraded,Do [shock]<d6> damage,2,attack(d[;] SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hammer_weakened,Do [shock]<d6> damage,1,attack(d[;] SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hammer_deckupgrade,Do [shock]<d6> damage|[shock]Shocks the enemy,2,attack(d[;] SHOCK); inflict(SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Shovel,Do [weaken]<d6> damage[;]|on 6[;] inflict [weaken]1 weaken,2,attack(d[;] WEAKEN); if(d == 6) inflict(WEAKEN); if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.2); },Burrower,NORMAL,,ORANGE,change_power,change_power,weaken,,0,NO,NO,vanilla,,,,,,,,,,,,
Shovel_upgraded,Do [weaken]<d6> damage[;]|on even[;] inflict [weaken]1 weaken,2,attack(d[;] WEAKEN); if(d % 2 == 0) inflict(WEAKEN); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.2); },Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Shovel_downgraded,Do [weaken]<d6> damage,2,attack(d[;] WEAKEN);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Electromagnet,Do [sword]<twicetimesused> damage|Add +2 each use,2,attack((e.timesused * 2) + 4);,Magic Dice,COUNTDOWN,7,RED,reducesize,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Electromagnet_downgraded,Do [sword]<twicetimesused> damage,2,attack((e.timesused * 2) + 4); e.timesused--;,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Electromagnet_weakened,Do [sword]<twicetimesused> damage,1,attack((e.timesused * 2) + 4); e.timesused--;,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Electromagnet_deckupgrade,Do [sword]<twicetimesused_plus1> damage|Add +2 each use,2,attack((e.timesused * 2) + 5);,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spanner,Combine dice,1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Spanner_upgraded,Combine dice|[gray](Reuseable),1,if(simulation) { if(d < 12) bonus(1000); } else { for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~); },Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,3,YES,NO,vanilla,,,,,,,,,,,,
Doppeldice,Double dice value,1,givedice(d * 2[;] ~combinedice~);,Clone Device,MAX3,,GREEN,change_requirements,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Doppeldice_upgraded,Double dice value,1,givedice(d * 2[;] ~combinedice~);,Clone Device,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Flamethrower,[fire]<d6> dmg[;] +[fire]2 burn|[gray](once per battle),1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Blowtorch,NORMAL|NORMAL,,RED,change_power,complicate,,,0,NO,YES,vanilla,,,,,,,,,,,,
Flamethrower_upgraded,[fire]<d6> dmg[;] +[fire]4 burn|[gray](once per battle),2,attack(d[;] FIRE); inflict(FIRE[;] 4);,Blowtorch,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Pea Shooter,Do [sword]2 damage|[gray](Reuseable),1,attack(2);,Pea Gun,COUNTDOWN,5,RED,change_power,change_power,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Pea Shooter_downgraded,Do [sword]1 damage|[gray](Reuseable),1,attack(1);,Pea Gun,COUNTDOWN,5,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Pea Shooter_upgraded,Do [sword]4 damage|[gray](Reuseable),1,attack(4);,Pea Gun,COUNTDOWN,5,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Lightning Rod,Discharge [sword]<charge> damage|Take damage to charge,2,attack(e.charge); e.charge = 0;,Static Shock,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,e.charge = 0;
Lightning Rod_downgraded,Discharge[;] but do|zero damage,2,e.charge = 0;,Static Shock,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,e.charge = 0;
Lightning Rod_upgraded,Discharge [sword]<charge> damage|Take damage to charge,2,attack(e.charge); e.charge = 0;,Static Shock,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,e.charge = 0;
Scrap Metal,Gain [shield]1 shield|(Always offered as scrap),1,inflictself(SHIELD[;] 1);,Barricade,NORMAL,,GRAY,change_power,change_function,,,0,YES,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Metal_downgraded,No effect.|(Always offered as scrap),1,,Barricade,NORMAL,,GRAY,,,,,0,YES,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Metal_upgraded,Gain [shield]2 shield|(Always offered as scrap),1,inflictself(SHIELD[;] 2);,Barricade,NORMAL,,GRAY,,,,,0,YES,NO,appearsforparts|vanilla,,,,,,,,,,,,
Matchstick,Burns [fire]1 dice|[gray](Reuseable),1,inflict(FIRE);,Blowtorch,EVEN,,RED,change_requirements,removereusable,,,-1,NO,NO,vanilla,1,,,,,,,,,,,
Matchstick_upgraded,Burns [fire]1 dice|[gray](Reuseable),1,inflict(FIRE);,Blowtorch,NORMAL,,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Tazer,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d[;] SHOCK); inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,change_requirements,change_function,,,0,NO,NO,vanilla,,,,,,,,,,,,
Tazer_downgraded,[shock]Shocks the enemy,1,inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Tazer_upgraded,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d[;] SHOCK); inflict(SHOCK);,Plasma Gun,MAX5,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sonic Wave,Do [weaken]<d6> damage|[weaken]Weakens enemy,1,attack(d[;] WEAKEN); inflict(WEAKEN);,Plasma Gun,MAX4,,ORANGE,change_requirements,change_function,weaken,,0,NO,NO,vanilla,1,,,,,,,,,,,
Sonic Wave_upgraded,Do [weaken]<d6> damage|[weaken]Weakens enemy,1,attack(d[;] WEAKEN); inflict(WEAKEN);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sonic Wave_downgraded,[weaken]Weakens enemy,1,inflict(WEAKEN);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Backstab,Do [sword]<equipmentuse> damage. Add [sword]1|on each item use.,1,attack(self.equipmentused - 1);,Time Stop,REQUIRE3,,GRAY,simplify,doublerequirements,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Duplicate,Duplicate a dice,1,givedice([d[;] d]);,Clone Device,MIN4,,GREEN,simplify,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Infliction,Do [sword]3 damage,1,attack(3);,Bubble Gun,NORMAL,,RED,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Infliction_upgraded,Do [sword]4 damage,1,attack(4);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Magic Dagger,Do [sword]2 damage|[gray](Reuseable),1,attack(2);,Shuriken,NORMAL,,RED,change_power,complicate,,,-1,NO,NO,vanilla,1,,,,,,,,,,,
Magic Dagger_upgraded,Do [sword]3 damage|[gray](Reuseable),1,attack(3);,Shuriken,NORMAL,,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Electric Shock,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d[;] SHOCK); inflict(SHOCK);,Zap,EVEN,,YELLOW,simplify,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Electric Shock_downgraded,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d[;] SHOCK); inflict(SHOCK);,Zap,MAX3,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Shard,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,change_power,ice,,0,NO,NO,vanilla,1,,,,,,,,,,,
Ice Shard_downgraded,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE);,Refrigerator,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lightning Bolt,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d[;] SHOCK); inflict(SHOCK);,Zap,NORMAL|NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Lightning Bolt_upgraded,Do [shock]<d6> damage[;]|[]+[shock]2 shock,1,attack(d[;] SHOCK); inflict(SHOCK[;] 2);,Zap,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Inferno,Do [fire]<d6> damage[;]|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE);,Ember,NORMAL|NORMAL,,RED,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Inferno_upgraded,Do [fire]<d6> damage[;]|Burn [fire]2 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Ember,NORMAL|NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Blizzard,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE);,Arctic Storm,NORMAL|NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Blizzard_upgraded,Do [ice]<d6> damage[;]|Freeze [ice]2 dice,1,attack(d[;] ICE); inflict(ICE[;] 2);,Arctic Storm,NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Shockwave,Do [weaken]<d6> damage[;]|[]+[weaken]1 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN);,Theremin,NORMAL|NORMAL,,ORANGE,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Shockwave_upgraded,Do [weaken]<d6> damage[;]|[]+[weaken]2 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN[;] 2);,Theremin,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Illuminate,Get 2x[dice]<d6>s next turn,1,inflictself(~stash~+d[;]2); inflictself(~illuminate~);,Magic Dice,NORMAL,,YELLOW,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Illuminate_upgraded,Get 4x[dice]<slotdoubles>s next turn,1,inflictself(~stash~+d[;]4); inflictself(~illuminate~);,Magic Dice,DOUBLES|DOUBLES,,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Magic Reroll,Reroll unused dice,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; } } } } } },Random Roll,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Life Drain,Drain [heart]<d6> health,1,drain(d);,Blood Sip,MAX3,,RED,increaserange,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Mystery Box,Very mysterious,1,giveequipment(rand(loadtext(~diceydungeons/mysterybox~))[;] true);,Reversal,NORMAL,,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mystery Box_upgraded,Contents upgraded,1,giveequipment(rand(loadtext(~diceydungeons/mysterybox~)) + ~+~[;] true);,Reversal,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Slime Ball,Add [poison]2 poison,1,inflict(POISON[;] 2);,Emetic,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Slime Ball_upgraded,Add [poison]3 poison,1,inflict(POISON[;] 3);,Emetic,EVEN,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Meteor,Do [fire]20 damage[;]|burn all dice,1,attack(20[;] FIRE); inflict(FIRE[;] ALL);,Hellfire,COUNTDOWN,20,RED,change_power,change_power,,,0,NO,NO,vanilla,2,,,,,,,,,,,
Meteor_upgraded,Do [fire]25 damage[;]|burn all dice,1,attack(25[;] FIRE); inflict(FIRE[;] ALL);,Hellfire,COUNTDOWN,20,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Meteor_downgraded,Do [fire]10 damage[;]|burn a dice,1,attack(10[;] FIRE); inflict(FIRE[;] 1);,Hellfire,COUNTDOWN,20,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cauldron,Do [sword]1 damage[;]|get a new dice,1,attack(1); if(simulation) { bonus(500 - (d * 10)); } else { givedice(); },Random Roll,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice();
Cauldron_upgraded,Do [sword]1 damage[;] reroll dice|[gray](Reuseable),1,attack(1); if(simulation) { bonus(500 - (d * 10)); } else { givedice(); },Random Roll,NORMAL,,PURPLE,,,,,2,NO,NO,vanilla,,,,,,,,,,,,givedice();
Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hex,Even: [weaken]1 weaken|Odd: [shock]1 shock,1,if(d % 2 == 1) { inflict(SHOCK); sfx(~_shock~[;]~~[;]0.2); } else{ inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2); },Scream,NORMAL,,PURPLE,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Hex_upgraded,Even: [weaken]2 weaken|Odd: [shock]2 shock,1,if(d % 2 == 1) { inflict(SHOCK[;] 2); sfx(~_shock~[;]~~[;]0.2); } else{ inflict(WEAKEN[;] 2); sfx(~_weaken~[;]~~[;]0.2); },Scream,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Magic Spear,Do [sword]10 damage,1,attack(10);,Magic Six,REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,vanilla,2,,,,,,,,,,,
Magic Spear_downgraded,Do [sword]5 damage,1,attack(5);,Magic Six,REQUIRE6,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Magic Spear_upgraded,Do [sword]14 damage,1,attack(14);,Magic Six,REQUIRE6,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Glass Cauldron,Freeze [ice]1 dice[;]|roll a one,1,inflict(ICE); givedice(1);,Random Roll,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice(1);
Glass Cauldron_upgraded,Freeze [ice]1 dice[;] roll a one|[gray](Reuseable),1,inflict(ICE); givedice(1);,Random Roll,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,vanilla,,,,,,,,,,,,givedice(1);
Glass Cauldron_downgraded,Freeze [ice]1 dice,1,inflict(ICE);,Random Roll,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Gold Cauldron,Do [sword]1 damage[;]|get an even dice,1,attack(1); givedice(rand([2[;]4[;]6]));,Random Roll,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice(rand([2[;]4[;]6]));
Gold Cauldron_upgraded,Do [sword]1[;] get an even dice|[gray](Reuseable),1,attack(1); givedice(rand([2[;]4[;]6]));,Random Roll,NORMAL,,YELLOW,,,,,2,NO,NO,vanilla,,,,,,,,,,,,givedice(rand([2[;]4[;]6]));
Gold Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Silver Cauldron,Do [sword]1 damage[;]|get an odd dice,1,attack(1); givedice(rand([1[;]3[;]5]));,Random Roll,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice(rand([1[;]3[;]5]));
Silver Cauldron_upgraded,Do [sword]1[;] get an odd dice|[gray](Reuseable),1,attack(1); givedice(rand([1[;]3[;]5]));,Random Roll,NORMAL,,GRAY,,,,,2,NO,NO,vanilla,,,,,,,,,,,,givedice(rand([1[;]3[;]5]));
Silver Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,GRAY,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Crucible,Roll a burning dice|[gray](Reuseable),1,if(simulation){ bonus(-1000); } else { inflictself(FIRE); if(self.isplayer) { givedice(); } },Random Roll,NORMAL,,RED,change_power,change_power,,,-1,YES,NO,vanilla,1,,,,,,,,,,,
Crucible_upgraded,Roll four new burning dice,1,if(simulation){ bonus(-1000); } else { inflictself(FIRE[;] 4); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); },Random Roll,NORMAL,,RED,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Crucible_downgraded,Roll a burning dice,1,if(simulation){ bonus(-1000); } else { inflictself(FIRE); givedice(); },Random Roll,NORMAL,,RED,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Absolute Zero,Do [ice]25 damage[;]|freeze all dice,1,attack(25[;] ICE); inflict(ICE[;] ALL);,Arctic Storm,COUNTDOWN,24,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,2,,,,,,,,,,,
Absolute Zero_upgraded,Do [ice]30 damage[;]|freeze all dice,1,attack(30[;] ICE); inflict(ICE[;] ALL);,Arctic Storm,COUNTDOWN,24,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Absolute Zero_downgraded,Do [ice]12 damage[;]|freeze a dice,1,attack(12[;] ICE); inflict(ICE[;] 1);,Arctic Storm,COUNTDOWN,24,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Headbutt,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Plasma Gun,EVEN,,PURPLE,change_power,removereusable,,,2,NO,NO,vanilla,,,,,,,,,,,,
Headbutt_upgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Plasma Gun,EVEN|FREE1,,PURPLE,,,,,2,NO,NO,vanilla,,,,,,,,,,,,
Ink Splat,Blind [blind]1 dice,2,inflict(BLIND[;] 1);,Oh No!,ODD,,PURPLE,change_power,complicate,blind,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Ink Splat_upgraded,Blind [blind]1 dice|[gray](Reuseable),2,inflict(BLIND[;] 1);,Oh No!,ODD,,PURPLE,,,,,-1,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Seize,Lock [lock]1 dice,2,inflict(LOCK[;] 1); bonus(1000);,Random Roll,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spatula,Flip a dice upside down,1,givedice(7-d);,Megaflip,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Spatula_downgraded,Flip a dice upside down,1,givedice(7-d);,Megaflip,MIN4,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Spatula_upgraded,Flip a dice upside down|[gray](Reuseable),1,givedice(7-d);,Megaflip,NORMAL,,GREEN,,,,,3,YES,NO,vanilla,,,,,,,,,,,,
Quarterstaff,Do [sword]<d6> damage[;] on 4[;]|return the dice,2,attack(d); if(d == 4) givedice(4);,Plasma Gun,EVEN,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 4) givedice(4);
Quarterstaff_downgraded,Do [sword]<d6> damage[;] on 4[;]|return the dice,2,attack(d); if(d == 4) givedice(4);,Plasma Gun,REQUIRE4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 4) givedice(4);
Quarterstaff_upgraded,Do [sword]<d6> damage[;] on 4[;]|return the dice,2,attack(d); if(d == 4) givedice(4);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 4) givedice(4);
Bear Maul,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Bear Smash,NORMAL|FREE2,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bear Maul_upgraded,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Bear Smash,NORMAL|FREE4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bear Maul_downgraded,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Bear Smash,MAX4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hibernate,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hibernate_upgraded,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hibernate_downgraded,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,MAX2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Bear Roar,Weaken [weaken]3 equipment,1,inflict(WEAKEN[;] 3);,Bear Smash,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bear Roar_upgraded,Weaken [weaken]4 equipment,1,inflict(WEAKEN[;] 4);,Bear Smash,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bear Roar_downgraded,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Bear Smash,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bear Charge,Repeat next action,1,inflictself(FURY);,Fury,COUNTDOWN,10,PURPLE,halfcountdown,noeffect,,,0,YES,NO,vanilla,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Juggling Ball,Do [sword]<d6> damage[;]|get a new dice,1,attack(d); if(simulation){ bonus(50); } else { givedice(); },Random Roll,MAX3,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice();
Juggling Ball_upgraded,Do [sword]<d6> damage[;]|get a new dice,1,attack(d); if(simulation){ bonus(50); } else { givedice(); },Random Roll,MAX4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice();
Juggling Ball_downgraded,Do [sword]<d6> damage,1,attack(d);,Random Roll,MAX3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Age,Freeze all dice,2,inflict(ICE[;] ALL); bonus(1000);,Arctic Storm,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Age_upgraded,Freeze all dice,2,inflict(ICE[;] ALL); bonus(1000);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Age_downgraded,Freeze all dice,2,inflict(ICE[;] ALL); bonus(1000);,Arctic Storm,REQUIRE1|REQUIRE1|REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Camouflage,Blind [blind]2 dice,2,inflict(BLIND[;] 2); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,change_power,change_power,blind,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Camouflage_upgraded,Blind [blind]4 dice,2,inflict(BLIND[;] 4); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Camouflage_downgraded,Blind [blind]1 dice,2,inflict(BLIND); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Overwhelm,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,EVEN,,RED,change_power,change_power,,,2,NO,NO,vanilla,,,,,,,,,,,,
Overwhelm_upgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,EVEN,,RED,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Overwhelm_downgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,REQUIRE6,,RED,,,,,2,NO,NO,vanilla,,,,,,,,,,,,
Spike,Do [sword]3 damage,1,attack(3);,Pea Gun,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spike_upgraded,Do [sword]3 damage,1,attack(3);,Pea Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spike_weakened,Do [sword]1 damage,1,attack(1);,Pea Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spike_downgraded,Do [sword]1 damage,1,attack(1);,Pea Gun,COUNTDOWN,6,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sharp Spike,Do [sword]<double> damage,1,attack(d * 2);,Pea Gun,REQUIRE1|REQUIRE1,,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Sharp Spike_upgraded,Do [sword]<triple> damage,1,attack(d * 3);,Pea Gun,REQUIRE1|REQUIRE1,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sharp Spike_downgraded,Do [sword]<d6> damage,1,attack(d);,Pea Gun,REQUIRE1|REQUIRE1,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sneeze,Reduce the countdowns|on all equipment by <slotdoubles>,2,boostcountdowns(d);,Accelerate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sneeze_upgraded,Reduce the countdowns|on all equipment to zero,2,boostcountdowns(-1);,Accelerate,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sneeze_downgraded,Reduce the countdowns|on all equipment by 6,2,boostcountdowns(6);,Accelerate,REQUIRE6|REQUIRE6,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Blender,Split a dice into 1s,2,givedice(split(d[;] 6[;] false));,Magic Lockpick,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Blender_upgraded,Split a dice into 1s[;]|and roll an extra 1,2,var dicearray = split(d[;] 6[;] false); dicearray.push(1); givedice(dicearray);,Magic Lockpick,MIN2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Blender_downgraded,Split a dice into 1s,2,givedice(split(d[;] 6[;] false));,Magic Lockpick,EVEN,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
The Curse,Do [sword]<d6> damage[;]|Inflict curse,1,attack(d); inflict(CURSE);,Cackle,REQUIRE1|FREE1,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Curse_upgraded,Do [sword]<d6> damage[;]|Inflict curse,1,attack(d); inflict(CURSE);,Cackle,REQUIRE1|FREE4,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Curse_downgraded,Inflict curse,1,inflict(CURSE);,Cackle,REQUIRE1,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Wind,Do [sword]<d6> damage[;]|Lock [lock]2 dice,1,attack(d); inflict(LOCK[;] 2);,Overload,REQUIRE2|FREE2,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Wind_upgraded,Do [sword]<d6> damage[;]|Lock [lock]2 dice,1,attack(d); inflict(LOCK[;] 2);,Overload,REQUIRE2|FREE4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Wind_downgraded,Lock [lock]2 dice,1,inflict(LOCK[;] 2);,Overload,REQUIRE2,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Shadow,Do [sword]<d6> damage[;]|Blind [blind]3 dice,1,attack(d); inflict(BLIND[;] 3);,Overload,REQUIRE3|FREE3,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
The Shadow_upgraded,Do [sword]<d6> damage[;]|Blind [blind]3 dice,1,attack(d); inflict(BLIND[;] 3);,Overload,REQUIRE3|FREE5,,GRAY,,,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
The Shadow_downgraded,Blind [blind]3 dice,1,inflict(BLIND[;] 3);,Overload,REQUIRE3,,GRAY,,,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
The Cold,Do [ice]<d6> damage[;]|Freeze [ice]4 dice,1,attack(d[;] ICE); inflict(ICE[;] 4);,Arctic Storm,REQUIRE4|FREE4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Cold_upgraded,Do [ice]<d6> damage[;]|Freeze [ice]4 dice,1,attack(d[;] ICE); inflict(ICE[;] 4);,Arctic Storm,REQUIRE4|FREE5,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Cold_downgraded,Freeze [ice]4 dice,1,inflict(ICE[;] 4);,Arctic Storm,REQUIRE4,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Ashes,Do [fire]<d6> damage[;]|Burn [fire]5 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 5);,Ember,REQUIRE5|FREE5,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Ashes_upgraded,Do [fire]<d6> damage[;]|Burn [fire]5 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 5);,Ember,REQUIRE5|FREE6,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Ashes_downgraded,Burn [fire]5 dice,1,inflict(FIRE[;] 5);,Ember,REQUIRE5,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Storm,Do [shock]<d6> damage[;]|Inflict [shock]6 shock,1,attack(d[;] SHOCK); inflict(SHOCK[;] 6);,Zap,REQUIRE6|FREE6,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
The Storm_upgraded,Do [shock]<d6> damage[;]|Shock [shock]6 and silence,1,attack(d[;] SHOCK); inflict(SHOCK[;] 6); inflict(SILENCE);,Zap,REQUIRE6|FREE6,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|cannotsteal|vanilla,,,,,,,,,,,,
The Storm_downgraded,Inflict [shock]6 shock,1,inflict(SHOCK[;] 6);,Zap,REQUIRE6,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mechanical Arm,Do [sword]<dicerolled> damage[;]|add [sword]1 each roll,1,attack(self.roll_totaldice + 1);,Lucky Shot,EVEN,,RED,simplify,complicate,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Forcefield,Add [shield]<dicerolled> shield[;]|add [shield]1 each roll,2,inflictself(SHIELD[;] (self.roll_totaldice + 1));,Protection,ODD,,ORANGE,simplify,complicate,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Cheat Code,Increase Jackpot|range this turn,1,if(!simulation) { if(self.usecpuinsteadofdice) { self.roll_range += 1; adjustrobotcounter(0); } } bonus(-10000);,Dial Up Sounds,ODD,,YELLOW,change_power,complicate,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Cheat Code_upgraded,Increase Jackpot|range by 2 this turn,1,if(!simulation) { if(self.usecpuinsteadofdice) { self.roll_range += 2; adjustrobotcounter(0); } } bonus(-10000);,Dial Up Sounds,ODD,,YELLOW,,,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Fixed Payout,Use an additional|Jackpot ability,1,if(!simulation) { if(self.usecpuinsteadofdice) { self.roll_jackpotbonus += 1; } } bonus(-10000);,Infinity Mirror,EVEN,,YELLOW,change_power,complicate,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Fixed Payout_upgraded,Use all additional|Jackpot abilities,1,if(!simulation) { if(self.usecpuinsteadofdice) { self.roll_jackpotbonus += 2; } } bonus(-10000);,Infinity Mirror,EVEN,,YELLOW,,,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Heat Sink,Reduce CPU|counter by <d6>,1,adjustrobotcounter(-d);,Meganudge,EVEN,,GREEN,change_power,complicate,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Heat Sink_upgraded,Reduce CPU|counter by 7,1,adjustrobotcounter(-7);,Meganudge,EVEN,,GREEN,,,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Increment,CPU counter + 1|[gray](Reuseable),1,adjustrobotcounter(1);,Megabump,NORMAL,,GREEN,change_power,complicate,,,2,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Increment_upgraded,CPU counter + 1|[gray](Reuseable),1,adjustrobotcounter(1);,Megabump,NORMAL,,GREEN,,,,,-1,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Missile Launcher,Do [fire]<d6> damage[;]|Burn [fire]2 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Blowtorch,LOCKED5,,RED,change_power,complicate,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Missile Launcher_upgraded,Do [fire]<d6> damage[;]|Burn [fire]2 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Blowtorch,LOCKED3,,RED,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Buster Sword,Do [sword]<d6> damage[;]|immune to errors,1,attack(d);,Plasma Gun,NORMAL,,GRAY,add2,complicate,,,0,NO,NO,errorimmune|robotonly|vanilla,,,,,,,,,,,,
Ultima Weapon,Do [sword]<d6> damage[;]|double on jackpot,1,if (self.roll_jackpot > 0){ attack(d * 2); } else { attack(d); },Plasma Gun,NORMAL,,YELLOW,add2,complicate,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Ray Gun,Do [sword]3 damage|[gray](Reuseable),1,attack(3);,Plasma Gun,MIN3,,RED,change_power,complicate,,,3,NO,NO,vanilla,,,,,,,,,,,,
Ray Gun_upgraded,Do [sword]4 damage|[gray](Reuseable),1,attack(4);,Plasma Gun,MIN3,,RED,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Short Circuit,Do [sword]<d6> damage[;]|add random status,1,attack(d); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,LOCKED4,,RED,change_requirements,change_power,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Short Circuit_upgraded,Do [sword]<d6> damage[;]|add random status,1,attack(d); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,NORMAL,,RED,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Short Circuit_downgraded,Add random status,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,LOCKED4,,RED,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Bumpblade,Do [sword]1 damage[;] get|new dice (value +1),1,attack(1); givedice(d + 1);,Megabump,MAX5,,YELLOW,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice(d + 1);
Bumpblade_upgraded,[sword]1 damage[;] bump dice|[gray](Reuseable),1,attack(1); givedice(d + 1);,Megabump,MAX5,,YELLOW,,,,,2,NO,NO,vanilla,,,,,,,,,,,,givedice(d + 1);
Lock 1,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 2,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 3,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 4,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 5,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 6,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 1_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 2_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 3_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 4_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 5_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 6_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Keyblade,Do [sword]3 damage[;]|return the dice,1,attack(3); givedice(d);,Magic Dice,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice(d);
Keyblade_upgraded,Do [sword]4 damage[;]|return the dice,1,attack(4); givedice(d);,Magic Dice,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Keyblade_downgraded,Do [sword]1 damage,1,attack(1);,Magic Dice,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spiky Potion,Do [sword]8 damage|[gray](once per battle),2,attack(8);,Shuriken,COUNTDOWN,8,GRAY,threequartercountdown,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Spiky Potion_downgraded,Do [sword]4 damage|[gray](once per battle),2,attack(4);,Shuriken,COUNTDOWN,8,GRAY,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Fire Potion,[fire]8 damage[;] burn all dice|[gray](once per battle),2,attack(8[;] FIRE); inflict(FIRE[;] ALL);,Ember,COUNTDOWN,8,RED,threequartercountdown,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Fire Potion_downgraded,Do [fire]4 damage|[gray](once per battle),2,attack(4[;] FIRE);,Ember,COUNTDOWN,8,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Toxic Potion,Inflict [poison]5 poison|[gray](once per battle),2,inflict(POISON[;] 5);,Poison Arrow,COUNTDOWN,8,PURPLE,threequartercountdown,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Toxic Potion_downgraded,Inflict [poison]3 poison,2,inflict(POISON[;] 3);,Poison Arrow,COUNTDOWN,8,PURPLE,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Bear Potion,Transform into a bear[;]|recover [heal]12 health,2,attackself(-12); beartransform();,Time Stop,COUNTDOWN,8,GREEN,threequartercountdown,change_power,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,delay(1.0);,,,
Bear Potion_downgraded,Transform into a bear,2,beartransform();,Time Stop,COUNTDOWN,8,GREEN,,,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,delay(1.0);,,,
Cardboard Sword,Do [sword]<cardboardsword> damage|Lose [sword]2 each use,2,var amount = 9 - (e.timesused * 2); if(amount >= 1){ attack(amount); } else { attack(1); },Stardust,EVEN,,RED,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cardboard Sword_upgraded,Do [sword]<upgradedcardboardsword> damage|Lose [sword]1 each use,2,var amount = 9 - (e.timesused); if(amount >= 1){ attack(amount); } else { attack(1); },Stardust,EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Glue,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,ODD,,PURPLE,change_power,removereusable,,,2,NO,NO,vanilla,,,,,,,,,,,,
Glue_upgraded,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,ODD,,PURPLE,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Campfire,[fire]<timesused> dmg[;] burn a dice|Add +[fire]1 each use,2,attack(e.timesused + 1[;] FIRE); inflict(FIRE); bonus(1000);,Ember,EVEN,,RED,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Campfire_upgraded,[fire]<timesused> dmg[;] burn two dice|Add +[fire]1 each use,2,attack(e.timesused + 1[;] FIRE); inflict(FIRE[;] 2); bonus(1000);,Ember,EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Pocket Knife,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3|FREE1,,RED,change_power,change_power,,,3,NO,NO,vanilla,,,,,,,,,,,,
Pocket Knife_upgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3|FREE2,,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Pocket Knife_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3,,RED,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Battle Axe,Do [sword]<double> damage,2,attack(d * 2); bonus(200);,Scream,MAX4,,YELLOW,reducesize,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Battle Axe_downgraded,Do [sword]<double> damage,2,attack(d * 2);,Scream,MAX3,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Battle Axe_weakened,Do [sword]<double> damage,1,attack(d * 2);,Scream,MAX3,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Battle Axe_deckupgrade,Do [sword]<double> damage,2,attack(d * 2);,Scream,MAX5,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Rat,Inflict [poison]1 poison[;]|roll a new dice,1,inflict(POISON); givedice();,Emetic,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice();
Rat_downgraded,Inflict [poison]1 poison,1,inflict(POISON);,Emetic,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Rat_upgraded,Inflict [poison]1 poison[;] roll a|dice with value 3 or more,1,inflict(POISON); givedice(rand([3[;]4[;]5[;]6]));,Emetic,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(rand([3[;]4[;]5[;]6]));
Breadcrumbs,Heal +[heart]1[;] add +[shield]1|[gray](Reuseable),2,attackself(-1); inflictself(SHIELD);,Regenerate,REQUIRE1|REQUIRE1,,ORANGE,change_power,change_power,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Breadcrumbs_downgraded,Add +[shield]1|[gray](Reuseable),2,inflictself(SHIELD);,Regenerate,REQUIRE1|REQUIRE1,,ORANGE,,,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Breadcrumbs_upgraded,Heal +[heart]1[;] add +[shield]1|[gray](Reuseable),2,attackself(-1); inflictself(SHIELD);,Regenerate,REQUIRE1,,ORANGE,,,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Echo Blast,Do [weaken]<d6> damage|[]+[weaken]2 weaken,2,attack(d[;] WEAKEN); inflict(WEAKEN[;] 2);,Plasma Gun,ODD,,ORANGE,change_power,complicate,weaken,,0,NO,NO,vanilla,,,,,,,,,,,,
Echo Blast_upgraded,Do [weaken]<d6> damage|[]+[weaken]2 weaken,2,attack(d[;] WEAKEN); inflict(WEAKEN[;] 2);,Plasma Gun,ODD|FREE1,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Crystallize,Create a random|crystal weapon,2,if(!simulation) { runscript(~diceydungeons/crystalweapon~[;][[~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Power~[;]~Smokey~[;]~Life~[;]~Hollow~][;]~~[;]e[;]self]); },Magic Six,COUNTDOWN,6,GRAY,change_requirements,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize_upgraded,Create a random|crystal weapon,2,if(!simulation) { runscript(~diceydungeons/crystalweapon~[;][[~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Power~[;]~Smokey~[;]~Life~[;]~Hollow~][;]~+~[;]e[;]self]); },Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize_downgraded,Create a random|crystal weapon,2,if(!simulation) { runscript(~diceydungeons/crystalweapon~[;][[~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Power~[;]~Smokey~[;]~Life~[;]~Hollow~][;]~-~[;]e[;]self]); },Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Crystallize@attack,Create a random|crystal weapon,2,if(!simulation) { runscript(~diceydungeons/crystalweapon~[;][[~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Hollow~][;]~~[;]e[;]self]); } sfx(~_thinghappens~);,Magic Six,COUNTDOWN,6,GRAY,change_requirements,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize@attack_upgraded,Create a random|crystal weapon,2,if(!simulation) { runscript(~diceydungeons/crystalweapon~[;][[~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Hollow~][;]~+~[;]e[;]self]); } sfx(~_thinghappens~);,Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize@attack_downgraded,Create a random|crystal weapon,2,if(!simulation) { runscript(~diceydungeons/crystalweapon~[;][[~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Hollow~][;]~-~[;]e[;]self]); } sfx(~_thinghappens~);,Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid|vanilla,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Earth Crystal,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,attack(d[;] WEAKEN); inflict(WEAKEN);,Plasma Gun,ODD,,ORANGE,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fire Crystal,Deal [fire]<d6> damage|Burn [fire]1 dice,2,attack(d[;] FIRE); inflict(FIRE);,Ember,EVEN,,RED,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Air Crystal,Do [shock]<d6> damage[;]|[]+[shock]1 shock,2,attack(d[;] SHOCK); inflict(SHOCK);,Zap,EVEN,,YELLOW,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Crystal,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,2,attack(d[;] ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,complicate,ice,,0,NO,NO,vanilla,,,,,,,,,,,,
Power Crystal,Gain a random blessing,2,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE]); }else { randomstatus = rand([SHIELD[;]REDUCE[;]REEQUIPNEXT[;]DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,EVEN,,PURPLE,simplify,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,donothing();,
Smokey Crystal,Curse enemy,2,inflict(CURSE);,Cackle,ODD,,PURPLE,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Life Crystal,Recover [heal]<d6> health,2,attackself(-d);,Regenerate,MAX4,,GREEN,increaserange,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hollow Crystal,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,GRAY,add2,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Catastrophe,Inflict [shock] shock[;]|[fire] burn[;] and [ice] freeze,1,inflict(SHOCK); inflict(ICE); inflict(FIRE);,Oh No!,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Catastrophe_upgraded,Inflict [shock]2 shock[;]|[fire]2 burn[;] [ice]2 freeze,1,inflict(SHOCK[;] 2); inflict(ICE[;] 2); inflict(FIRE[;] 2);,Oh No!,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Catastrophe_downgraded,Inflict [shock] shock[;]|[fire] burn[;] or [ice] freeze,1,var randstatus = rand([SHOCK[;]FIRE[;]ICE]); inflict(randstatus[;]1); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Oh No!,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Whip,Do [fire]<d6> damage[;]|on 6[;] inflict [fire]1 burn,2,attack(d[;] FIRE); if(d == 6) inflict(FIRE);,Blowtorch,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Whip_upgraded,Do [fire]<d6> damage[;]|on 6[;] inflict [fire]2 burn,2,attack(d[;] FIRE); if(d == 6) inflict(FIRE[;] 2);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Whip_downgraded,Do [fire]<d6> damage,2,attack(d[;] FIRE);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Stumble,Lose [heart]1 health,2,pierceattackself(1);,Time Stop,NORMAL,,PURPLE,change_backfire,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Stumble_upgraded,Lose [heart]1 health[;]|return the dice,2,pierceattackself(1); givedice(d);,Time Stop,NORMAL,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Stumble_downgraded,Lose [heart]2 health,2,pierceattackself(2);,Time Stop,NORMAL,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Bop,Do [sword]3 damage,2,attack(3); if(!simulation){ self.setvar(~bopcount~[;] self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,self.setvar(~bopcount~[;] 0);,self.setvar(~bopcount~[;] 0);,,,,,,,,,
Bop_upgraded,Do [sword]5 damage,2,attack(5); if(!simulation){ self.setvar(~bopcount~[;] self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,,,,,0,NO,NO,vanilla,,self.setvar(~bopcount~[;] 0);,self.setvar(~bopcount~[;] 0);,,,,,,,,,
Bop_downgraded,Do [sword]2 damage,2,attack(2); if(!simulation){ self.setvar(~bopcount~[;] self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,,,,,0,NO,NO,vanilla,,self.setvar(~bopcount~[;] 0);,self.setvar(~bopcount~[;] 0);,,,,,,,,,
Deflect,Block [shield]2 damage,2,inflictself(SHIELD[;] 2);,Barricade,NORMAL,,ORANGE,change_power,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Deflect_upgraded,Block [shield]3 damage,2,inflictself(SHIELD[;] 3);,Barricade,NORMAL,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Call for Backup Warrior,Warrior Smash|[sword]<var:bopcount> dmg[;] +1 per bop,2,attack(self.getvar(~bopcount~));,Lucky Shot,,,BRIGHTCYAN,,change_power,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,self.setvar(~bopcount~[;] 0);,self.setvar(~bopcount~[;] 0);,,,,,,,,,
Call for Backup Thief,Yoink|Borrow equipment,2,/* $var enemyequipment = []; */ for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~)){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); replacemewith(randomequipment.name + randomequipment.namemodifier); }$,Steal,,,GREEN,,change_power,,none,0,NO,NO,excludefromrandomlists|cannotsteal|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Robot,Slot Machine|Get random equipment,2,/* $replacemewith(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~]))[;] -1); */ $,Reversal,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Witch,Magic Trick|Discard current hand,2,/* $e.preventdefault = true; */ Deck.discardhand(); sfx(~jester_discard~); $,Regenerate,,,PURPLE,,change_power,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Inventor,Inspiration|Copy next card,2,/* $e.preventdefault = true; */ Deck.copynextcard(self[;] e); $,Time Stop,,,ORANGE,,change_power,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Warrior_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Thief_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1[;] 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Robot_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Witch_downgraded,Magic Dice|Roll an extra dice,2,givedice();,Regenerate,,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Call for Backup Inventor_downgraded,Barricade|Shield +[shield]3,2,inflictself(SHIELD[;] 3);,Time Stop,,,ORANGE,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid|vanilla,,,,,,,,,,,,
Sweets,Heal [heal]2. If above max hp[;]|convert excess to shield,2,if(self.maxhp - self.hp == 0) { inflictself(SHIELD[;] 2); sfx(~_shield~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 1) { inflictself(SHIELD[;] 1); attackself(-1); sfx(~_shield~[;]~~[;]0.2); } else { attackself(-2); sfx(~_heal~); },Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sweets_upgraded,Heal [heal]3. If above max hp[;]|convert excess to shield,2,if(self.maxhp - self.hp == 0) { inflictself(SHIELD[;] 3); sfx(~_shield~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 1) { inflictself(SHIELD[;] 2); attackself(-1); sfx(~_shield~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 2) { inflictself(SHIELD[;] 1); attackself(-2); sfx(~_shield~[;]~~[;]0.2); } else { attackself(-3); sfx(~_heal~); },Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sweets_downgraded,Heal [heal]1 health,2,attackself(-1);,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Liquorice,Add [poison]2 poison,2,inflict(POISON[;] 2);,Poison Arrow,COUNTDOWN,2,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Liquorice_upgraded,Add [poison]3 poison,2,inflict(POISON[;] 3);,Poison Arrow,COUNTDOWN,2,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Liquorice_downgraded,Add [poison]1 poison,2,inflict(POISON[;] 1);,Poison Arrow,COUNTDOWN,2,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wind up Fist,Do [sword]5 damage,2,attack(5);,Catapult,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wind up Fist_upgraded,Do [sword]11 damage,2,attack(11);,Catapult,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wind up Fist_downgraded,Do [sword]4 damage,2,attack(4);,Catapult,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Buzzer,Inflict [shock]1 shock,1,inflict(SHOCK);,Static Shock,EVEN,,YELLOW,change_requirements,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Buzzer_upgraded,Inflict [shock]1 shock,1,inflict(SHOCK);,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Punchline,Do [sword]5 damage,2,attack(5);,Catapult,EVEN,,ORANGE,simplify,change_power,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Punchline_downgraded,Do [sword]2 damage,2,attack(2);,Catapult,EVEN,,ORANGE,,,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Dice Cannon,Do [sword]1 damage|[gray](Reuseable),2,attack(1);,Catapult,NORMAL,,ORANGE,change_power,complicate,,,-1,NO,NO,finale|vanilla,,,,,,,,,,,,
Dice Cannon_upgraded,Do [sword]2 damage|[gray](Reuseable),2,attack(2);,Catapult,NORMAL,,ORANGE,,,,,-1,NO,NO,finale|vanilla,,,,,,,,,,,,
Grand Finale,Do [sword]15 damage,2,attack(15);,Time Stop,COUNTDOWN,20,ORANGE,change_power,change_power,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Grand Finale_upgraded,Do [sword]15 damage,2,attack(15);,Time Stop,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Grand Finale_downgraded,Do [sword]5 damage,2,attack(5);,Time Stop,COUNTDOWN,20,ORANGE,,,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Grand Finale_weakened,Do [sword]5 damage,2,attack(5);,Time Stop,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Encore,Take an extra turn|[gray](once per battle),2,inflictself(EXTRATURN);,Time Stop,COUNTDOWN,12,ORANGE,halfcountdown,noeffect,,,0,YES,YES,finale|vanilla,,,,,,,,,,,,
Finders Keepers,After the battle[comma] keep|one piece of equipment,2,if(!simulation){ self.finderskeepers = 1; screenshake(); e.changeslots([]); e.fulldescription = ~After the battle[comma] keep[newline]one piece of equipment[newline][gray](activated)~; var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } },Time Stop,COUNTDOWN,12,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotsteal|vanilla,,e.setvar(~sourceequipment~[;]e); e.changeslots([~COUNTDOWN_12~]); e.fulldescription = ~After the battle[comma] keep[newline]one piece of equipment~;,e.changeslots([~COUNTDOWN_12~]); e.fulldescription = ~After the battle[comma] keep[newline]one piece of equipment~; e.resetvar(~sourceequipment~);,e.setvar(~sourceequipment~[;]e);,,,,,,,,
Grindstone,Increase all equipment|durability by 1,1,if(simulation){ bonus(-1000); } else { for(eq in self.equipment){ if(eq.name != ~Grindstone~ ){ eq.totalusesremaining++; eq.animate(~flash~); } } },Barricade,REQUIRE6,,GRAY,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,
Silver Dagger,Do [sword]<d6> damage[;]|if odd[;] get a new dice,1,attack(d); if(d % 2 == 1) givedice();,Overload,MAX4,,GRAY,simplify,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d % 2 == 1) givedice();
Gold Dagger,Do [sword]<d6> damage[;]|if even[;] get a new dice,1,attack(d); if(d % 2 == 0) givedice();,Harvest,MAX4,,YELLOW,simplify,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d % 2 == 0) givedice();
Ice Shatter,Do [ice]<d6> damage[;]|+[ice]3 if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d + 3)[;] ICE); } else { attack((d)[;] ICE); },Arctic Storm,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Shatter_upgraded,Do [ice]<d6> damage[;]|double if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d * 2)[;] ICE); } else { attack((d)[;] ICE); },Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Shatter_downgraded,Do [ice]<d6> damage[;]|+[ice]3 if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d + 3)[;] ICE); } else { attack((d)[;] ICE); },Arctic Storm,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Blast,Do [fire]6 damage for|each burning enemy dice,2,attack(getstatus(FIRE) * 6[;] FIRE);,Hellfire,COUNTDOWN,4,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Blast_upgraded,Do [fire]7 damage for|each burning enemy dice,2,attack(getstatus(FIRE) * 7[;] FIRE);,Hellfire,COUNTDOWN,4,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Blast_downgraded,Do [fire]4 damage for|each burning enemy dice,2,attack(getstatus(FIRE) * 4[;] FIRE);,Hellfire,COUNTDOWN,4,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
High Voltage,Do [shock]<d6> damage[;] return|dice if enemy is shocked,2,if(getstatus(SHOCK) > 0) { givedice(d); } attack((d)[;] SHOCK);,Zap,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,if(getstatus(SHOCK) > 0) { givedice(d); }
High Voltage_upgraded,Do [shock]<d6> damage[;] return|dice if enemy is shocked,2,if(getstatus(SHOCK) > 0) { givedice(d); } attack((d)[;] SHOCK);,Zap,MAX5,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(getstatus(SHOCK) > 0) { givedice(d); }
High Voltage_downgraded,Do [shock]<d6> damage[;] return|dice if enemy is shocked,2,if(getstatus(SHOCK) > 0) { givedice(d); } attack((d)[;] SHOCK);,Zap,MAX2,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(getstatus(SHOCK) > 0) { givedice(d); }
Resonance,Do [weaken]3 damage[;]|+[weaken]2 if enemy is weak,2,if(getstatus(WEAKEN) > 0) { attack((5)[;] WEAKEN); } else { attack((3)[;] WEAKEN); },Scream,ODD,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Resonance_upgraded,Do [weaken]3 damage[;]|+[weaken]4 if enemy is weak,2,if(getstatus(WEAKEN) > 0) { attack((7)[;] WEAKEN); } else { attack((3)[;] WEAKEN); },Scream,ODD,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Resonance_downgraded,Do [weaken]1 damage[;]|+[weaken]2 if enemy is weak,2,if(getstatus(WEAKEN) > 0) { attack((3)[;] WEAKEN); } else { attack((1)[;] WEAKEN); },Scream,ODD,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spark,Burns [fire]1 dice,1,inflict(FIRE);,Blowtorch,EVEN,,RED,simplify,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Snowflake,Freeze [ice]1 dice,1,inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Whisper,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Theremin,ODD,,ORANGE,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Spare 1,A spare one,1,,Magic Dice,SPARE1,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,1,,,,,,,,,,,
Spare 1_upgraded,A spare one[;]|Do [sword]2 damage,1,attack(2);,Magic Dice,SPARE1,,YELLOW,,,,none,0,NO,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,,,,
Spare 2,A spare two,1,,Magic Dice,SPARE2,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,1,,,,,,,,,,,
Spare 2_upgraded,A spare two[;]|Do [sword]2 damage,1,attack(2);,Magic Dice,SPARE2,,YELLOW,,,,none,0,NO,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,,,,
Spare 3,A spare three,1,,Magic Dice,SPARE3,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,1,,,,,,,,,,,
Spare 3_upgraded,A spare three[;]|Do [sword]2 damage,1,attack(2);,Magic Dice,SPARE3,,YELLOW,,,,none,0,NO,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,,,,
Spare 4,A spare four,1,,Magic Dice,SPARE4,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,1,,,,,,,,,,,
Spare 4_upgraded,A spare four[;]|Do [sword]2 damage,1,attack(2);,Magic Dice,SPARE4,,YELLOW,,,,none,0,NO,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,,,,
Spare 5,A spare five,1,,Magic Dice,SPARE5,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,1,,,,,,,,,,,
Spare 5_upgraded,A spare five[;]|Do [sword]2 damage,1,attack(2);,Magic Dice,SPARE5,,YELLOW,,,,none,0,NO,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,,,,
Spare 6,A spare six,1,,Magic Six,SPARE6,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,1,,,,,,,,,,,
Spare 6_upgraded,A spare six[;]|Do [sword]2 damage,1,attack(2);,Magic Six,SPARE6,,YELLOW,,,,none,0,NO,NO,curseavoid|excludefromrandomlists|cannotreuse|vanilla,,,,,,,,,,,,
Boop,Do [sword]2 damage,2,attack(2);,Bubble Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Boop_upgraded,Do [sword]2 damage[;]|return the dice,2,attack(2); givedice(d);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Boop_downgraded,Do [sword]1 damage,2,attack(1);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Delete,Permanently delete the|first card in your hand,2,if(simulation) { bonus(-1000); } else { var firstcard = Deck.getcard(0); if(firstcard != null) firstcard.delete(); },Time Stop,COUNTDOWN,5,GRAY,,,,,-1,YES,NO,curseavoid|excludefromrandomlists|hidereuseable|vanilla,,,,,,,,,,,,
Venus Fly Trap,Do [sword]<d6> damage[;]|on 6[;] restore [heal]2 health,2,attack(d); if(d == 6) { bonus(2000); attackself(-2); } if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2); },Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 6) { attackself(-2); sfx(~_heal~[;]~~[;]0.2); }
Venus Fly Trap_downgraded,Do [sword]<d6> damage[;]|on 3[;] restore [heal]1 health,2,attack(d); if(d == 3) { bonus(2000); attackself(-1); } if(d < 3) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2); },Regenerate,MAX3,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 3) { attackself(-1); sfx(~_heal~[;]~~[;]0.2); }
Venus Fly Trap_upgraded,Do [sword]<d6> damage[;]|on 6[;] restore [heal]3 health,2,attack(d); if(d == 6) { bonus(2000); attackself(-3); } if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2); },Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 6) { attackself(-3); sfx(~_heal~[;]~~[;]0.2); }
Teleport Spell,Dodge next attack,1,inflictself(DODGE);,Quick Thinking,REQUIRE5,,YELLOW,simplify,noeffect,dodge,,0,YES,NO,vanilla,1,,,,,,,,,,,
Earth Spell,Deal [weaken]5 damage|Weaken [weaken]2 equipment,1,attack(5[;] WEAKEN); inflict(WEAKEN[;] 2);,Burrower,REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Earth Spell_downgraded,Deal [weaken]5 damage|Weaken [weaken]1 equipment,1,attack(5[;] WEAKEN); inflict(WEAKEN[;] 1);,Burrower,REQUIRE3,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Earth Spell_upgraded,Deal [weaken]5 damage|Weaken [weaken]3 equipment,1,attack(5[;] WEAKEN); inflict(WEAKEN[;] 3);,Burrower,REQUIRE3,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Thunder Spell,Deal [shock]5 damage|Shock [shock]2 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 2);,Jackhammer,REQUIRE4,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Thunder Spell_downgraded,Deal [shock]5 damage|Shock [shock]1 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 1);,Jackhammer,REQUIRE4,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Thunder Spell_upgraded,Deal [shock]5 damage|Shock [shock]3 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 3);,Jackhammer,REQUIRE4,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ruby Weapon,Do [sword]<double> damage,1,attack(d * 2);,Catapult,LOCKED4,,RED,change_power,change_power,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Ruby Weapon_upgraded,Do [sword]<double> damage,1,attack(d * 2);,Catapult,LOCKED3,,RED,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Ruby Weapon_downgraded,Do [sword]<d6> damage,1,attack(d);,Catapult,LOCKED4,,RED,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Ruby Weapon_weakened,Do [sword]<d6> damage,1,attack(d);,Catapult,LOCKED3,,RED,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Cactus Spear,Do [sword]<d6> damage[;]|+[sword]1 for each [thorns] thorn,2,attack(d + getstatusself(THORNS));,Needle,EVEN,,GREEN,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cactus Spear_upgraded,Do [sword]<d6> damage[;]|+[sword]2 for each [thorns] thorn,2,attack(d + (getstatusself(THORNS) * 2));,Needle,EVEN,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cactus Shield,Add [thorns]1 thorns|[gray](Reuseable),2,inflictself(THORNS[;] 1);,Needle,ODD,,GREEN,simplify,complicate,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Wooden Stake?,Do [sword]30 damage|(to vampires),1,attack(30);,Heat Ray,COUNTDOWN,40,RED,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|alternateversion|vanilla,1,,,,,,,,,,,
Last Stand?,Survive for three turns...|[gray](once per battle),1,inflictself(SURVIVE);,Protection,COUNTDOWN,12,GREEN,threequartercountdown,noeffect,,,0,YES,YES,alternateversion|vanilla,,,,,,,,,,,,
Shooting Star,Do [sword]<d6> damage[;]|inflict [confuse]Confuse,2,attack(d); inflict(CONFUSE);,Stardust,ODD,,YELLOW,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dark Shadow,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,EVEN,,GRAY,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dark Shadow_upgraded,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,NORMAL,,GRAY,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dark Shadow_downgraded,Add 2x random status,2,var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,EVEN,,GRAY,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Rusty Sword,Do [sword]<d6> damage[;] double|if your health is below 50%,2,if(self.hp / self.maxhp < 0.5) { attack(d* 2); } else { attack(d); },Plasma Gun,MAX5,,RED,reducesize,complicate,,,0,NO,NO,vanilla,,,e.changecolour(~RED~);,e.setvar(~rustyswordstate~[;]0); e.changecolour(~RED~); inflictself(~watchrustysword~);,if(self.hp / self.maxhp < 0.5) { if(e.getvar(~rustyswordstate~) == 0) { e.animate(~flashandshake~); e.changecolour(~YELLOW~); sfx(~_metals~); e.setvar(~rustyswordstate~[;]1); } },,,,,,,
Rusty Sword_deckupgrade,Do [sword]<d6> damage[;] double|if your health is below 50%,2,if(self.hp / self.maxhp < 0.5) { attack(d* 2); } else { attack(d); },Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,e.changecolour(~RED~);,e.setvar(~rustyswordstate~[;]0); e.changecolour(~RED~); inflictself(~watchrustysword~);,if(self.hp / self.maxhp < 0.5) { if(e.getvar(~rustyswordstate~) == 0) { e.animate(~flashandshake~); e.changecolour(~YELLOW~); sfx(~_metals~); e.setvar(~rustyswordstate~[;]1); } },,,,,,,
Rusty Sword_weakened,Do [sword]<d6> damage[;] double|if your health is below 50%,1,if(self.hp / self.maxhp < 0.5) { attack(d* 2); } else { attack(d); },Plasma Gun,MAX3,,RED,,,,,0,NO,NO,vanilla,,,e.changecolour(~RED~);,e.setvar(~rustyswordstate~[;]0); e.changecolour(~RED~); inflictself(~watchrustysword~);,if(self.hp / self.maxhp < 0.5) { if(e.getvar(~rustyswordstate~) == 0) { e.animate(~flashandshake~); e.changecolour(~YELLOW~); sfx(~_metals~); e.setvar(~rustyswordstate~[;]1); } },,,,,,,
Polar Star,Do [sword]<double> damage[;] can|only use on even turns,1,attack(d * 2);,Time Stop,MAX5,,PINK,change_power,complicate,,,0,NO,NO,vanilla,1,,,if(turn % 2 == 0) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Odd Turn)~]; },,,,,,,,
Polar Star_upgraded,Do [sword]<double> damage[;] can|only use on odd turns,1,attack(d * 2);,Time Stop,MAX5,,PINK,,,,,0,NO,NO,vanilla,,,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,,,,,,
Polar Star_weakened,Do [sword]<double> damage[;] can|only use on odd turns,1,attack(d * 2);,Time Stop,MAX3,,PINK,,,,,0,NO,NO,vanilla,,,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,,,,,,
Katana,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Steal,MAX4,,YELLOW,increaserange,change_power,,,3,NO,NO,vanilla,,,,,,,,,,,,
Katana_downgraded,Do [sword]<d6> damage,2,attack(d);,Steal,MAX4,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Parrying Dagger,Do [sword]<d6> damage[;] lock|enemy dice that roll <d6>,1,attack(d); inflict(~counter_~ + d);,Protection,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Nail Bat,Do [sword]<d6> damage|(You lose [heart]2 hp each turn),2,attack(d);,Lucky Shot,NORMAL|FREE3,,RED,reducesize,change_power,,,0,NO,NO,excludefromrandomlists|vanilla,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Nail Bat_downgraded,Do [sword]<d6> damage|(You lose [heart]2 hp each turn),2,attack(d);,Lucky Shot,NORMAL|FREE1,,RED,,,,,0,NO,NO,excludefromrandomlists|vanilla,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Nail Bat_weakened,Do [sword]<d6> damage|(You lose [heart]2 hp each turn),1,attack(d);,Lucky Shot,NORMAL|FREE1,,RED,,,,,0,NO,NO,excludefromrandomlists|vanilla,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Battle Cry,Inflict [weaken]5 weaken|[gray](once per battle),2,inflict(WEAKEN[;] 5);,Scream,REQUIRE5,,ORANGE,reducesize,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Battle Cry_downgraded,Inflict [weaken]3 weaken|[gray](once per battle),2,inflict(WEAKEN[;] 3);,Scream,REQUIRE3,,ORANGE,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Battle Cry_weakened,Inflict [weaken]3 weaken|[gray](once per battle),1,inflict(WEAKEN[;] 3);,Scream,REQUIRE3,,ORANGE,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Particle Accelerator,On 1: Do [sword]<var_tempparticleacceleratorkludge:particleaccelerator> damage|on 2-6: Double damage,2,if(simulation) { bonus(-1000); } else { if(d == 1) { attack(e.getvar(~particleaccelerator~)); sfxdamage(target[;]d); sfx(~_plasma~); } else { var newvalue =  e.getvar(~particleaccelerator~) * 2; if(newvalue > 9999) newvalue = 9999; e.setvar(~particleaccelerator~[;] newvalue); sfx(~upgradeequipment~); } },Plasma Gun,NORMAL,,RED,reducesize,change_power,,,0,NO,NO,vanilla,,e.setvar(~particleaccelerator~[;] 1);,e.setvar(~particleaccelerator~[;] 1);,,,,,,if(d == 1){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Particle Accelerator_downgraded,Double damage|(currently at [sword]<var_tempparticleacceleratorkludge:particleaccelerator>),2,if(simulation) { bonus(-1000); } else { var newvalue =  e.getvar(~particleaccelerator~) * 2; if(newvalue > 9999) newvalue = 9999; self.setvar(~particleaccelerator~[;] newvalue); sfx(~upgradeequipment~); },Plasma Gun,NORMAL,,RED,,,,,0,YES,NO,vanilla,,e.setvar(~particleaccelerator~[;] 1);,e.setvar(~particleaccelerator~[;] 1);,,,,,,,,,
Scissors,Do [sword]<d6> damage[;]|split dice in two,2,attack(d); givedice(split(d)[;] ~splitdice~);,Magic Six,REQUIRE6,,GREEN,simplify,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(split(d)[;] ~splitdice~);
Scissors_downgraded,Do [sword]<d6> damage[;]|split value in two,2,attack(d); givedice(d / 2);,Magic Six,REQUIRE6,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d / 2);
Gemstone Staff,Do [ice]6 damage|Freeze [ice]1 dice,2,attack(6[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,reducesize,change_power,ice,,0,NO,NO,vanilla,,,,,,,,,,,,
Gemstone Staff_weakened,Do [ice]3 damage|Freeze [ice]1 dice,1,attack(3[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Gemstone Staff_downgraded,Do [ice]3 damage|Freeze [ice]1 dice,2,attack(3[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Trident,Do [sword]<d6> damage[;]|[ice]Freeze and [shock]Shock,1,attack(d); inflict(ICE[;] 1); inflict(SHOCK[;] 1);,Flash Freeze,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Trident_upgraded,Do [sword]<d6> damage[;]|[ice]Freeze and [shock]Shock,1,attack(d); inflict(ICE[;] 1); inflict(SHOCK[;] 1);,Flash Freeze,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Trident_downgraded,Do [sword]<d6> damage,1,attack(d);,Flash Freeze,REQUIRE5,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sledgehammer,Do [shock]8 damage|[shock]Shocks the enemy,2,attack(8[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,10,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sledgehammer_upgraded,Do [shock]10 damage|[shock]Shocks the enemy,2,attack(10[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sledgehammer_downgraded,Do [shock]4 damage|[shock]Shocks the enemy,2,attack(4[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Capacitor,[shock]2 damage + [shock]1 shock|[gray](Reuseable),1,attack(2[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,5,YELLOW,change_power,change_power,,,-1,NO,NO,vanilla,1,,,,,,,,,,,
Capacitor_upgraded,[shock]3 damage + [shock]1 shock|[gray](Reuseable),1,attack(3[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,5,YELLOW,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Capacitor_downgraded,[shock]1 damage + [shock]1 shock|[gray](Reuseable),1,attack(1[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,5,YELLOW,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Pickaxe,[weaken]<d6> damage + [weaken]1 weaken|[gray](Reuseable),1,attack(d[;] WEAKEN); inflict(WEAKEN[;] 1);,Theremin,MAX3,,ORANGE,change_power,change_power,,,3,NO,NO,vanilla,1,,,,,,,,,,,
Pickaxe_upgraded,[weaken]1 weaken + [weaken]<d6> damage|[gray](Reuseable),1,inflict(WEAKEN[;] 1); attack(d[;] WEAKEN);,Theremin,MAX3,,ORANGE,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Pickaxe_downgraded,[weaken]<d6> damage + [weaken]1 weaken|[gray](Reuseable),1,attack(d[;] WEAKEN); inflict(WEAKEN[;] 1);,Theremin,REQUIRE1,,ORANGE,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Fireworks,Do [sword]1 damage for|each status inflicted,1,var statuseffectcount = getstatus(ALL); if(statuseffectcount == 0) { target.textparticle(~No effect!~); } else{ attack(statuseffectcount); },Overload,EVEN,,RED,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fireworks_upgraded,Do [sword]2 damage for|each status inflicted,1,var statuseffectcount = getstatus(ALL); if(statuseffectcount == 0) { target.textparticle(~No effect!~); } else{ attack(statuseffectcount * 2); },Overload,EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Kale Salad,Increase max health by 1|[gray](once per battle),1,self.maxhp++; attackself(-1);,Regenerate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,YES,vanilla,1,,,,,,,,,,,
Kale Salad_upgraded,Increase max health by 1|[gray](once per battle),1,self.maxhp++; attackself(-1);,Regenerate,EVEN,,GREEN,,,,,0,YES,YES,vanilla,,,,,,,,,,,,
Kale Salad_downgraded,Increase max health by 1|[gray](once per battle),1,self.maxhp++; attackself(-1);,Regenerate,REQUIRE6|REQUIRE6,,GREEN,,,,,0,YES,YES,vanilla,,,,,,,,,,,,
Copper Shield,Add [shield]<double> shield|[gray](once per battle),1,inflictself(SHIELD[;] d * 2);,Protection,NORMAL,,ORANGE,add1,complicate,,,0,YES,YES,vanilla,,,,,,,,,,,,
Crescent Moon Blade,[90%]Even turns: [sword]<eventurn_d6> damage|[90%]Odd turns: [shield]<oddturn_d6> shield,1,if(turn % 2 == 0){ attack(d); sfxdamage(target[;]d); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },Protection,NORMAL,,RED,add2,complicate,,,0,NO,NO,vanilla,,,,e.castdirection = 1 + ((turn % 2) * -2);,,,,,,,,
Kite Shield,Add [shield]8 to shield,1,inflictself(SHIELD[;] 8);,Protection,COUNTDOWN,14,ORANGE,threequartercountdown,change_power,,,0,YES,NO,vanilla,2,,,,,,,,,,,
Kite Shield_weakened,Add [shield]4 to shield,1,inflictself(SHIELD[;] 4);,Protection,COUNTDOWN,10,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Kite Shield_downgraded,Add [shield]4 to shield,1,inflictself(SHIELD[;] 4);,Protection,COUNTDOWN,14,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Thick Skin,Add [shield]<d6> to shield[;]|return the dice,1,inflictself(SHIELD[;] d); givedice(d);,Protection,MAX3,,ORANGE,change_power,decreaserange,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Thick Skin_upgraded,[]+[shield]<d6> shield[;] +[reduce]1 reduce[;]|return the dice,1,inflictself(SHIELD[;] d); inflictself(REDUCE[;] 1); givedice(d);,Protection,MAX3,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Combat Spatula,Flip a dice upside down|[gray](Reuseable),2,givedice(7 - d);,Megaflip,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|vanilla,,,,,,,,,,,,
Hookshot?,Keep the next dice you|use[;] and return this dice,1,if(simulation){ if(getstatusself(REEQUIPNEXT) == 0) { bonus(1000); } else { bonus(-1000); } } else { inflictself(REEQUIPNEXT); givedice(d); },Steal,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Hookshot?_upgraded,Keep the next dice you|use[;] and return this dice,1,if(simulation){ if(getstatusself(REEQUIPNEXT) == 0) { bonus(1000); } else { bonus(-1000); } } else { inflictself(REEQUIPNEXT); givedice(d); },Steal,EVEN,,GREEN,,,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Hookshot?_downgraded,Keep the next dice you use,1,if(simulation){ if(getstatusself(REEQUIPNEXT) == 0) { bonus(1000); } else { bonus(-1000); } } else { inflictself(REEQUIPNEXT); },Steal,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Fishing Net,Do [sword]<d6> damage[;]|lock [lock]1 dice on 3,1,attack(d); if(d == 3) { inflict(LOCK); } if(d != 3) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_lock~[;]~~[;]0.2); },Regenerate,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Fishing Net_downgraded,Do [sword]<d6> damage[;]|lock [lock]1 dice on 2,1,attack(d); if(d == 2) { inflict(LOCK); } if(d != 2) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_lock~[;]~~[;]0.2); },Regenerate,MAX2,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fishing Net_upgraded,Do [sword]<d6> damage[;]|lock [lock]1 dice on 5,1,attack(d); if(d == 5) { inflict(LOCK); } if(d != 5) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_lock~[;]~~[;]0.2); },Regenerate,MAX5,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ignite,Inflict [fire]1 burn[;]|return both dice,1,inflict(FIRE); givedice([d[;] d]);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice([d[;] d]);
Ignite_upgraded,Inflict [fire]1 burn[;]|return the dice,1,inflict(FIRE); givedice(d);,Hellfire,EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Ignite_downgraded,Inflict [fire]1 burn,1,inflict(FIRE);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Elastic Heart,Do [sword]<d6> damage[;]|recover [heal]1 health,1,attack(d); attackself(-1);,Regenerate,MAX3,,GREEN,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,attackself(-1); sfx(~_heal~[;]~~[;]0.2);
Elastic Heart_upgraded,Do [sword]<d6> damage[;]|recover [heal]<d6> health,1,attack(d); attackself(-d);,Regenerate,MAX3,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,attackself(-d); sfx(~_heal~[;]~~[;]0.2);
Half Moon Charm,Roll a six,1,givedice(6);,Focus,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Half Moon Charm_upgraded,Roll two dice that|add up to six,1,givedice(split(6));,Focus,COUNTDOWN,6,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Half Moon Charm_downgraded,Roll a three,1,givedice(3);,Focus,COUNTDOWN,6,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Singularity,Roll a one|[gray](Reuseable),1,givedice(1);,Magic Dice,MIN3,,GREEN,increaserange,complicate,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Lucky Roll,Reroll the dice[;] get a|higher value than before,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); },Megabump,MAX5,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Lucky Roll_upgraded,Reroll with higher value|[gray](Reuseable),1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); },Megabump,MAX5,,GREEN,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Sine Wave,First dice value +1|Second dice value -1,1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1); } if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); }givedice(dicearray);,Meganudge,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Sine Wave_upgraded,Both dice values +1,1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); dicearray.push(actualdice[1].basevalue + 1); if(dicearray[1] == 7) { dicearray[1] = 6; dicearray.push(1); }  if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); } givedice(dicearray);,Meganudge,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sine Wave_downgraded,Both dice values -1,1,var dicearray = []; if(actualdice[0].basevalue - 1 > 0) { dicearray.push(actualdice[0].basevalue - 1); } if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1); } if(dicearray.length > 0) { givedice(dicearray); },Meganudge,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Candle,Dice value -1[;] Lose [heart]1 hp|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { pierceattackself(1); if(d >= 2) givedice(d - 1); },Meganudge,MIN2,,RED,change_power,complicate,,,-1,YES,NO,vanilla,1,,,,,,,,,,,
Candle_upgraded,Dice value +1[;] Lose [heart]1 hp|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { pierceattackself(1); givedice(d + 1); },Meganudge,MAX5,,RED,,,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Slingshot,Do [sword]6 damage[;]|reroll the dice,1,attack(6); givedice();,Random Roll,REQUIRE1,,PURPLE,increaserange,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice();
Slingshot_downgraded,Do [sword]6 damage,1,attack(6);,Random Roll,REQUIRE1,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Boxing Gloves,Do [sword]<d6> damage[;]|on 1[;] gain [reduce]1 instead,1,if(d == 1){ inflictself(REDUCE[;] 1); sfx(~_shield~[;]~~[;]0.1); } else { attack(d); sfxdamage(target[;]d); },Protection,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,if(d == 1){ e.castdirection = -1; } else { e.castdirection = 1; },,,if(d == 1) inflictself(REDUCE[;] 1);
Boxing Gloves_upgraded,Do [sword]<d6> damage[;]|on 1[;] gain [reduce]2 instead,1,if(d == 1){ inflictself(REDUCE[;] 2); sfx(~_shield~[;]~~[;]0.1); } else { attack(d); sfxdamage(target[;]d); },Protection,MAX5,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,if(d == 1){ e.castdirection = -1; } else { e.castdirection = 1; },,,if(d == 1) inflictself(REDUCE[;] 2);
Boxing Gloves_downgraded,Do [sword]<d6> damage,1,attack(d);,Protection,MAX5,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Battering Ram,Do 2x[shield]<myshield> damage[;]|but depletes your shield,1,attack(getstatusself(SHIELD) * 2); removestatusself(SHIELD[;] getstatusself(SHIELD));,Plasma Gun,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,removestatusself(SHIELD[;] getstatusself(SHIELD));
Battering Ram_upgraded,Do 2x[shield]<myshield> damage[;]|but depletes your shield,1,attack(getstatusself(SHIELD) * 2); removestatusself(SHIELD[;] getstatusself(SHIELD));,Plasma Gun,EVEN,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,removestatusself(SHIELD[;] getstatusself(SHIELD));
Battering Ram_downgraded,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,REQUIRE6|REQUIRE6,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flying Skull,Do [sword]<d6> damage[;]|on 6[;] inflict [curse]Curse,2,attack(d); if(d == 6) inflict(CURSE); if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Cackle,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flying Skull_upgraded,Do [sword]<d6> damage[;]|on even[;] inflict [curse]Curse,2,attack(d); if(d % 2 == 0) inflict(CURSE); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Cackle,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flying Skull_downgraded,Do [sword]<d6> damage,2,attack(d);,Cackle,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Disco Ball,Get +1 dice next turn|if the enemy rolls a <d6>,1,inflictself(~dice_trigger_~ + d);,Infinity Mirror,NORMAL,,YELLOW,change_power,complicate,any,,0,YES,NO,vanilla,,,,,,,,,,,,
Disco Ball_upgraded,Get +1 dice next turn|if the enemy rolls a <d6>|[gray](Reuseable),1,inflictself(~dice_trigger_~ + d);,Infinity Mirror,NORMAL,,YELLOW,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Disco Ball?,Get an extra <d6> next turn|if the enemy rolls a <d6>,1,inflictself(~dice_trigger_~ + d);,Infinity Mirror,NORMAL,,YELLOW,change_power,complicate,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Disco Ball?_upgraded,Get an extra <d6> next turn|if the enemy rolls a <d6>|[gray](Reuseable),1,inflictself(~dice_trigger_~ + d);,Infinity Mirror,NORMAL,,YELLOW,,,,,2,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Woof Woof Woof?,Repeat next action[;] but|disable it next turn,2,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,8,RED,halfcountdown,noeffect,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Shovel?,Weaken if you use 6[;] then|do [weaken]<d6> damage,2,if(d == 6) inflict(WEAKEN); if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.2); } attack(d[;] WEAKEN);,Burrower,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Shovel?_upgraded,[weaken]Weaken enemy[;] then|do [weaken]<d6> damage,2,inflict(WEAKEN); attack(d[;] WEAKEN);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Shovel?_downgraded,Do [weaken]<d6> damage,2,attack(d[;] WEAKEN);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Ink Splat?,Inflict [blind]Blind for 1 turn,2,inflict(BLIND[;] 1);,Oh No!,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,alternateversion|cannotsteal|vanilla,,,,,,,,,,,,
Ink Splat?_upgraded,Inflict [blind]Blind for 1 turn|[gray](Reuseable),2,inflict(BLIND[;] 1);,Oh No!,ODD,,PURPLE,,,,,-1,NO,NO,alternateversion|cannotsteal|vanilla,,,,,,,,,,,,
Sonic Wave?,[weaken]Weaken enemy[;] then|do [weaken]<d6> damage,1,inflict(WEAKEN); attack(d[;] WEAKEN);,Plasma Gun,MAX4,,ORANGE,change_power,change_function,,,0,NO,NO,alternateversion|vanilla,1,,,,,,,,,,,
Sonic Wave?_downgraded,[weaken]Weakens enemy,1,inflict(WEAKEN);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Sonic Wave?_upgraded,[weaken]Weaken enemy[;] then|do [weaken]<d6> damage,1,inflict(WEAKEN); attack(d[;] WEAKEN);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Snowball?,Do [ice]<d6> damage|Inflict [ice]1 freeze,1,attack(d[;] ICE); inflict(ICE[;] 1);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Snowball?_upgraded,Do [ice]<d6> damage|Inflict [ice]1 freeze,1,attack(d[;] ICE); inflict(ICE[;] 1);,Refrigerator,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Snowball?_downgraded,Do [sword]<d6> damage,1,attack(d);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Freeze Spell?,Deal [ice]5 damage|Inflict [ice]2 freeze,1,attack(5[;] ICE); inflict(ICE[;] 2);,Refrigerator,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Freeze Spell?_downgraded,Deal [ice]5 damage|Inflict [ice]1 freeze,1,attack(5[;] ICE); inflict(ICE[;] 1);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Freeze Spell?_upgraded,Deal [ice]5 damage|Inflict [ice]1 freeze per dice,1,attack(5[;] ICE); inflict(ICE[;] ALL);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Ice Shard?,Do [ice]<d6> damage[;]|Inflict [ice]1 freeze,1,attack(d[;] ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,alternateversion|vanilla,1,,,,,,,,,,,
Ice Shard?_downgraded,Do [ice]<d6> damage[;]|Inflict [ice]1 freeze,1,attack(d[;] ICE); inflict(ICE);,Refrigerator,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Camouflage?,Inflict [blind]Blind for 2 turns,2,inflict(BLIND[;] 2); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,NO,NO,alternateversion|cannotsteal|vanilla,,,,,,,,,,,,
Camouflage?_upgraded,Inflict [blind]Blind for 4 turns,2,inflict(BLIND[;] 4); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,alternateversion|cannotsteal|vanilla,,,,,,,,,,,,
Camouflage?_downgraded,Inflict [blind]Blind for 1 turn,2,inflict(BLIND); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,alternateversion|cannotsteal|vanilla,,,,,,,,,,,,
Ice Crystal?,Do [ice]<d6> damage[;]|Inflict [ice]1 freeze,2,attack(d[;] ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Echo Blast?,Inflict [weaken]2 weaken[;] then|do [weaken]<d6> damage,2,inflict(WEAKEN[;] 2); attack(d[;] WEAKEN);,Plasma Gun,ODD,,ORANGE,simplify,complicate,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Earthquake?,Inflict [weaken]3 weaken[;] then|do [weaken]6 damage,2,inflict(WEAKEN[;] 3); attack(6[;] WEAKEN);,Scream,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Earthquake?_downgraded,Inflict [weaken]2 weaken[;] then|do [weaken]6 damage,2,inflict(WEAKEN[;] 2); attack(6[;] WEAKEN);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Earthquake?_upgraded,Inflict [weaken]3 weaken[;] then|do [weaken]9 damage,2,inflict(WEAKEN[;] 3); attack(9[;] WEAKEN);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Magic Key,Split a dice in two,1,givedice(split(d)[;] ~splitdice~);,Steal,EVEN,,GREEN,change_power,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Magic Key_downgraded,Split value in two,1,givedice(d / 2);,Steal,EVEN,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Magic Key_upgraded,Split a dice in two,1,givedice(split(d)[;] ~splitdice~);,Steal,MIN2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Chocolate Cookie?,Repeat next action[;] but|disable it next turn,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Chocolate Cookie?_downgraded,Keep the next dice you use,1,inflictself(REEQUIPNEXT);,Fury,COUNTDOWN,12,ORANGE,,,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Dodge?,50% chance to dodge|the next attack,1,inflictself(DODGE);,Quick Thinking,COUNTDOWN,16,ORANGE,threequartercountdown,noeffect,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Flight?,50% chance to dodge|the next attack,2,inflictself(DODGE);,Quick Thinking,EVEN,,YELLOW,simplify,noeffect,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Stack Overflow,Do [sword]9 damage[;]|immune to errors,1,attack(9);,Plasma Gun,COUNTDOWN,12,GRAY,change_power,change_power,,,0,NO,NO,errorimmune|robotonly|vanilla,,,,,,,,,,,,
Stack Overflow_upgraded,Do [sword]12 damage[;]|immune to errors,1,attack(12);,Plasma Gun,COUNTDOWN,12,GRAY,,,,,0,NO,NO,errorimmune|robotonly|vanilla,,,,,,,,,,,,
Stack Overflow_downgraded,Do [sword]6 damage[;]|immune to errors,1,attack(6);,Plasma Gun,COUNTDOWN,12,GRAY,,,,,0,NO,NO,errorimmune|robotonly|vanilla,,,,,,,,,,,,
Precious Egg@6,Contains a powerful item,1,giveequipment(~Precious Egg@5~[;] true[;] false[;] e);,,REQUIRE6,,YELLOW,change_power,doublerequirements,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@6_upgraded,Contains a bigger|powerful item,2,giveequipment(~Precious Egg@5+~[;] true[;] false[;] e);,,REQUIRE6,,YELLOW,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@5,Contains a powerful item|Keep going!,1,giveequipment(~Precious Egg@4~[;] true[;] false[;] e);,,REQUIRE5,,YELLOW,change_power,doublerequirements,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@5_upgraded,Contains a bigger|powerful item,2,giveequipment(~Precious Egg@4+~[;] true[;] false[;] e);,,REQUIRE5,,YELLOW,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@4,Contains a powerful item|Keep going!,1,giveequipment(~Precious Egg@3~[;] true[;] false[;] e);,,REQUIRE4,,YELLOW,change_power,doublerequirements,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@4_upgraded,Contains a bigger|powerful item,2,giveequipment(~Precious Egg@3+~[;] true[;] false[;] e);,,REQUIRE4,,YELLOW,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@3,Contains a powerful item|Keep going!,1,giveequipment(~Precious Egg@2~[;] true[;] false[;] e);,,REQUIRE3,,YELLOW,change_power,doublerequirements,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@3_upgraded,Contains a bigger|powerful item,2,giveequipment(~Precious Egg@2+~[;] true[;] false[;] e);,,REQUIRE3,,YELLOW,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@2,Contains a powerful item|Keep going!,1,giveequipment(~Precious Egg@1~[;] true[;] false[;] e);,,REQUIRE2,,YELLOW,change_power,doublerequirements,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@2_upgraded,Contains a bigger|powerful item,2,giveequipment(~Precious Egg@1+~[;] true[;] false[;] e);,,REQUIRE2,,YELLOW,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@1,Contains a powerful item|Keep going!,1,giveequipment(rand([~Magic Spear~[;]~Teleport Spell~[;]~Fury Spell~[;]~The Cold~[;]~Polar Star~[;]~Spare 6~[;]~Table Slam~[;]~Fishing Net~[;]~Ruby Weapon~[;]~Hookshot~])[;] true[;] false[;] e); completechallenge(~challenge_hatchegg~);,,REQUIRE1,,YELLOW,change_power,doublerequirements,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Precious Egg@1_upgraded,Contains a bigger|powerful item,2,giveequipment(rand([~Dark Shadow+~[;]~Flying Skull+~[;]~Power Crystal+~[;]~Overwhelm+~[;]~Bear Maul+~[;]~Fire Breath+~[;]~Two Handed Sword+~[;]~Tower Shield+~[;]~Earthquake+~[;]~Very Good Sword+~[;]~Flamethrower+~])[;] true[;] false[;] e); completechallenge(~challenge_hatchegg~);,,REQUIRE1,,YELLOW,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Very Good Sword,Do [sword]<double> damage,2,attack(d * 2);,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Very Good Sword_upgraded,Do [sword]<triple> damage,2,attack(d * 3);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Very Good Sword_downgraded,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sword Hilt,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,REQUIRE1|FREE6,,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Sword Hilt_upgraded,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,REQUIRE4|FREE6,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sword Hilt_downgraded,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,REQUIRE1|FREE3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Overclock,Do [sword]2 damage[;] CPU -2|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { attack(2); adjustrobotcounter(-2); },,EVEN,,PINK,change_power,change_power,,,3,NO,NO,robotonly|vanilla,,,,,,,,,,,,adjustrobotcounter(-2);
Overclock_upgraded,Do [sword]3 damage[;] CPU -3|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { attack(3); adjustrobotcounter(-3); },,EVEN,,PINK,,,,,3,NO,NO,robotonly|vanilla,,,,,,,,,,,,adjustrobotcounter(-3);
Overclock_downgraded,Do [sword]1 damage[;] CPU -1|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { attack(1); adjustrobotcounter(-1); },,EVEN,,PINK,,,,,3,NO,NO,robotonly|vanilla,,,,,,,,,,,,adjustrobotcounter(-1);
Memory Leak,Do [sword]<double> damage|(Slots shrink on each roll),1,attack(d * 2);,,NORMAL,,RED,change_power,complicate,,,0,NO,NO,robotonly|vanilla,,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~[;]~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~[;]~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~[;]~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~[;]~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~[;]~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~[;]~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~[;]~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~[;]~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~[;]~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~[;]~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,,,,
Memory Leak_upgraded,Do [sword]<double> damage|(Slots shrink on each roll),1,attack(d * 2);,,NORMAL|FREE1,,RED,,,,,0,NO,NO,robotonly|vanilla,,e.changeslots([~NORMAL~[;]~FREE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~NORMAL~[;]~FREE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~NORMAL~[;]~FREE1~]); e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~[;]~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~[;]~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~[;]~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~[;]~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~[;]~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~[;]~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~[;]~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~[;]~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~[;]~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~[;]~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,,,,
Liquid Cooling,Freeze all of your|own dice,1,inflictself(ICE[;] ALL);,,COUNTDOWN,10,BRIGHTCYAN,halfcountdown,change_power,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Liquid Cooling_weakened,Inflict [ice]1 freeze|to yourself,1,inflictself(ICE[;] 1);,,COUNTDOWN,5,BRIGHTCYAN,,,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Liquid Cooling_downgraded,Inflict [ice]1 freeze|to yourself,1,inflictself(ICE[;] 1);,,COUNTDOWN,10,BRIGHTCYAN,,,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Cooling Fan,Reduce CPU by half,1,if(simulation) { bonus(-1000); } else { adjustrobotcounter(-(self.roll_total/2)); },,COUNTDOWN,10,BRIGHTCYAN,halfcountdown,change_power,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Cooling Fan_weakened,Reduce CPU by a quarter,1,if(simulation) { bonus(-1000); } else { adjustrobotcounter(-(self.roll_total/4)); },,COUNTDOWN,5,BRIGHTCYAN,,,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Cooling Fan_downgraded,Reduce CPU by a quarter,1,if(simulation) { bonus(-1000); } else { adjustrobotcounter(-(self.roll_total/4)); },,COUNTDOWN,10,BRIGHTCYAN,,,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Virus,On each equipment use[;]|increase CPU by 1,1,if(simulation) { bonus(-1000); } else { adjustrobotcounter(-1); inflictself(~cpuvirus~[;] 1); },,EVEN,,GREEN,simplify,complicate,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Concatenate,CPU counter +<d6>,1,if(simulation) { bonus(-1000); } else { adjustrobotcounter(d); },,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Concatenate_upgraded,CPU counter +<d6>|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { adjustrobotcounter(d); },,NORMAL,,GREEN,,,,,-1,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Starspear,Do [sword]6 damage[;]|add 2x random status,1,attack(6); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,,REQUIRE6,,PINK,change_power,doublerequirements,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Starspear_upgraded,Do [sword]<d6> damage[;]|add 2x random status,1,attack(d); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,,MIN5,,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lucky Star,Do [sword]1 damage[;] roll a 5|[gray](Reuseable),1,attack(1); givedice(5);,Quick Thinking,COUNTDOWN,6,PINK,change_power,change_power,,,-1,NO,NO,vanilla,1,,,,,,,,,,,givedice(5);
Lucky Star_upgraded,Do [sword]3 damage[;] roll a 5|[gray](Reuseable),1,attack(3); givedice(5);,Quick Thinking,COUNTDOWN,6,PINK,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,givedice(5);
Lucky Star_downgraded,Do [sword]1 damage[;] roll a 1|[gray](Reuseable),1,attack(1); givedice(1);,Quick Thinking,COUNTDOWN,6,PINK,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,givedice(1);
Mechanical Leg,Do [sword]2 damage for each|unused dice ([sword]<doubleunassigneddice> total),1,if(simulation) { bonus(-1000); } else { var temp = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) temp++; } } } } attack((temp + 1) * 2); },,EVEN,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mechanical Leg_upgraded,[sword]2 per unused dice ([sword]<doubleunassigneddice>)|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { var temp = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) temp++; } } } } attack((temp + 1) * 2); },,EVEN,,RED,,,,,2,NO,NO,vanilla,,,,,,,,,,,,
Mechanical Leg_downgraded,Do [sword]1 damage for each|unused dice ([sword]<unassigneddice> total),1,if(simulation) { bonus(-1000); } else { var temp = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) temp++; } } } } attack((temp + 1)); },,EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Free Spin,Change jackpot abilities|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { resetjackpot(self); },,ODD,,YELLOW,change_power,complicate,,none,2,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Free Spin_upgraded,Change jackpot abilities|[gray](Reuseable),1,if(simulation) { bonus(-1000); } else { resetjackpot(self); },,ODD,,YELLOW,,,,none,3,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Dragon's Tooth,Do [sword]<quadruple> damage,2,attack(d * 4); completechallenge(~challenge_dragontooth~);,,LOCKED7,,PURPLE,change_power,change_power,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Dragon's Tooth_upgraded,Do [sword]<quadruple> damage,2,attack(d * 4); completechallenge(~challenge_dragontooth~);,,LOCKED6,,PURPLE,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Dragon's Tooth_downgraded,Do [sword]<triple> damage,2,attack(d * 3); completechallenge(~challenge_dragontooth~);,,LOCKED7,,PURPLE,,,,,0,NO,NO,robotonly|vanilla,,,,,,,,,,,,
Spatulasword,Do [sword]<d6> damage[;] and|flip the dice upside down,2,attack(d); givedice(7 - d);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(7 - d);
Spatulasword_upgraded,Flip the dice upside down[;]|and do [sword]<flipd6> damage,2,attack(7 - d); givedice(7 - d);,,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(7 - d);
Spatulasword_downgraded,Flip a dice upside down,2,givedice(7 - d);,,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(7 - d);
Ungeradedice,Double dice value[;]|then subtract 1,1,givedice(((d * 2) - 1)[;] ~combinedice~);,Clone Device,MAX5,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Ungeradedice_upgraded,Double dice value[;]|then add 1,1,givedice(((d * 2) + 1)[;] ~combinedice~);,Clone Device,MAX5,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Vise Grip,Return two of the|difference between dice,1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Vise Grip_upgraded,Return three of the|difference between dice,1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)[;](bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Vise Grip_downgraded,Return the difference|between the dice,1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)][;] ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Flaming Sword,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d[;]FIRE); inflict(FIRE[;] 2);,,MAX5|MAX5,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists|vanilla,1,,,,e.animate(~flashandshake~); inflictself(FIRE[;] 1); sfx(~_fire~);,,,,,,,
Flaming Sword_upgraded,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d[;]FIRE); inflict(FIRE[;] 2);,,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists|vanilla,,,,,e.animate(~flashandshake~); inflictself(FIRE[;] 1); sfx(~_fire~);,,,,,,,
Saw Wave,Returns a 6 and a 1,1,givedice(7);,Stardust,NORMAL|NORMAL,7,GREEN,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Saw Wave_upgraded,Returns two sixes,1,givedice(12);,Stardust,NORMAL|NORMAL,7,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Saw Wave_downgraded,Returns two ones,1,givedice([1[;]1]);,Stardust,NORMAL|NORMAL,7,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Leather Armor?,Block [reduce]1 of the|next status effect,1,inflictself(REDUCE[;] 1);,Protection,ODD,,ORANGE,simplify,complicate,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Iron Armor?,Block [reduce]2 of the|next status effect,1,inflictself(REDUCE[;] 2);,Protection,REQUIRE5,,ORANGE,simplify,change_power,,,0,YES,NO,alternateversion|vanilla,1,,,,,,,,,,,
Iron Armor?_downgraded,Block [reduce]1 of the|next status effect,1,inflictself(REDUCE[;] 1);,Protection,REQUIRE5,,ORANGE,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Premium Heart,Do [sword]<d6> damage|10% chance of Fury,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds += 10 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,donothing();,var odds = 10; if(getstatusself(~luck~) > 0){ odds += 10 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); }
Premium Heart_upgraded,Do [sword]<d6> damage|25% chance of Fury,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); },,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,donothing();,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); }
Premium Heart_downgraded,Do [sword]<d6> damage,1,attack(d);,,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,donothing();,
Spud Cannon,[sword]2 dmg[;] [sword]4 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(4); } else { attack(2); },Pea Gun,COUNTDOWN,4,YELLOW,change_power,change_power,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Spud Cannon_downgraded,[sword]1 dmg[;] [sword]2 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(2); } else { attack(1); },Pea Gun,COUNTDOWN,4,YELLOW,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Spud Cannon_upgraded,[sword]3 dmg[;] [sword]6 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(6); } else { attack(3); },Pea Gun,COUNTDOWN,4,YELLOW,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Missing Score,Do [sword]<d6> damage|25% chance to return dice,1,if(simulation) { attack(d); } else { var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); givedice(d); } },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missing Score_upgraded,Do [sword]<d6> damage|75% chance to return dice,1,if(simulation) { attack(d); } else { var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); givedice(d); } },,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missing Score_downgraded,Do [sword]<d6> damage,1,attack(d);,,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Four Leaf Clover,Double the success odds|of chance based items,1,inflictself(~luck~);,,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Four Leaf Clover_upgraded,Chance based items|work 100% of the time,1,inflictself(~luck+~);,,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Four Leaf Clover_downgraded,50% chance of either|curse or good luck,1,var odds = 50; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; }  if(chance(odds)){ inflictself(~luck~); } else { inflictself(CURSE); },,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Safe Bet,The next roll won't|exceed the CPU target,1,inflictself(~cpushield~);,,MIN4,,YELLOW,simplify,complicate,,,0,YES,NO,robotonly|vanilla,,,,,,,,,,,,
Hijinx,Reduce all Jinx|countdowns by [jinx]1,2,boostjinxcountdowns(self[;] 1); boostjinxcountdowns(target[;] 1);,,EVEN,,PINK,change_power,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hijinx_upgraded,Reduce all Jinx|countdowns by [jinx]2,2,boostjinxcountdowns(self[;] 2); boostjinxcountdowns(target[;] 2);,,EVEN,,PINK,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Slapsies,In [jinx]<d6> turns[;]|do [sword]<triple> damage,2,jinx(~Slapsies~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;](d * 3)); sfx(~_thinghappens~);,,MAX4,,PINK,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Slapsies_upgraded,In [jinx]<d6> turns[;]|do [sword]<quadruple> damage,2,jinx(~Slapsies+~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;](d * 4)); sfx(~_thinghappens~);,,MAX4,,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Slapsies_downgraded,In [jinx]<d6> turns[;]|do [sword]<d6> damage,2,jinx(~Slapsies-~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,,MAX4,,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mercy,In [jinx]6 turns[;]|do [fire]20 damage,2,jinx(~Mercy~[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mercy_upgraded,In [jinx]5 turns[;]|do [fire]20 damage,2,jinx(~Mercy+~[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]5[;]20); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mercy_downgraded,In [jinx]7 turns[;]|do [fire]20 damage,2,jinx(~Mercy-~[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]7[;]20); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Concentration,In [jinx]<d6> turns[;]|recover <double> health,2,jinx(~Concentration~[;]~heal [heart]%VAR% health~[;]~Heal [heart]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;](d * 2)); sfx(~_thinghappens~);,,MAX4,,PINK,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Concentration_upgraded,In [jinx]<d6> turns[;]|recover <triple> health,2,jinx(~Concentration+~[;]~heal [heart]%VAR% health~[;]~Heal [heart]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;](d * 3)); sfx(~_thinghappens~);,,MAX4,,PINK,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Concentration_downgraded,In [jinx]<d6> turns[;]|recover <double> health,2,jinx(~Concentration-~[;]~heal [heart]%VAR% health~[;]~Heal [heart]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;](d * 2)); sfx(~_thinghappens~);,,REQUIRE4,,PINK,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Lojinx,Do [sword]2 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 2); givedice(d); sfxdamage(target[;]jinxcount * 2); },,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Lojinx_upgraded,Do [sword]3 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 3); givedice(d); sfxdamage(target[;]jinxcount * 2); },,NORMAL,,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Lojinx_downgraded,Do [sword]1 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount); givedice(d); sfxdamage(target[;]jinxcount * 2); },,NORMAL,,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Sour Candy,Heal [heal]2. If above max hp[;]|deal excess as damage,1,if(self.maxhp - self.hp == 0) { attack(2); sfxdamage(target[;]2); } else if(self.maxhp - self.hp == 1) { attack(1); attackself(-1); sfxdamage(target[;]1); } else { attackself(-2); sfx(~_heal~); },,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sour Candy_upgraded,Heal [heal]3. If above max hp[;]|deal excess as damage,1,if(self.maxhp - self.hp == 0) { attack(3); sfxdamage(target[;]3); } else if(self.maxhp - self.hp == 1) { attack(2); attackself(-1); sfxdamage(target[;]2); } else if(self.maxhp - self.hp == 2) { attack(1); attackself(-2); sfxdamage(target[;]1); } else { attackself(-3); sfx(~_heal~); },,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sour Candy_downgraded,Heal [heal]1 health,1,attackself(-1); sfx(~_heal~);,,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Subdivide,Split a dice evenly,1,givedice([(d / 2)[;] (d / 2)]);,Clone Device,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Subdivide_upgraded,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)[;] (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)[;] (d / 2)]); } },Clone Device,MIN2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Subdivide_downgraded,Split a six evenly,1,givedice([(d / 2)[;] (d / 2)]);,Clone Device,REQUIRE6,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Lollipop,Dice value -1. On 1[;]|instead return two 1s,1,if(d >= 2) { givedice(d - 1); } else { givedice([1[;]1]); },Meganudge,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Lollipop_upgraded,Dice value -1. On 1[;]|instead return two dice,1,if(d >= 2) { givedice(d - 1); } else { givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); },Meganudge,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Forge,Permanently upgrade the|first card in your hand|[gray](once per battle),2,/* to do: implement this lol */,,COUNTDOWN,16,YELLOW,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,
Shadow Dice,Duplicate a dice|Lose [heart]<d6> health,1,givedice([d[;] d]); pierceattackself(d);,Clone Device,NORMAL,,PURPLE,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Shadow Dice_upgraded,Duplicate a dice|Lose [heart]<d6> health|[gray](Reuseable),1,givedice([d[;] d]); pierceattackself(d);,Clone Device,NORMAL,,PURPLE,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Blood Let,Lose [heart]2 hp[;] then heal [heart]1,1,pierceattackself(2); attackself(-1);,,ODD,,RED,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Blood Let_upgraded,Lose [heart]4 hp[;] then heal [heart]2,1,pierceattackself(4); attackself(-2);,,ODD,,RED,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Blood Let_downgraded,Lose [heart]2 hp|[gray](Reuseable),1,pierceattackself(2);,,ODD,,RED,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Mirror Shard,Do [sword]9 damage[;]|+1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(9); self.extradice++; },,REQUIRE6|REQUIRE6,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,self.extradice++; sfx(~magic_gaindice~[;]~~[;]0.2);
Mirror Shard_upgraded,Do [sword]12 damage[;]|+1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(12); self.extradice++; },,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,self.extradice++; sfx(~magic_gaindice~[;]~~[;]0.2);
Mirror Shard_downgraded,Do [sword]9 damage,2,attack(9);,,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Kapow,Do [sword]<var_tempkapowkludge:kapowcount> damage[;] +1 for|each kapow used this turn,2,if(simulation) { bonus(-1000); } else { attack(self.getvar(~kapowcount~) + 1); self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 1); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,self.setvar(~kapowcount~[;] 0);,self.setvar(~kapowcount~[;] 0);,self.setvar(~kapowcount~[;] 0);,,,,,,,,self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 1);
Kapow_upgraded,Do [sword]<var_tempkapowkludge:kapowcount> damage[;] +2 for|each kapow used this turn,2,if(simulation) { bonus(-1000); } else { attack(self.getvar(~kapowcount~) + 1); self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 2); },,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,self.setvar(~kapowcount~[;] 0);,self.setvar(~kapowcount~[;] 0);,self.setvar(~kapowcount~[;] 0);,,,,,,,,self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 1);
Kapow_downgraded,Increase Kapow counter,2,if(simulation) { bonus(-1000); } else { self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 1); },,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,self.setvar(~kapowcount~[;] 0);,self.setvar(~kapowcount~[;] 0);,self.setvar(~kapowcount~[;] 0);,,,,,,,,
Call for Backup Warrior?,Warrior Charge|Add 3 to Kapow damage,2,self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 3); sfx(~_magic~);,,,,BRIGHTCYAN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?,Black Market|Rent a powerful item|Costs [gold]1[;] you have [gold]<gold>,2,/* $if(self.gold > 0){ */ self.gold--; replacemewith(rand([~Dark Shadow~[;]~Bear Maul~[;]~Two Handed Sword~[;]~Tower Shield~[;]~Earthquake~[;]~Very Good Sword~[;]~Counterfeit~[;]~Spatulasword~[;]~Quarterstaff~])[;] -1); } else { self.textparticle(~Can't afford!~); }$,,,,GREEN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?,Power Surge|Add +1 to all dice|less than six,2,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue < 6){ mydice.animatereroll((mydice.basevalue + 1)[;] self.screenposition()[;] c * 0.05); } c++; } } givedice(extradice);,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Witch?,Multicard!|Add an extra card to|your hand (this turn),2,Deck.sethandsize(4[;]true); Deck.lookahead = 0; sfx(~_thinghappens~);,,,,PURPLE,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,Deck.sethandsize(3); Deck.lookahead = 3;,,,e.preventdefault = true; e.maintainfury = true;,
Call for Backup Inventor?,Random Access|Copy a random item|from your deck,2,/* $replacemewith(rand(Deck.getcardlist(~all~))[;] -1); */ $,,,,ORANGE,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior?_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1[;] 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Witch?_downgraded,Magic Dice|Roll an extra dice,2,givedice();,Regenerate,,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Inventor?_downgraded,Barricade|Shield +[shield]3,2,inflictself(SHIELD[;] 3);,Time Stop,,,ORANGE,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Evil Laugh,Do [sword]<d6> damage[;]|double if enemy is cursed,2,if(getstatus(CURSE) > 0) { attack((d * 2)); } else { attack((d)); },Cackle,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Evil Laugh_upgraded,Do [sword]<d6> damage[;]|double if enemy is cursed,2,if(getstatus(CURSE) > 0) { attack((d * 2)); } else { attack((d)); },Cackle,MAX4,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Evil Laugh_downgraded,Do [sword]<d6> damage[;]|double if enemy is cursed,2,if(getstatus(CURSE) > 0) { attack((d * 2)); } else { attack((d)); },Cackle,MAX2,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Manic Laugh,Do [sword]<d6> damage[;]|quadruple if you are cursed,1,if(getstatusself(CURSE) > 0) { attack((d * 4)); } else { attack((d)); },Cackle,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Manic Laugh_upgraded,Do [sword]<d6> damage[;]|quadruple if you are cursed,1,if(getstatusself(CURSE) > 0) { attack((d * 4)); } else { attack((d)); },Cackle,MAX5,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Manic Laugh_downgraded,Do [sword]<d6> damage[;]|quadruple if you are cursed,1,if(getstatusself(CURSE) > 0) { attack((d * 4)); } else { attack((d)); },Cackle,MAX3,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Blammo,Do [sword]3 damage[;] snap 3|at once to gain [fury]Fury,2,attack(3);,Fury,MIN3,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,if(snap >= 3) inflictself(FURY);,,
Blammo_upgraded,Do [sword]3 damage[;] snap 3|at once to gain [fury]Fury,2,attack(3);,Fury,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,if(snap >= 3) inflictself(FURY);,,
Blammo_downgraded,Do [sword]3 damage,2,attack(3);,Fury,MIN3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Gumball Machine,Recover [heal]1 health[;]|get a new dice,1,attackself(-1); givedice();,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Gumball Machine_upgraded,Recover [heal]<d6> health[;]|get a new dice,1,attackself(-d); givedice();,Regenerate,MAX3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Gumball Machine_downgraded,Recover [heal]1 health,1,attackself(-1);,Regenerate,MAX3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Laugh Track,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,EVEN,,ORANGE,simplify,complicate,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Big Moment,Do [sword]7 damage|[gray](Reuseable),2,attack(7);,Cackle,COUNTDOWN,7,ORANGE,change_power,change_power,,,2,NO,NO,finale|vanilla,,,,,,,,,,,,
Big Moment_upgraded,Do [sword]7 damage|[gray](Reuseable),2,attack(7);,Cackle,COUNTDOWN,7,ORANGE,,,,,4,NO,NO,finale|vanilla,,,,,,,,,,,,
Big Moment_downgraded,Do [sword]7 damage,2,attack(7);,Cackle,COUNTDOWN,7,ORANGE,,,,,0,NO,NO,finale|vanilla,,,,,,,,,,,,
Action!,Keep a <d6> for next turn,2,inflictself(~stash~+d[;]1); inflictself(~illuminate~);,Cackle,NORMAL,,ORANGE,change_power,complicate,,,0,YES,NO,finale|vanilla,,,,,,,,,,,,
Action!_upgraded,Keep a <d6> for next turn|[gray](Reuseable),2,inflictself(~stash~+d[;]1); inflictself(~illuminate~);,Cackle,NORMAL,,ORANGE,,,,,2,YES,NO,finale|vanilla,,,,,,,,,,,,
Ruff Ruff Ruff,Do [sword]5 damage|(maintains [fury]Fury[]),2,attack(5);,Fury,COUNTDOWN,3,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,e.maintainfury = true;,
Ruff Ruff Ruff_upgraded,Do [sword]7 damage|(maintains [fury]Fury[]),2,attack(7);,Fury,COUNTDOWN,3,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,e.maintainfury = true;,
Ruff Ruff Ruff_downgraded,Do [sword]3 damage|(maintains [fury]Fury[]),2,attack(3);,Fury,COUNTDOWN,3,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,e.maintainfury = true;,
Bow Wow Wow,Make unavailable cards|available[;] return dice,2,if(simulation) { bonus(-1000); } else { var cardlist = Deck.getcards(~all~); if(cardlist.length > 0){ for(c in cardlist){ if(!c.equipment.availablethisturn) { c.equipment.availablethisturn = true; c.equipment.animate(~flash~); } } givedice(d); } },Fury,EVEN,,PINK,simplify,complicate,,,0,YES,NO,excludefromrandomlists|vanilla,,,,,,,,,,,,
Arf Arf Arf,Gain [fury]Fury at the start|of your next turn,2,jinx(~Arf_Arf_Arf~[;]~gain [fury]Fury~[;]~Gain [fury]Fury~[;]~ inflict(FURY); sfx(\~_fury\~);~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);,Fury,EVEN,,RED,simplify,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,donothing();,
Yip Yip Yip,Reroll a dice|(maintains [fury]Fury[]),2,givedice();,Fury,MAX4,,RED,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,e.maintainfury = true;,
Yip Yip Yip_upgraded,Reroll a dice|(maintains [fury]Fury[]),2,givedice();,Fury,NORMAL,,RED,,,,,0,YES,NO,vanilla,,,,,,,,,,,e.maintainfury = true;,
Yip Yip Yip_downgraded,Reroll a dice,2,givedice();,Fury,MAX4,,RED,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Table Slam,Reroll all unused dice[;]|and return this dice,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; } } } } } givedice(d); },,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,curseavoid|vanilla,,,,,,,,,,,,
Melody,Inflict [weaken]1 weaken,2,inflict(WEAKEN[;] 1);,,NORMAL,,ORANGE,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Melody_upgraded,Inflict [weaken]2 weaken,2,inflict(WEAKEN[;] 2);,,NORMAL,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Chorus,Roll a dice for every|[weaken]1 weaken on enemy,1,var numweaken = getstatus(WEAKEN); if(numweaken > 0) { var returndice = []; for(i in 0 ... numweaken) { returndice.push(rand([1[;]2[;]3[;]4[;]5[;]6])); } givedice(returndice); },,MAX3,,ORANGE,simplify,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Fortify,Increase [shield] shield|by 50 percent,1,inflictself(SHIELD[;] getstatusself(SHIELD) * 0.5);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Fortify_upgraded,Double [shield] shield,1,inflictself(SHIELD[;] getstatusself(SHIELD));,,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Fortify_downgraded,Increase [shield] shield|by 25 percent,1,inflictself(SHIELD[;] getstatusself(SHIELD) * 0.25);,,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Upkeep,Gain [shield]<myshield> at the start|of your next turn,2,jinx(~Upkeep~[;]~gain [shield]%VAR% shield~[;]~Gain [shield]%VAR% shield~[;]~ inflict(SHIELD[;]%VAR% ); sfx(\~_shield\~);~[;]self[;]self[;]1[;]getstatusself(SHIELD)); sfx(~_thinghappens~);,Fury,EVEN,,PINK,simplify,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Front Line,Lose [heart]3 health[;] gain|[shield]3 shield[;] return the dice,2,pierceattackself(3); inflictself(SHIELD[;] 3); givedice(d);,,NORMAL,,ORANGE,change_power,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Front Line_upgraded,Lose [heart]6 health[;] gain|[shield]6 shield[;] return the dice,2,pierceattackself(6); inflictself(SHIELD[;] 6); givedice(d);,,NORMAL,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Telephone,Do [sword]<d6> damage|In two turns[;] do [sword]<d6>,2,jinx(~Telephone~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,Fury,MAX5,,PINK,simplify,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bee Sting,Do [shock]4 damage[;]|Inflict [shock]1 shock,1,attack(4[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bee Sting_upgraded,Do [shock]6 damage[;]|Inflict [shock]1 shock,1,attack(6[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bee Sting_downgraded,Do [sword]4 damage,1,attack(4);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Princess Guard,Do [sword]<d6> damage|25% chance to add [shield]<d6>,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2); }
Princess Guard_upgraded,Do [sword]<d6> damage|75% chance to add [shield]<d6>,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2); }
Princess Guard_downgraded,Do [sword]<d6> damage,1,attack(d);,,MAX4,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Venus Gospel,Do [weaken]<d6> damage|25% chance +[weaken]2 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN[;] 2); } attack(d[;] WEAKEN);,,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Venus Gospel_upgraded,Do [weaken]<d6> damage|25% chance +[weaken]3 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN[;] 3); } attack(d[;] WEAKEN);,,MAX5,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Venus Gospel_downgraded,Do [weaken]<d6> damage,1,attack(d[;] WEAKEN);,,MAX5,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Snapdragon,Do [sword]3 damage[;]|on 6[;] gain [mana]2 mana,1,attack(3); if(d == 6) { inflictself(MANA[;]2); sfxdamage(target[;]3); sfx(~_mana~[;]~~[;]0.2); } else { sfxdamage(target[;]3); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,if(d == 6) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Snapdragon_upgraded,Do [sword]3 damage[;]|on even[;] gain [mana]2 mana,1,attack(3); if(d % 2 == 0) { inflictself(MANA[;]2); sfxdamage(target[;]3); sfx(~_mana~[;]~~[;]0.2); } else { sfxdamage(target[;]3); },,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d % 2 == 0) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Snapdragon_downgraded,Do [sword]3 damage[;]|on 3[;] gain [mana]2 mana,1,attack(3); if(d == 3) { inflictself(MANA[;]2); sfxdamage(target[;]3); sfx(~_mana~[;]~~[;]0.2); } else { sfxdamage(target[;]3); },,MAX3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 3) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Fruit Bowl,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice),1,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); }
Fruit Bowl_upgraded,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice)|[gray](Reuseable),1,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,vanilla,,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); }
Fruit Bowl_downgraded,Do [sword]1 damage,1,attack(1);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Enchanted Shield,Add [shield]<d6> shield|(Cost [mana]2[]: +[shield]<d6> shield),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); inflictself(SHIELD[;] d * 2); } else { inflictself(SHIELD[;] d); },,MAX3,,ORANGE,increaserange,decreaserange,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Mirror Cauldron,Get a new dice[;] on 6|get +1 dice this fight,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d == 6) { self.extradice++; sfx(~magic_gaindice~); } },Focus,MIN4,,PURPLE,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Mirror Cauldron_upgraded,Get a new dice[;] on even|get +1 dice this fight,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d % 2 == 0) { self.extradice++; sfx(~magic_gaindice~); } },Focus,MIN4,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Mirror Cauldron_downgraded,Get a new dice,1,givedice();,Focus,MIN4,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sun Beam,Do [sword]5 damage|(Cost [mana]2[]: double damage),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attack(10); } else { attack(5); },,EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); }
Winds of Winter,Do [sword]1 damage for each|[mana]1 mana you have,1,if(getstatusself(MANA) > 0) { attack(getstatusself(MANA)); },,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Spring Equinox,Place two copies of the|next spell you cast,1,inflictself(~doublecast~);,,ODD,,YELLOW,simplify,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Harvest Scythe,Consume spell in slot <d6>|to do [sword]<quadruple> damage,1,if(simulation) { bonus(-1000); } else { if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(4 * d); Spellbook.erase(d); } },,NORMAL,,ORANGE,change_power,complicate,,,0,NO,NO,witchonly|curseavoid|vanilla,1,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Harvest Scythe_upgraded,Consume spell in slot <d6>|to do [sword]<quintuple> damage,1,if(simulation) { bonus(-1000); } else { if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(5 * d); Spellbook.erase(d); } },,NORMAL,,ORANGE,,,,,0,NO,NO,witchonly|curseavoid|vanilla,,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Doppeltwice,Double dice value|[gray](Reuseable),1,givedice(d * 2[;] ~combinedice~);,Magic Six,MAX3,,GREEN,change_requirements,complicate,,,2,YES,NO,vanilla,1,,,,,,,,,,,
Doppeltwice_upgraded,Double dice value|[gray](Reuseable),1,givedice(d * 2[;] ~combinedice~);,Magic Six,MAX5,,GREEN,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Enchanted Bolt,Do [sword]4 damage|(At start of turn: Do [sword]3),1,attack(4);,Throw Dice,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,e.animate(~flashandshake~); attack(3); sfx(~_damage~);,,,,,,,
Enchanted Bolt_upgraded,Do [sword]5 damage|(At start of turn: Do [sword]4),1,attack(5);,Throw Dice,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); attack(4); sfx(~_damage~);,,,,,,,
Magnifying Glass,Double dice value|(Cost [mana]1[]: instead[;] triple),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice(d * 3[;] ~combinedice~); } else { givedice(d * 2[;] ~combinedice~); },Clone Device,MAX3,,BRIGHTCYAN,change_requirements,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Magnifying Glass_upgraded,Double dice value|(Cost [mana]1[]: instead[;] triple),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice(d * 3[;] ~combinedice~); } else { givedice(d * 2[;] ~combinedice~); },Clone Device,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Stew Pot,Do [sword]1 damage[;] reroll dice|(If [mana]>=6: return 5 or 6),1,if(getstatusself(MANA) >= 6) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,if(getstatusself(MANA) >= 6) { givedice(rand([5[;]6])); } else { givedice(); }
Stew Pot_upgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=4: return 5 or 6),1,if(getstatusself(MANA) >= 4) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(getstatusself(MANA) >= 4) { givedice(rand([5[;]6])); } else { givedice(); }
Stew Pot_downgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=8: return 5 or 6),1,if(getstatusself(MANA) >= 8) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(getstatusself(MANA) >= 8) { givedice(rand([5[;]6])); } else { givedice(); }
Flower Pot,Get a new dice[;]|on 4[;] gain [mana]1 mana,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d == 4) { inflictself(MANA[;]1); } },Focus,MAX4,,YELLOW,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Flower Pot_upgraded,Get a new dice[;]|on even[;] gain [mana]1 mana,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d % 2 == 0) { inflictself(MANA[;]1); } },Focus,NORMAL,,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Flower Pot_downgraded,Get a new dice,1,givedice();,Focus,MAX4,,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Bronze Cauldron,Do [sword]2[;] get an odd dice|[gray](Reuseable),1,attack(2); givedice(rand([1[;]3[;]5]));,,EVEN,,ORANGE,change_power,change_power,,,-1,NO,NO,vanilla,1,,,,,,,,,,,givedice(rand([1[;]3[;]5]));
Bronze Cauldron_upgraded,Do [sword]3[;] get an odd dice|[gray](Reuseable),1,attack(3); givedice(rand([1[;]3[;]5]));,,EVEN,,ORANGE,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,givedice(rand([1[;]3[;]5]));
Bronze Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,,EVEN,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Moon Beam,Do [sword]5 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(10); } else { attack(5); },,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Moon Beam_upgraded,Do [sword]7 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(14); } else { attack(7); },,EVEN,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Northern Lights,Get 2x<d6>s next turn|(If [mana]>=5: get 3 instead),1,if(getstatusself(MANA) >= 5) { inflictself(~stash~+d[;]3); inflictself(~illuminate~); } else { inflictself(~stash~+d[;]2); inflictself(~illuminate~); },,NORMAL,,PURPLE,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Northern Lights_upgraded,Get 4x<d6>s next turn|(If [mana]>=5: get 6 instead),1,if(getstatusself(MANA) >= 5) { inflictself(~stash~+d[;]6); inflictself(~illuminate~); } else { inflictself(~stash~+d[;]4); inflictself(~illuminate~); },,DOUBLES|DOUBLES,,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Daffodil,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,,MIN4,,YELLOW,change_power,decreaserange,,,0,YES,NO,vanilla,1,,,,e.animate(~flashandshake~); inflictself(MANA[;]1);,,,,,,,
Daffodil_upgraded,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,,MIN2,,YELLOW,,,,,0,YES,NO,vanilla,,,,,e.animate(~flashandshake~); inflictself(MANA[;]1);,,,,,,,
Honeysuckle,Recover [heal]1 health[;]|gain [mana]1 mana,1,attackself(-1); inflictself(MANA[;]1);,Regenerate,MAX3,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Honeysuckle_upgraded,Recover [heal]<d6> health[;]|gain [mana]1 mana,1,attackself(-d); inflictself(MANA[;]1);,Regenerate,MAX3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Sunburn,Do [fire]<d6> damage|(Cost [mana]1[]: burn a dice),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); attack(d[;] FIRE); inflict(FIRE[;] 1); } else { attack(d[;] FIRE); },Ember,MIN4,,RED,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); }
Sunburn_upgraded,Do [fire]<d6> damage|(Cost [mana]1[]: burn a dice),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); attack(d[;] FIRE); inflict(FIRE[;] 1); } else { attack(d[;] FIRE); },Ember,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); }
Cold Snap,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Cold Snap_upgraded,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Summer Solstice,Do [sword]<d6> damage|(Cost [mana]4[]: triple damage),1,if(getstatusself(MANA) >= 4) { removestatusself(MANA[;]4); attack(d * 3); } else { attack(d); },Hellfire,EVEN|EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,vanilla,2,,,,,,,,,,,if(getstatusself(MANA) >= 4) { removestatusself(MANA[;]4); }
Winter Solstice,Do [sword]<d6> damage|(If [mana]>=12: triple damage),1,if(getstatusself(MANA) >= 12) { attack(d * 3); } else { attack(d); },,ODD|ODD,,PURPLE,simplify,complicate,,,0,NO,NO,vanilla,2,,,,,,,,,,,
Lunasa,Replace the spell in slot <slotdoubles>|with a random spell,1,if(simulation) { bonus(-1000); } else { Spellbook.changespellflash(d[;]rand(loadtext(~diceydungeons/unexpectedspells_remix~))); },,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,witchonly|curseavoid|vanilla,1,,,,,,,,,,,
Lunasa_upgraded,Replace the spell in slot <d6>|with a random spell,1,if(simulation) { bonus(-1000); } else { Spellbook.changespellflash(d[;]rand(loadtext(~diceydungeons/unexpectedspells_remix~))); },,NORMAL,,ORANGE,,,,,0,YES,NO,witchonly|curseavoid|vanilla,,,,,,,,,,,,
Lunasa_downgraded,Replace the spell in slot 1|with a random spell,1,if(simulation) { bonus(-1000); } else { Spellbook.changespellflash(1[;]rand(loadtext(~diceydungeons/unexpectedspells_remix~))); },,REQUIRE1|REQUIRE1,,ORANGE,,,,,0,YES,NO,witchonly|curseavoid|vanilla,,,,,,,,,,,,
Gladioli,Do [sword]<d6> damage[;]|gain [mana]2 mana on 2 or less,1,attack(d); if(d <= 2) { inflictself(MANA[;]2); },,NORMAL,,RED,change_power,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,if(d <= 2) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Gladioli_upgraded,Do [sword]<d6> damage[;]|gain [mana]2 mana on 4 or less,1,attack(d); if(d <= 4) { inflictself(MANA[;]2); },,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d <= 4) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Moonlight Spear,Do [sword]10 damage|(If [mana]>=8: do double),1,if(getstatusself(MANA) >= 8) { attack(20); } else { attack(10); },Magic Six,REQUIRE6,,PURPLE,change_power,doublerequirements,,,0,NO,NO,vanilla,2,,,,,,,,,,,
Moonlight Spear_upgraded,Do [sword]10 damage|(If [mana]>=6: do double),1,if(getstatusself(MANA) >= 6) { attack(20); } else { attack(10); },Magic Six,REQUIRE6,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Magic Thistle,Gain [thorns]1 thorns|(Cost [mana]1[]: +[thorns]1 extra),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); inflictself(THORNS[;] 2); } else { inflictself(THORNS[;] 1); },Plasma Gun,ODD,,GREEN,simplify,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Teleport Spell?,50% chance to dodge|the next attack,1,inflictself(DODGE);,Quick Thinking,REQUIRE5,,YELLOW,simplify,noeffect,,,0,YES,NO,alternateversion|vanilla,1,,,,,,,,,,,
Blue Ocean,Do [sword]<d6> damage|(Cost [mana]2[]: heal 3),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attackself(-3); attack(d); sfx(~_heal~[;]~~[;]0.2); } else { attack(d); } sfxdamage(target[;]d);,Regenerate,MAX4,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,vanilla,1,,,,,,,,,,,if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attackself(-3); sfx(~_heal~[;]~~[;]0.2); }
Lucky 7,Do [sword]7[;] return a dice,1,if(simulation) { bonus(100); } else { attack(7); var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice); },Power Up,NORMAL|NORMAL,7,PINK,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice);
Lucky 7_upgraded,Do [sword]7[;] return first dice,1,if(simulation) { bonus(100); } else { attack(7); givedice(actualdice[0].basevalue); },Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(actualdice[0].basevalue);
Lucky 7_downgraded,Do [sword]7 damage,1,attack(7);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Nunchucks,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Harvest,MAX3|MAX3,,RED,change_power,change_power,,,-1,NO,NO,vanilla,1,,,,,,,,,,,
Nunchucks_upgraded,[sword]<d6>[;] return difference|[gray](Reuseable),1,attack(d); var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)][;] ~combinedice~);,Harvest,MAX3|MAX3,,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)][;] ~combinedice~);
Nunchucks_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Harvest,MAX2|MAX2,,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Master Key,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)[;] (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)[;] (d / 2)]); } },Steal,MIN4,,GREEN,change_requirements,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Master Key_upgraded,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)[;] (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)[;] (d / 2)]); } },Steal,MIN2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Master Key_downgraded,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)[;] (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)[;] (d / 2)]); } },Steal,MIN5,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Cowbell,Inflict [weaken]1 weaken|[gray](Reuseable),1,inflict(WEAKEN[;] 1);,Mumble,MAX2,,ORANGE,change_requirements,change_power,,,3,NO,NO,vanilla,1,,,,,,,,,,,
Cowbell_upgraded,Inflict [weaken]1 weaken|[gray](Reuseable),1,inflict(WEAKEN[;] 1);,Mumble,MAX3,,ORANGE,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Cowbell_downgraded,Inflict [weaken]1 weaken|[gray](Reuseable),1,inflict(WEAKEN[;] 1);,Mumble,REQUIRE1,,ORANGE,,,,,3,NO,NO,vanilla,,,,,,,,,,,,
Chisel,Dice value -1[;] roll a 1,1,givedice([d-1[;]1][;] ~splitdice~);,Meganudge,MIN2,,GREEN,change_power,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Chisel_upgraded,Dice value -1[;] roll a 1|[gray](Reuseable),1,givedice([d-1[;]1][;] ~splitdice~);,Meganudge,MIN2,,GREEN,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Chisel_downgraded,Dice value -1,1,givedice(d-1[;] ~splitdice~);,Meganudge,MIN2,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Signal Jammer,Split a dice unevenly,1,var result = []; if(d == 3){ result.push([2[;]1]); result.push([1[;]2]); } else if(d == 4){ result.push([3[;]1]); result.push([1[;]3]); } else if(d == 5){ result.push([1[;]4]); result.push([2[;]3]); result.push([3[;]2]); result.push([4[;]1]); } else if(d == 6){ result.push([1[;]5]); result.push([2[;]4]); result.push([4[;]2]); result.push([5[;]1]); } else{ result.push([d]); } shuffle(result); givedice(result[0][;] ~splitdice~);,Magic Lockpick,MIN3,,GREEN,change_power,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Signal Jammer_downgraded,Split a dice unevenly,1,var result = []; if(d == 3){ result.push([2[;]1]); result.push([1[;]2]); } else if(d == 4){ result.push([3[;]1]); result.push([1[;]3]); } else if(d == 5){ result.push([1[;]4]); result.push([2[;]3]); result.push([3[;]2]); result.push([4[;]1]); } else if(d == 6){ result.push([1[;]5]); result.push([2[;]4]); result.push([4[;]2]); result.push([5[;]1]); } else{ result.push([d]); } shuffle(result); givedice(result[0][;] ~splitdice~);,Magic Lockpick,MIN5,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Signal Jammer_upgraded,Split a dice unevenly|[gray](Reuseable),1,var result = []; if(d == 3){ result.push([2[;]1]); result.push([1[;]2]); } else if(d == 4){ result.push([3[;]1]); result.push([1[;]3]); } else if(d == 5){ result.push([1[;]4]); result.push([2[;]3]); result.push([3[;]2]); result.push([4[;]1]); } else if(d == 6){ result.push([1[;]5]); result.push([2[;]4]); result.push([4[;]2]); result.push([5[;]1]); } else{ result.push([d]); } shuffle(result); givedice(result[0][;] ~splitdice~);,Magic Lockpick,MIN3,,GREEN,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Splitula,Flip a dice upside down[;]|duplicate the flipped dice,1,givedice([7-d[;]7-d]);,Megaflip,MIN4,,GREEN,change_requirements,change_function,,,0,YES,NO,vanilla,,,,,,,,,,,,
Splitula_upgraded,Flip a dice upside down[;]|duplicate the flipped dice,1,givedice([7-d[;]7-d]);,Megaflip,MIN3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Splitula_downgraded,Flip a dice upside down,1,givedice(7-d);,Megaflip,MIN4,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Blast Chiller,[ice]4 damage + [ice]1 freeze|[gray](Reuseable),1,attack(4[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,vanilla,1,,,,,,,,,,,
Blast Chiller_upgraded,[ice]6 damage + [ice]1 freeze|[gray](Reuseable),1,attack(6[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Blast Chiller_downgraded,[ice]2 damage + [ice]1 freeze|[gray](Reuseable),1,attack(2[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Befuddle,Duplicate one dice[;]|return the other,2,givedice([actualdice[0].basevalue[;]actualdice[rand([0[;]1])].basevalue[;]actualdice[1].basevalue]);,Stardust,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Befuddle_upgraded,Duplicate one dice[;]|return the other,1,givedice([actualdice[0].basevalue[;]actualdice[rand([0[;]1])].basevalue[;]actualdice[1].basevalue]);,Stardust,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Befuddle_downgraded,Duplicate one dice[;]|return the other,2,givedice([actualdice[0].basevalue[;]actualdice[rand([0[;]1])].basevalue[;]actualdice[1].basevalue]);,Stardust,MAX3|MAX3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Befuddle_weakened,Duplicate one dice[;]|return the other,1,givedice([actualdice[0].basevalue[;]actualdice[rand([0[;]1])].basevalue[;]actualdice[1].basevalue]);,Stardust,MAX3|MAX3,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Paper Lantern,Get 3x<slotdoubles> next turn,1,inflictself(~stash~+d[;]3); inflictself(~lantern~);,Infinity Mirror,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Paper Lantern_upgraded,Get 2x<d6> next turn,1,inflictself(~stash~+d[;]2); inflictself(~lantern~);,Infinity Mirror,NORMAL,,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Paper Lantern_downgraded,Get a <d6> next turn,1,inflictself(~stash~+d[;]1); inflictself(~lantern~);,Infinity Mirror,NORMAL,,YELLOW,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Broken Mirror,Next turn[;] gain +1 dice this|fight[;] and curse yourself,1,jinx(~Broken_Mirror~[;]~gain +1 dice and curse yourself~[;]~Gain +1 dice[;] curse yourself~[;]~target.extradice++; inflict(CURSE); sfx(\~_curse\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);,Infinity Mirror,EVEN,,PURPLE,simplify,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Cloak,Gain [reduce]1 reduce|[gray](Reuseable),1,inflictself(REDUCE[;] 1);,Protection,COUNTDOWN,4,ORANGE,change_power,change_power,,,3,YES,NO,vanilla,1,,,,,,,,,,,
Cloak_upgraded,Gain [reduce]1 reduce|[gray](Reuseable),1,inflictself(REDUCE[;] 1);,Protection,COUNTDOWN,4,ORANGE,,,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Cloak_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE[;] 1);,Protection,COUNTDOWN,4,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Plaster,Heal [heal]1 health|[gray](Reuseable),1,attackself(-1);,Regenerate,COUNTDOWN,2,GREEN,change_power,removereusable,,,-1,YES,NO,vanilla,1,,,,,,,,,,,
Plaster_upgraded,Heal [heal]2 health|[gray](Reuseable),1,attackself(-2);,Regenerate,COUNTDOWN,2,GREEN,,,,,-1,YES,NO,vanilla,,,,,,,,,,,,
Gong,Do [sword]4 damage per [weaken]1|Enemy loses all weaken,1,attack(getstatus(WEAKEN) * 4); removestatus(WEAKEN[;] getstatus(WEAKEN));,Scream,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Gong_upgraded,Do [sword]5 damage per [weaken]1|Enemy loses all weaken,1,attack(getstatus(WEAKEN) * 5); removestatus(WEAKEN[;] getstatus(WEAKEN));,Scream,DOUBLES|DOUBLES,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Gong_downgraded,Do [sword]2 damage per [weaken]1|Enemy loses all weaken,1,attack(getstatus(WEAKEN) * 2); removestatus(WEAKEN[;] getstatus(WEAKEN));,Scream,DOUBLES|DOUBLES,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dramatic Exit,Do [sword]1. If this is the final|blow[;] gain [heal] 2 max hp,1,attack(1); if(target.hp <= 0){ self.maxhp +=2; attackself(-2); },Regenerate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Dramatic Exit_upgraded,Do [sword]1. If this is the final|blow[;] gain [heal] 2 max hp,1,attack(1); if(target.hp <= 0){ self.maxhp +=2; attackself(-2); },Regenerate,EVEN,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dramatic Exit_downgraded,Do [sword]1. If this is the final|blow[;] gain [heal] 2 max hp,1,attack(1); if(target.hp <= 0){ self.maxhp +=2; attackself(-2); },Regenerate,REQUIRE6|REQUIRE6,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dramatic Entrance,At the start of the first|turn[;] gain [fury]Fury,1,,Fury,,,RED,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,1,,e.changecolour(~RED~);,,if(turn == 1) { e.animate(~flashandshake~); e.changecolour(~GRAY~); inflictself(FURY[;]1); sfx(~_fury~); },,,,,,,
Dramatic Entrance_upgraded,At the start of the first|two turns[;] gain [fury]Fury,1,,Fury,,,RED,,,,none,0,YES,NO,excludefromrandomlists,,,e.changecolour(~RED~);,,if(turn == 1 # turn == 2) { e.animate(~flashandshake~); inflictself(FURY[;]1); sfx(~_fury~); if(turn == 2){ e.changecolour(~GRAY~); } },,,,,,,
Dramatic Entrance_downgraded,At the start of the first|turn[;] roll an extra dice,1,,Fury,,,RED,,,,none,0,YES,NO,excludefromrandomlists,,,e.changecolour(~RED~);,,if(turn == 1) { e.animate(~flashandshake~); givedice(); e.changecolour(~GRAY~); },,,,,,,
Berlin Key,Set a random dice to <d6>|Return the dice,1,if(!simulation) { var dicelist = []; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); } givedice(d); } } } },Reversal,NORMAL,,PINK,change_power,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Berlin Key_upgraded,Set dice to <d6>[;] return dice|[gray](Reuseable),1,if(!simulation) { var dicelist = []; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()[;] 0); } givedice(d); } } } },Reversal,NORMAL,,PINK,,,,,3,YES,NO,vanilla,,,,,,,,,,,,
Berlin Key_downgraded,Set a random dice to <d6>|Return the dice,1,if(!simulation) { var dicelist = []; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); } givedice(d); } } } },Reversal,MAX3,,PINK,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Square Pair,Roll 2 fours,1,givedice([4[;] 4]);,Magic Dice,COUNTDOWN,8,GREEN,halfcountdown,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Square Pair_downgraded,Roll 1 four,1,givedice(4);,Magic Dice,COUNTDOWN,8,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Square Pair_weakened,Roll 1 four,1,givedice(4);,Magic Dice,COUNTDOWN,4,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Wrecking Ball,Do [sword]<d6> damage[;]|reduce countdowns by <d6>,1,attack(d); boostcountdowns(d);,Accelerate,MAX4,,GREEN,change_power,decreaserange,,,0,NO,NO,vanilla,1,,,,,,,,,,,boostcountdowns(d);
Wrecking Ball_upgraded,[sword]<d6>[;] reduce counts by <d6>|[gray](Reuseable),1,attack(d); boostcountdowns(d);,Accelerate,MAX4,,GREEN,,,,,2,NO,NO,vanilla,,,,,,,,,,,,boostcountdowns(d);
Puppy Paws,Roll 2 fives,1,givedice([5[;] 5]);,Magic Dice,NORMAL|NORMAL,5,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Puppy Paws_upgraded,Roll 2 fives|[gray](Reuseable),1,givedice([5[;] 5]);,Magic Dice,NORMAL|NORMAL,5,GREEN,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Puppy Paws_downgraded,Roll 1 five,1,givedice(5);,Magic Dice,NORMAL|NORMAL,5,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Raw Ambition,Curse enemy,1,inflict(CURSE);,Cackle,COUNTDOWN,12,PURPLE,threequartercountdown,noeffect,,,0,NO,NO,vanilla,,,,,,,,,,,,
Determination,Do [sword]4 damage[;]|add random status,1,attack(4); inflict(rand([CURSE[;] LOCK[;] FIRE[;] ICE[;] WEAKEN[;] SHOCK[;] POISON]));,Stardust,COUNTDOWN,10,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Determination_upgraded,Do [sword]4 damage[;]|add 2x random status,1,attack(4); inflict(rand([CURSE[;] LOCK[;] FIRE[;] ICE[;] WEAKEN[;] SHOCK[;] POISON])[;] 2);,Stardust,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Determination_downgraded,Add random status,1,inflict(rand([CURSE[;] LOCK[;] FIRE[;] ICE[;] WEAKEN[;] SHOCK[;] POISON]));,Stardust,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Tetraphobia,Do [sword]4 damage,1,attack(4);,Shuriken,COUNTDOWN,4,PINK,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Tetraphobia_upgraded,Do [sword]1 damage[;]|four times,1,attack(1); attack(1); attack(1); attack(1); var takedamage = false; if(target != null){ if(target.isplayer) takedamage = true; } if(takedamage){ sfx(~_takedamage~[;]~light~[;]0.3); sfx(~_takedamage~[;]~light~[;]0.5); sfx(~_takedamage~[;]~light~[;]0.7); } else { sfx(~_damage~[;]~light~[;]0.3); sfx(~_damage~[;]~light~[;]0.5); sfx(~_damage~[;]~light~[;]0.7); } /* This works because the json has the fourth sfx at 0.1 */,Shuriken,COUNTDOWN,4,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,attack(1); attack(1); attack(1); var takedamage = false; if(target != null){ if(target.isplayer) takedamage = true; } if(takedamage){ sfx(~_takedamage~[;]~light~[;]0.1); sfx(~_takedamage~[;]~light~[;]0.3); sfx(~_takedamage~[;]~light~[;]0.5); } else { sfx(~_damage~[;]~light~[;]0.1); sfx(~_damage~[;]~light~[;]0.3); sfx(~_damage~[;]~light~[;]0.5); }
Tetraphobia_downgraded,Do [sword]3 damage,1,attack(3);,Shuriken,COUNTDOWN,4,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Secret Weapon,Gain a random blessing,1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE]); }else { randomstatus = rand([SHIELD[;]REDUCE[;]REEQUIPNEXT[;]DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,COUNTDOWN,10,PURPLE,halfcountdown,change_power,,,0,YES,NO,vanilla,1,,,,,,,,,,donothing();,
Secret Weapon_weakened,Gain [shield]4,1,inflictself(SHIELD[;]4);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Secret Weapon_downgraded,Gain [shield]4,1,inflictself(SHIELD[;]4);,Power Up,COUNTDOWN,10,PURPLE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Rosewood Spear,Do [sword]<d6> damage[;]|gain [thorns]2 thorns,2,attack(d); inflictself(THORNS[;] 2);,Needle,EVEN,,GREEN,change_power,complicate,thorns,,0,NO,NO,vanilla,,,,,,,,,,,,inflictself(THORNS[;] 2); sfx(~_thorns~[;]~~[;]0.2);
Rosewood Spear_upgraded,Do [sword]<d6> damage[;]|gain [thorns]3 thorns,2,attack(d); inflictself(THORNS[;] 3);,Needle,EVEN,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,inflictself(THORNS[;] 3); sfx(~_thorns~[;]~~[;]0.2);
Rosewood Spear?,Gain [thorns]2 thorns[;]|do [sword]<d6> damage,2,inflictself(THORNS[;] 2); attack(d);,Needle,EVEN,,GREEN,change_power,complicate,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,inflictself(THORNS[;] 2); sfx(~_thorns~[;]~~[;]0.2);
Rosewood Spear?_upgraded,Gain [thorns]3 thorns[;]|do [sword]<d6> damage,2,inflictself(THORNS[;] 3); attack(d);,Needle,EVEN,,GREEN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,inflictself(THORNS[;] 3); sfx(~_thorns~[;]~~[;]0.2);
Harmony,Do [weaken]<d6> damage[;] return|dice if enemy is weakened,2,if(getstatus(WEAKEN) > 0) { givedice(d); } attack((d)[;] WEAKEN);,Scream,MAX4,,ORANGE,increaserange,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,if(getstatus(WEAKEN) > 0) { givedice(d); }
Sad Verse,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,bonus(1000); attack(d[;] WEAKEN); inflict(WEAKEN);,Scream,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sad Verse_upgraded,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,bonus(1000); attack(d[;] WEAKEN); inflict(WEAKEN);,Scream,MAX5,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sad Verse_downgraded,Do [weaken]<d6> damage,2,bonus(1000); attack(d[;] WEAKEN);,Scream,MAX4,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
High Note,Do [weaken]12 damage,2,attack(12[;]WEAKEN);,Scream,COUNTDOWN,20,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
High Note_upgraded,Do [weaken]12 damage|[weaken]Weakens enemy,2,attack(12[;]WEAKEN); inflict(WEAKEN);,Scream,COUNTDOWN,20,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
High Note_downgraded,Do [weaken]9 damage,2,attack(9[;]WEAKEN);,Scream,COUNTDOWN,20,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Big Stick,Do [sword]<d6> damage[;]|on 6[;] gain [thorns]1 thorns,2,attack(d); if(d == 6) { inflictself(THORNS[;] 1); },Needle,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 6) { inflictself(THORNS[;] 1); sfx(~_thorns~[;]~~[;]0.2); }
Big Stick_upgraded,Do [sword]<d6> damage[;]|on 6[;] gain [thorns]2 thorns,2,attack(d); if(d == 6) { inflictself(THORNS[;] 2); },Needle,NORMAL,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 6) { inflictself(THORNS[;] 2); sfx(~_thorns~[;]~~[;]0.2); }
Big Stick_downgraded,Do [sword]<d6> damage,2,attack(d);,Needle,NORMAL,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lighter,Do [fire]2 damage[;]|burn [fire]1 dice,1,attack(2[;] FIRE); inflict(FIRE[;] 1);,Ember,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Lighter_upgraded,Do [fire]3 damage[;]|burn [fire]1 dice,1,attack(3[;] FIRE); inflict(FIRE[;] 1);,Ember,COUNTDOWN,5,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Lighter_downgraded,Do [fire]1 damage[;]|burn [fire]1 dice,1,attack(1[;] FIRE); inflict(FIRE[;] 1);,Ember,COUNTDOWN,5,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Molotov Cocktail,Do [fire]<d6> damage[;]|on 4[;] burn [fire]1 dice,2,attack(d[;] FIRE); if(d == 4) { inflict(FIRE[;] 1); },Ember,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Molotov Cocktail_upgraded,Do [fire]<d6> damage[;]|on even[;] burn [fire]1 dice,2,attack(d[;] FIRE); if(d % 2 == 0) { inflict(FIRE[;] 1); },Ember,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Molotov Cocktail_downgraded,Do [fire]<d6> damage[;]|on 4[;] burn [fire]1 dice,2,attack(d[;] FIRE); if(d == 4) { inflict(FIRE[;] 1); },Ember,MAX4,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Knitting Needle,Gain [thorns]1 thorns,1,inflictself(THORNS[;] 1);,Needle,ODD,,GREEN,simplify,complicate,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Chainsaw,Do [sword]<d6> damage[;] if|enemy hp is full[;] do double,1,if(target.hp == target.maxhp) { attack(d*2); } else { attack(d); },Dial Up Sounds,REQUIRE6|REQUIRE6,,RED,change_power,change_function,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Chainsaw_upgraded,Do [sword]<d6> damage[;] if|enemy hp is full[;] do double,1,if(target.hp == target.maxhp) { attack(d*2); } else { attack(d); },Dial Up Sounds,EVEN|EVEN,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Chainsaw_downgraded,Do [sword]<d6> damage[;] if|enemy hp is full[;] do double,1,if(target.hp == target.maxhp) { attack(d*2); } else { attack(d); },Dial Up Sounds,REQUIRE3|REQUIRE3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mosquito Bite,Drain [heart]1 health,1,drain(1);,Blood Sip,NORMAL,,RED,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mosquito Bite_upgraded,Drain [heart]2 health,1,drain(2);,Blood Sip,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hard Hat,Reduce [reduce]1 damage|from each attack,1,inflictself(REDUCE[;] 1);,Pillow Fort,NORMAL,,ORANGE,change_power,complicate,reduce,,0,YES,NO,vanilla,,,,,,,,,,,,
Hard Hat_upgraded,Reduce [reduce]2 damage|from each attack,1,inflictself(REDUCE[;] 2);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Hard Hat?,Block [reduce]1 of the|next status effect,1,inflictself(REDUCE[;] 1);,Pillow Fort,NORMAL,,ORANGE,change_power,complicate,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Hard Hat?_upgraded,Block [reduce]2 of the|next status effect,1,inflictself(REDUCE[;] 2);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,alternateversion|vanilla,,,,,,,,,,,,
Giant Spatula,Flip all your dice|upside down,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(7 - mydice.basevalue[;] self.screenposition()[;] c * 0.05); c++; } } } } } },Megaflip,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,vanilla,1,,,,,,,,,,,
Giant Spatula_downgraded,Flip all your dice|upside down,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(7 - mydice.basevalue[;] self.screenposition()[;] c * 0.05); c++; } } } } } },Megaflip,REQUIRE1,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Giant Spatula_upgraded,Flip all dice upside|down[;] return this one,1,if(simulation) { bonus(-1000); } else { var c = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(7 - mydice.basevalue[;] self.screenposition()[;] c * 0.05); c++; } } givedice(d); } } } },Megaflip,NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Scorpion,Do [sword]20 damage,1,attack(20);,Catapult,COUNTDOWN,32,RED,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Scorpion_weakened,Do [sword]10 damage,1,attack(10);,Catapult,COUNTDOWN,24,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Scorpion_downgraded,Do [sword]10 damage,1,attack(10);,Catapult,COUNTDOWN,32,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Scrap Kettle,Self inflict [fire]1 burn|(Always offered as scrap),1,,Ember,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts|vanilla,,,,inflictself(FIRE[;]1); sfx(~_fire~);,e.animate(~flashandshake~);,,,,,,,
Scrap Kettle_upgraded,Roll a burning dice|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts|vanilla,,,,,e.animate(~flashandshake~); inflictself(FIRE[;]1); givedice(); sfx(~_fire~);,,,,,,,
Scrap Kettle_downgraded,Self inflict [fire]2 burns|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts|vanilla,,,,inflictself(FIRE[;]2); sfx(~_fire~);,e.animate(~flashandshake~);,,,,,,,
Scrap Spear,Do [sword]6 damage|(Always offered as scrap),2,attack(d);,Random Roll,REQUIRE6,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Spear_upgraded,Do [sword]7 damage|(Always offered as scrap),2,attack(d);,Random Roll,REQUIRE6|FREE1,,GRAY,,,,,0,NO,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Spear_downgraded,Do [sword]3 damage|(Always offered as scrap),2,attack(d);,Random Roll,REQUIRE3,,GRAY,,,,,0,NO,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Club,Do [sword]<d6> damage|(Always offered as scrap),1,attack(d);,Bubble Gun,MAX4,,GRAY,increaserange,decreaserange,,,0,NO,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Book,Duplicate a dice|(Always offered as scrap),1,givedice([d[;] d]);,Replicate,ODD,,GRAY,simplify,complicate,,,0,YES,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Bump,Dice value +1|(Always offered as scrap),1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },Magic Six,MAX5,,GRAY,change_power,complicate,,,0,YES,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Bump_upgraded,Dice value +1|(Always offered as scrap),1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },Magic Six,NORMAL,,GRAY,,,,,0,YES,NO,appearsforparts|vanilla,,,,,,,,,,,,
Scrap Nettle,Gain [thorns]1 thorns|(Always offered as scrap),1,inflictself(THORNS[;]1);,Needle,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,appearsforparts|vanilla,,,,,,,,,,,,
Rotten Egg@6,Contains a terrible item|(Always offered as scrap),1,giveequipment(~Rotten Egg@5~[;] true[;] false[;] e);,Random Roll,REQUIRE6,,RED,change_power,doublerequirements,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@6_upgraded,Contents are even worse|(Always offered as scrap),1,giveequipment(~Rotten Egg@5+~[;] true[;] false[;] e);,Random Roll,REQUIRE6,,RED,,,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@5,Contains a terrible item|(Always offered as scrap),1,giveequipment(~Rotten Egg@4~[;] true[;] false[;] e);,Random Roll,REQUIRE5,,RED,change_power,doublerequirements,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@5_upgraded,Contents are even worse|(Always offered as scrap),1,giveequipment(~Rotten Egg@4+~[;] true[;] false[;] e);,Random Roll,REQUIRE5,,RED,,,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@4,Contains a terrible item|(Always offered as scrap),1,giveequipment(~Rotten Egg@3~[;] true[;] false[;] e);,Random Roll,REQUIRE4,,RED,change_power,doublerequirements,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@4_upgraded,Contents are even worse|(Always offered as scrap),1,giveequipment(~Rotten Egg@3+~[;] true[;] false[;] e);,Random Roll,REQUIRE4,,RED,,,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@3,Contains a terrible item|(Always offered as scrap),1,giveequipment(~Rotten Egg@2~[;] true[;] false[;] e);,Random Roll,REQUIRE3,,RED,change_power,doublerequirements,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@3_upgraded,Contents are even worse|(Always offered as scrap),1,giveequipment(~Rotten Egg@2+~[;] true[;] false[;] e);,Random Roll,REQUIRE3,,RED,,,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@2,Contains a terrible item|(Always offered as scrap),1,giveequipment(~Rotten Egg@1~[;] true[;] false[;] e);,Random Roll,REQUIRE2,,RED,change_power,doublerequirements,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@2_upgraded,Contents are even worse|(Always offered as scrap),1,giveequipment(~Rotten Egg@1+~[;] true[;] false[;] e);,Random Roll,REQUIRE2,,RED,,,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@1,Contains a terrible item|(Always offered as scrap),1,giveequipment(~Plague~[;] true[;] false[;] e); completechallenge(~challenge_hatchegg~);,Random Roll,REQUIRE1,,RED,change_power,doublerequirements,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Rotten Egg@1_upgraded,Contents are even worse|(Always offered as scrap),1,giveequipment(~Backfire+~[;] true[;] false[;] e); completechallenge(~challenge_hatchegg~);,Random Roll,REQUIRE1,,RED,,,,none,0,YES,NO,appearsforparts|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Transformer@1,Do [sword]2 damage|Add +2 each battle,1,attack(2);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@2~[;] true[;] false[;] e);,,,,,,,,,
Transformer@1_upgraded,Do [sword]2 damage|Add +2 each battle,1,attack(2);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@2_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@2,Do [sword]4 damage|Add +2 each battle,1,attack(4);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@3~[;] true[;] false[;] e);,,,,,,,,,
Transformer@2_upgraded,Do [sword]4 damage|Add +2 each battle,1,attack(4);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@3_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@3,Do [sword]6 damage|Add +2 each battle,1,attack(6);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@4~[;] true[;] false[;] e);,,,,,,,,,
Transformer@3_upgraded,Do [sword]6 damage|Add +2 each battle,1,attack(6);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@4_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@4,Do [sword]8 damage|Add +2 each battle,1,attack(8);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@5~[;] true[;] false[;] e);,,,,,,,,,
Transformer@4_upgraded,Do [sword]8 damage|Add +2 each battle,1,attack(8);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@5_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@5,Do [sword]10 damage|Add +2 each battle,1,attack(10);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@6~[;] true[;] false[;] e);,,,,,,,,,
Transformer@5_upgraded,Do [sword]10 damage|Add +2 each battle,1,attack(10);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@6_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@6,Do [sword]12 damage|Add +2 each battle,1,attack(12);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@7~[;] true[;] false[;] e);,,,,,,,,,
Transformer@6_upgraded,Do [sword]12 damage|Add +2 each battle,1,attack(12);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@7_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@7,Do [sword]14 damage|Add +2 each battle,1,attack(14);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@8~[;] true[;] false[;] e);,,,,,,,,,
Transformer@7_upgraded,Do [sword]14 damage|Add +2 each battle,1,attack(14);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@8_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@8,Do [sword]16 damage|Add +2 each battle,1,attack(16);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@9~[;] true[;] false[;] e);,,,,,,,,,
Transformer@8_upgraded,Do [sword]16 damage|Add +2 each battle,1,attack(16);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@9_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@9,Do [sword]18 damage|Add +2 each battle,1,attack(18);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@10~[;] true[;] false[;] e);,,,,,,,,,
Transformer@9_upgraded,Do [sword]18 damage|Add +2 each battle,1,attack(18);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Transformer@10_upgraded~[;] true[;] false[;] e);,,,,,,,,,
Transformer@10,Do [sword]20 damage|At max level,1,attack(20);,Overload,EVEN,,PINK,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Transformer@10_upgraded,Do [sword]20 damage|At max level,1,attack(20);,Overload,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Encyclopedia,Get a temporary gadget|[gray](once per battle),1,Gadget.givegadget(self[;]rand(loadtext(~diceydungeons/encyclopedia~))[;]true);,Reversal,COUNTDOWN,7,PINK,halfcountdown,noeffect,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Double Edge,Do [sword]<d6> damage|to both enemy and you,2,attack(d); attackself(d); sfxdamage(target[;]d); sfxdamage(self[;]d);,Power Up,NORMAL,,PURPLE,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,attackself(d); sfxdamage(target[;]d);
Double Edge_upgraded,Do [sword]<double> damage|to both enemy and you,2,attack(d * 2); attackself(d * 2); sfxdamage(target[;]d * 2); sfxdamage(self[;]d);,Power Up,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,attackself(d * 2); sfxdamage(target[;]d * 2);
Rubber Mallet,Do [sword]<d6> damage[;]|on 1[;] also reroll,1,if(d == 1) { givedice(); } attack(d);,Random Roll,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 1) { givedice(); }
Rubber Mallet_upgraded,Do [sword]<d6> damage[;]|on odd[;] also reroll,1,if(d % 2 == 1) { givedice(); } attack(d);,Random Roll,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d % 2 == 1) { givedice(); }
Rubber Mallet_downgraded,Do [sword]<d6> damage[;]|on 1[;] also reroll,1,if(d == 1) { givedice(); } attack(d);,Random Roll,ODD,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 1) { givedice(); }
Smush Together,Combine dice[;] value -1,1,if(d > 1) givedice((d - 1)[;] ~combinedice~);,Replicate,NORMAL|NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Smush Together_upgraded,Combine dice[;] value +1,1,givedice((d + 1)[;] ~combinedice~);,Replicate,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Change Machine,Return four 1s,1,givedice([1[;] 1[;] 1[;] 1]);,Regenerate,NORMAL|NORMAL,4,GREEN,change_power,change_power,,,0,YES,NO,vanilla,,,,,,,,,,,,
Change Machine_upgraded,Return four 1s,1,givedice([1[;] 1[;] 1[;] 1]);,Regenerate,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Change Machine_downgraded,Return four 1s,1,givedice([1[;] 1[;] 1[;] 1]);,Regenerate,NORMAL|NORMAL,8,GREEN,,,,,0,YES,NO,vanilla,,,,,,,,,,,,
Calculator,Multiply dice together[;]|do that much damage,1,attack(actualdice[0].basevalue * actualdice[1].basevalue);,Regenerate,NORMAL|NORMAL,7,GREEN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Calculator_upgraded,Multiply dice together[;]|do that much damage,1,attack(actualdice[0].basevalue * actualdice[1].basevalue);,Regenerate,NORMAL|NORMAL,8,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Calculator_downgraded,Multiply dice together[;]|do that much damage,1,attack(actualdice[0].basevalue * actualdice[1].basevalue);,Regenerate,NORMAL|NORMAL,6,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hi Vis Jacket,Add [shield]<d6> shield|(Gain [reduce]1 each turn),2,inflictself(SHIELD[;]d);,Pillow Fort,MAX4,,ORANGE,reducesize,change_power,,,0,YES,NO,vanilla,,,,,e.animate(~flashandshake~); inflictself(REDUCE[;] 1); sfx(~_shield~);,,,,,,,
Hi Vis Jacket_downgraded,Add [shield]<d6> shield|(Gain [reduce]1 each turn),2,inflictself(SHIELD[;]d);,Pillow Fort,MAX2,,ORANGE,,,,,0,YES,NO,vanilla,,,,,e.animate(~flashandshake~); inflictself(REDUCE[;] 1); sfx(~_shield~);,,,,,,,
Hi Vis Jacket_weakened,Add [shield]<d6> shield|(Gain [reduce]1 each turn),1,inflictself(SHIELD[;]d);,Pillow Fort,MAX2,,ORANGE,,,,,0,YES,NO,vanilla,,,,,e.animate(~flashandshake~); inflictself(REDUCE[;] 1); sfx(~_shield~);,,,,,,,
Plague,At the start of each turn[;]|curse everyone,1,,Cackle,,,PURPLE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflict(CURSE[;]1); inflictself(CURSE[;] 1); sfx(~_curse~);,,,,,,,
Plague_upgraded,At the start of each turn[;]|curse enemy,1,,Cackle,,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflict(CURSE[;]1); sfx(~_curse~);,,,,,,,
Plague_downgraded,At the start of each turn[;]|curse yourself,1,,Cackle,,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflictself(CURSE[;] 1); sfx(~_curse~);,,,,,,,
Spannersword,Combine dice[;] do [sword]1,1,if(d > 0) givedice(d[;] ~combinedice~); attack(1);,Magic Spanner,MAX5|MAX5,,RED,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d > 0) givedice(d[;] ~combinedice~);
Spannersword_upgraded,Combine dice[;] do [sword]1|[gray](Reuseable),1,if(d > 0) givedice(d[;] ~combinedice~); attack(1);,Magic Spanner,MAX5|MAX5,,RED,,,,,2,NO,NO,vanilla,,,,,,,,,,,,if(d > 0) givedice(d[;] ~combinedice~);
Screwdriver,Do [sword]<d6> damage[;]|on 6[;] reactivate gadget,2,attack(d); if(d == 6) { Gadget.reactivate(self[;] ALL); },Efficiency,NORMAL,,PURPLE,reducesize,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,if(d == 6) { Gadget.reactivate(self[;] ALL); }
Screwdriver_downgraded,Do [sword]<d6> damage,2,attack(d);,Efficiency,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Screwdriver_weakened,Do [sword]<d6> damage,1,attack(d);,Efficiency,NORMAL,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Last Laugh,Enemy will survive the|next fatal blow,1,inflict(SURVIVE);,Still Standing,COUNTDOWN,24,PURPLE,threequartercountdown,noeffect,survive,,0,NO,NO,vanilla,,,,,,,,,,,,
Last Laugh?,Enemy will survive for|the next three turns...,1,inflict(SURVIVE);,Still Standing,COUNTDOWN,24,PURPLE,threequartercountdown,noeffect,,,0,NO,YES,alternateversion|vanilla,,,,,,,,,,,,
Justice,Do [sword]<d6> damage[;]|blind all dice,2,attack(d); inflict(BLIND[;] ALL);,Time Stop,REQUIRE6,,PINK,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Sword,Do [sword]<d6> damage[;] if|enemy hp is full[;] do double,2,if(target.hp == target.maxhp) { attack(d*2); } else { attack(d); },Time Stop,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Sword_upgraded,Do [sword]<d6> damage[;] if|enemy hp is full[;] do triple,2,if(target.hp == target.maxhp) { attack(d*3); } else { attack(d); },Time Stop,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Sword_downgraded,Do [sword]<d6> damage[;] if|enemy hp is full[;] do +[sword]3,2,if(target.hp == target.maxhp) { attack(d + 3); } else { attack(d); },Time Stop,REQUIRE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wheel of Fortune,Issue commandments,2,wheeloffortune();,Time Stop,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Wheel of Fortune_upgraded,Issue commandments,2,wheeloffortune();,Time Stop,REQUIRE6|REQUIRE6,,PINK,,,,,0,YES,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Wheel of Fortune_downgraded,Issue commandments[;]|curse yourself,2,wheeloffortune(); inflictself(CURSE);,Time Stop,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,PINK,,,,,0,YES,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Divine Axe,Do [sword]<triple> damage[;] if|enemy has any shield[;] miss,2,if(!target.hasstatus(SHIELD)) { attack(d * 3); } else { bonus(10000); },Time Stop,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Axe_upgraded,Do [sword]<quadruple> damage[;] if|enemy has any shield[;] miss,2,if(!target.hasstatus(SHIELD)) { attack(d * 4); } else { bonus(10000); },Time Stop,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Axe_downgraded,Do [sword]<double> damage[;] if|enemy has any shield[;] miss,2,if(!target.hasstatus(SHIELD)) { attack(d * 2); } else { bonus(10000); },Time Stop,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Judgement@plants,Do [sword]<triple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_upgraded,Do [sword]<quadruple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_downgraded,Do [sword]<d6>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats,Do [sword]<triple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_upgraded,Do [sword]<quadruple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_downgraded,Do [sword]<d6>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green,Do [sword]<triple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_upgraded,Do [sword]<quadruple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_downgraded,Do [sword]<d6>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords,Do [sword]<triple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_upgraded,Do [sword]<quadruple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_downgraded,Do [sword]<d6>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields,Do [sword]<triple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_upgraded,Do [sword]<quadruple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_downgraded,Do [sword]<d6>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears,Do [sword]<triple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_upgraded,Do [sword]<quadruple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_downgraded,Do [sword]<d6>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals,Do [sword]<triple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_upgraded,Do [sword]<quadruple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_downgraded,Do [sword]<d6>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating,Do [sword]<triple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_upgraded,Do [sword]<quadruple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_downgraded,Do [sword]<d6>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear,Do [sword]<triple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_upgraded,Do [sword]<quadruple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_downgraded,Do [sword]<d6>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses,Do [sword]<triple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_upgraded,Do [sword]<quadruple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_downgraded,Do [sword]<d6>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1,Do [sword]<triple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_upgraded,Do [sword]<quadruple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_downgraded,Do [sword]<d6>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire,Do [sword]<triple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_upgraded,Do [sword]<quadruple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_downgraded,Do [sword]<d6>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison,Do [sword]<triple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_upgraded,Do [sword]<quadruple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_downgraded,Do [sword]<d6>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines,Do [sword]<triple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_upgraded,Do [sword]<quadruple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_downgraded,Do [sword]<d6>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic,Do [sword]<triple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_upgraded,Do [sword]<quadruple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_downgraded,Do [sword]<d6>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings,Do [sword]<triple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_upgraded,Do [sword]<quadruple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_downgraded,Do [sword]<d6>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople,Do [sword]<triple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_upgraded,Do [sword]<quadruple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_downgraded,Do [sword]<d6>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs,Do [sword]<triple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_upgraded,Do [sword]<quadruple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_downgraded,Do [sword]<d6>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp,Do [sword]<triple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_upgraded,Do [sword]<quadruple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_downgraded,Do [sword]<d6>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp,Do [sword]<triple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_upgraded,Do [sword]<quadruple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_downgraded,Do [sword]<d6>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Custard Pie,Blind 2 dice[;] then|return the dice,2,givedice(d); inflict(BLIND[;] 2); bonus(1000);,Oh No!,ODD,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,givedice(d);
Custard Pie_upgraded,Blind 4 dice[;] then|return the dice,2,givedice(d); inflict(BLIND[;] 4); bonus(1000);,Oh No!,ODD,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,givedice(d);
Custard Pie_downgraded,Blind 1 dice[;] then|return the dice,2,givedice(d); inflict(BLIND); bonus(1000);,Oh No!,ODD,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,givedice(d);
Spare Cycles,Do [sword]<leftovercpu> damage[;]| [sword]1 for each unused CPU point,1,attack(d);,Overload,COUNTDOWN,12,BRIGHTCYAN,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Charge!,Bash with shield[;]|do [shield]<myshield> damage,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100);,Plasma Gun,COUNTDOWN,12,ORANGE,change_power,change_function,,,0,NO,NO,vanilla,,,,,,,,,,,,
Charge!_upgraded,Bash with shield[;]|do [shield]<myshield> damage,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100);,Plasma Gun,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Charge!_downgraded,Bash with shield[;] do [shield]<myshield>|damage[;] but lose all shield,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100); removestatusself(SHIELD[;] getstatusself(SHIELD));,Plasma Gun,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,removestatusself(SHIELD[;] getstatusself(SHIELD));
Charge!_weakened,Bash with shield[;] do [shield]<myshield>|damage[;] but lose all shield,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100); removestatusself(SHIELD[;] getstatusself(SHIELD));,Plasma Gun,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,removestatusself(SHIELD[;] getstatusself(SHIELD));
Divine Dagger,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,NORMAL,,RED,change_power,change_power,,,5,NO,NO,vanilla,,,,e.timesused = 0;,,,,,,,,
Divine Dagger_upgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,NORMAL,,RED,,,,,-1,NO,NO,vanilla,,,,e.timesused = 1;,,,,,,,,
Divine Dagger_downgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,NORMAL,,RED,,,,,3,NO,NO,vanilla,,,,e.timesused = 0;,,,,,,,,
Divine Hammer,Do [shock]<double> damage[;]|[shock]Shock all equipment,2,attack(d * 2[;] SHOCK); inflict(SHOCK[;]ALL);,Zap,NORMAL,,YELLOW,change_requirements,change_function,,,0,NO,NO,vanilla,,,,,,,,,,,,
Divine Hammer_upgraded,Do [shock]<triple> damage[;]|[shock]Shock all equipment,2,attack(d * 3[;] SHOCK); inflict(SHOCK[;]ALL);,Zap,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Divine Hammer_downgraded,[shock]Shock all equipment,2,inflict(SHOCK[;]ALL);,Zap,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Divine Megaphone,Do [weaken]<double> damage[;]|[weaken]Weaken all equipment,2,attack(d * 2[;] WEAKEN); inflict(WEAKEN[;]ALL);,Burrower,NORMAL,,ORANGE,change_requirements,change_function,,,0,NO,NO,vanilla,,,,,,,,,,,,
Divine Megaphone_upgraded,Do [weaken]<triple> damage[;]|[weaken]Weaken all equipment,2,attack(d * 3[;] WEAKEN); inflict(WEAKEN[;]ALL);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Divine Megaphone_downgraded,[weaken]Weaken all equipment,2,inflict(WEAKEN[;]ALL);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Apocalypse,Do [sword]30 damage[;]|inflict [curse]99 curses,2,attack(30); inflict(CURSE[;]99);,Hellfire,COUNTDOWN,20,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Apocalypse_upgraded,Do [sword]35 damage[;]|inflict [curse]99 curses,2,attack(35); inflict(CURSE[;]99);,Hellfire,COUNTDOWN,20,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Apocalypse_downgraded,Do [sword]20 damage[;]|inflict [curse]99 curses,2,attack(20); inflict(CURSE[;]99);,Hellfire,COUNTDOWN,20,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mega Storm,Do [shock]20 damage[;]|[shock]Shock all equipment,2,attack(20[;] SHOCK); inflict(SHOCK[;]ALL);,Hellfire,COUNTDOWN,20,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mega Storm_upgraded,Do [shock]25 damage[;]|[shock]Shock all equipment,2,attack(25[;] SHOCK); inflict(SHOCK[;]ALL);,Hellfire,COUNTDOWN,20,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Mega Storm_downgraded,Do [shock]10 damage[;]|[shock]Shock all equipment,2,attack(10[;] SHOCK); inflict(SHOCK[;]ALL);,Hellfire,COUNTDOWN,20,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Switch Fighter,Switch Fighter|[gray](Once per turn)[],2,monstercard_switchfighters(e);,,,,BLACK,,,,none,0,YES,NO,cannotsteal|excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
The Warrior,Select,2,monstercard([~Rusty Sword~[;]~Iron Shield~[;]~Combat Roll~][;]e);,,,,BRIGHTCYAN,,,,none,0,YES,NO,cannotsteal|excludefromrandomlists|monstercard|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
The Thief,Select,2,monstercard([~Pocket Knife~[;]~Hacksaw~][;]e);,,,,GREEN,,,,none,0,YES,NO,cannotsteal|excludefromrandomlists|monstercard|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
The Robot,Select,2,monstercard([~Missing Score~[;]~Capacitor~][;]e);,,,,GRAY,,,,none,0,YES,NO,cannotsteal|excludefromrandomlists|monstercard|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
The Inventor,Select,2,monstercard([~Hammer~[;]~Spanner~[;]~Pea Shooter~][;]e);,,,,ORANGE,,,,none,0,YES,NO,cannotsteal|excludefromrandomlists|monstercard|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
The Witch,Select,2,monstercard([~Cauldron~[;]~Magic Missile~[;]~Magic Missile~[;]~Hex~][;]e);,,,,PURPLE,,,,none,0,YES,NO,cannotsteal|excludefromrandomlists|monstercard|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
The Jester,Select,2,monstercard([~Juggling Ball~[;]~Wind up Fist~[;]~Juggling Ball~][;]e);,,,,RED,,,,none,0,YES,NO,cannotsteal|excludefromrandomlists|monstercard|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Blood Cauldron,Drain [heart]1 health[;]|get a new dice,1,drain(1); givedice();,Random Roll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice();
Blood Cauldron_upgraded,Drain [heart]1 health[;] reroll dice|[gray](Reuseable),1,drain(1); givedice();,Random Roll,NORMAL,,RED,,,,,2,NO,NO,vanilla,,,,,,,,,,,,givedice();
Blood Cauldron_downgraded,Drain [heart]1 health,1,drain(1);,Random Roll,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Dust Cloud,Do [sword]<d6> damage[;]|on 6[;] blind [blind]2 dice,2,attack(d); if(d == 6) { bonus(2000); inflict(BLIND[;] 2); } if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_blind~[;]~~[;]0.2); },Regenerate,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Dust Cloud_upgraded,Do [sword]<d6> damage[;]|blind [blind]2 dice,2,attack(d); inflict(BLIND[;] 2);,Regenerate,NORMAL,,PURPLE,,,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Dust Cloud_downgraded,Do [sword]<d6> damage,2,attack(d);,Regenerate,NORMAL,,PURPLE,,,,,0,NO,NO,cannotsteal|vanilla,,,,,,,,,,,,
Rotten Core,Reduce health by half,2,pierceattack((target.hp / 2));,Time Stop,COUNTDOWN,16,RED,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Rotten Core_weakened,Reduce health by one third,2,pierceattack((target.hp / 3));,Time Stop,COUNTDOWN,12,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Rotten Core_downgraded,Reduce health by one third,2,pierceattack((target.hp / 3));,Time Stop,COUNTDOWN,16,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Worm Bite,Do [sword]1 damage,2,attack(1);,Bubble Gun,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Worm Bite_downgraded,Do [sword]1 damage,2,attack(1);,Bubble Gun,MIN4,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Worm Bite_upgraded,Do [sword]3 damage,2,attack(3);,Bubble Gun,NORMAL,,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fool's Fire,Inflict [vanish]Vanish,2,inflict(VANISH);,Cackle,COUNTDOWN,12,PINK,halfcountdown,change_function,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fool's Fire_downgraded,Burns [fire]1 dice,2,inflict(FIRE);,Cackle,COUNTDOWN,12,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fool's Fire_weakened,Burns [fire]1 dice,2,inflict(FIRE);,Cackle,COUNTDOWN,6,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Beetle Headbutt,Do [sword]5 damage[;]|Lock [lock]1 dice,2,attack(5); inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Beetle Headbutt_upgraded,Do [sword]8 damage[;]|Lock [lock]1 dice,2,attack(8); inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Beetle Headbutt_downgraded,Lock [lock]1 dice,2,inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Uptick@1,Increase and reset all dice|[gray](Current uptick: 1),2,if(simulation) { bonus(-1000); } else { self.getskillcard().animate(~flashandshake~); },,REQUIRE1,,GRAY,,,,,-1,YES,NO,hidereuseable|excludefromrandomlists|curseavoid,,,,,,,,,var uptick = 2; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~[;]uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,,,
Uptick@2,Increase and reset all dice|[gray](Current uptick: 2),2,if(simulation) { bonus(-1000); } else { self.getskillcard().animate(~flashandshake~); },,REQUIRE2,,GRAY,,,,,-1,YES,NO,hidereuseable|excludefromrandomlists|curseavoid,,,,,,,,,var uptick = 3; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~[;]uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,,,
Uptick@3,Increase and reset all dice|[gray](Current uptick: 3),2,if(simulation) { bonus(-1000); } else { self.getskillcard().animate(~flashandshake~); },,REQUIRE3,,GRAY,,,,,-1,YES,NO,hidereuseable|excludefromrandomlists|curseavoid,,,,,,,,,var uptick = 4; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~[;]uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,,,
Uptick@4,Increase and reset all dice|[gray](Current uptick: 4),2,if(simulation) { bonus(-1000); } else { self.getskillcard().animate(~flashandshake~); },,REQUIRE4,,GRAY,,,,,-1,YES,NO,hidereuseable|excludefromrandomlists|curseavoid,,,,,,,,,var uptick = 5; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~[;]uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,,,
Uptick@5,Increase and reset all dice|[gray](Current uptick: 5),2,if(simulation) { bonus(-1000); } else { self.getskillcard().animate(~flashandshake~); },,REQUIRE5,,GRAY,,,,,-1,YES,NO,hidereuseable|excludefromrandomlists|curseavoid,,,,,,,,,var uptick = 6; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~[;]uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,,,
Uptick@6,Reset uptick to 1|[gray](Current uptick: 6),2,if(simulation) { bonus(-1000); } else { self.getskillcard().animate(~flashandshake~); },,REQUIRE6,,GRAY,,,,,-1,YES,NO,hidereuseable|excludefromrandomlists|curseavoid,,,,,,,,,var uptick = 1; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~[;]uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,,,
Kunai,Do [sword]<double> damage|[gray](Reuseable),1,attack(d * 2);,Pea Gun,REQUIRE1,,RED,increaserange,change_power,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Kunai_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Pea Gun,REQUIRE1,,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Glare,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,change_power,change_power,,,2,NO,NO,vanilla,,,,,,,,,,,,
Glare_upgraded,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Glare_downgraded,Lock [lock]1 dice,2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Avalanche,Do [sword]3 damage[;]|reroll with lower value,1,if(!simulation) { attack(3); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome)); } else { attack(3); },Shuriken,MIN3,,GRAY,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Avalanche_upgraded,Do [sword]4 damage[;]|reroll with lower value,1,if(!simulation) { attack(4); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome)); } else { attack(4); },Shuriken,MIN3,,GRAY,,,,,0,NO,NO,vanilla,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Avalanche_downgraded,Do [sword]3 damage[;]|reroll with lower value,1,if(!simulation) { attack(3); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome)); } else { attack(3); },Shuriken,MIN4,,GRAY,,,,,0,NO,NO,vanilla,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Mood Change,Change the weather[;]|recover [heal]3 health,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } attackself(-3); var weather = rand([~Hurricane~[;]~Thunder Storm~[;]~Heatwave~[;]~Snowstorm~[;]~Thunder Storm~[;]~Heatwave~[;]~Snowstorm~]); giveequipment([weather[;]weather[;]weather[;]~Mood Change~][;]true[;]false);,Regenerate,COUNTDOWN,5,GREEN,change_power,change_power,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_upgraded,Change the weather[;]|recover [heal]6 health,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } attackself(-6); var weather = rand([~Hurricane+~[;]~Thunder Storm+~[;]~Heatwave+~[;]~Snowstorm+~[;]~Thunder Storm+~[;]~Heatwave+~[;]~Snowstorm+~]); giveequipment([weather[;]weather[;]weather[;]~Mood Change+~][;]true[;]false);,Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_downgraded,Change the weather,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } var weather = rand([~Hurricane~[;]~Thunder Storm~[;]~Heatwave~[;]~Snowstorm~[;]~Thunder Storm~[;]~Heatwave~[;]~Snowstorm~]); giveequipment([weather[;]weather[;]weather[;]~Mood Change~][;]true[;]false); sfx(~_thinghappens~);,Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_weakened,Change the weather,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } var weather = rand([~Hurricane+~[;]~Thunder Storm+~[;]~Heatwave+~[;]~Snowstorm+~[;]~Thunder Storm+~[;]~Heatwave+~[;]~Snowstorm+~]); giveequipment([weather[;]weather[;]weather[;]~Mood Change+~][;]true[;]false); sfx(~_thinghappens~);,Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Hurricane,Do [sword]3[;] lock [lock]1 dice|[gray](once per battle),2,attack(3); inflict(LOCK);,Random Roll,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Hurricane_upgraded,Do [sword]4[;] lock [lock]1 dice|[gray](once per battle),2,attack(4); inflict(LOCK);,Random Roll,COUNTDOWN,5,PURPLE,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Hurricane_downgraded,Lock [lock]1 dice|[gray](once per battle),2,inflict(LOCK);,Random Roll,COUNTDOWN,5,PURPLE,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Thunder Storm,Do [shock]3[;] inflict [shock]1 shock|[gray](once per battle),2,attack(3[;]SHOCK); inflict(SHOCK);,Zap,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Thunder Storm_upgraded,Do [shock]4[;] inflict [shock]1 shock|[gray](once per battle),2,attack(4[;]SHOCK); inflict(SHOCK);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Thunder Storm_downgraded,Inflict [shock]1 shock|[gray](once per battle),2,inflict(SHOCK);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Heatwave,Do [fire]3[;] inflict [fire]1 burn|[gray](once per battle),2,attack(3[;]FIRE); inflict(FIRE);,Hellfire,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Heatwave_upgraded,Do [fire]4[;] inflict [fire]1 burn|[gray](once per battle),2,attack(4[;]FIRE); inflict(FIRE);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Heatwave_downgraded,Inflict [fire]1 burn|[gray](once per battle),2,inflict(FIRE);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Snowstorm,Do [ice]3[;] inflict [ice]1 freeze|[gray](once per battle),2,attack(3[;]ICE); inflict(ICE);,Hellfire,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Snowstorm_upgraded,Do [ice]4[;] inflict [ice]1 freeze|[gray](once per battle),2,attack(4[;]ICE); inflict(ICE);,Hellfire,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Snowstorm_downgraded,Inflict [ice]1 freeze|[gray](once per battle),2,inflict(ICE);,Hellfire,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Dark Shadow@versusladyluck,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([BLIND[;]FIRE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,EVEN,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow@versusladyluck_upgraded,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([BLIND[;]FIRE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,NORMAL,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow@versusladyluck_downgraded,Add 2x random status,2,var randstatus = rand([BLIND[;]FIRE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,EVEN,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pirate Hook,Do [sword]<d6> damage[;]|on 4[;] you can re-use this,2,attack(d); if(d==4) bonus(1000);,Efficiency,MAX5,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,vanilla,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(d == 4 && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); },,if(d == 4) self.setvar(~piratehookkludge~[;]1);,
Pirate Hook_upgraded,Do [sword]<d6> damage[;]|on 5[;] you can re-use this,2,attack(d); if(d==5) bonus(1000);,Efficiency,NORMAL,,YELLOW,,,,,0,NO,NO,vanilla,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(d == 5 && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); },,if(d == 5) self.setvar(~piratehookkludge~[;]1);,
Pirate Hook_downgraded,Do [sword]<d6> damage,2,attack(d);,Efficiency,MAX5,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Pirate Hook?,Do [sword]<d6> damage[;]|on 4[;] keep the dice,2,attack(d); if(d==4) bonus(1000);,Efficiency,MAX5,,YELLOW,change_power,change_power,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,if(d == 4) { var newdice = new elements.Dice(actualdice[0].x[;]actualdice[0].y); newdice.owner = self; newdice.copyfrom(actualdice[0]); self.dicepool.push(newdice); sfx(~_recycle~[;]~~[;]0.2); self.symbolparticle(REEQUIPNEXT); },,,
Pirate Hook?_upgraded,Do [sword]<d6> damage[;]|on 5[;] keep the dice,2,attack(d); if(d==5) bonus(1000);,Efficiency,NORMAL,,YELLOW,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,if(d == 5) { var newdice = new elements.Dice(actualdice[0].x[;]actualdice[0].y); newdice.owner = self; newdice.copyfrom(actualdice[0]); self.dicepool.push(newdice); sfx(~_recycle~[;]~~[;]0.2); self.symbolparticle(REEQUIPNEXT); },,,
Pirate Hook?_downgraded,Do [sword]<d6> damage,2,attack(d);,Efficiency,MAX5,,YELLOW,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Cannon Fire,Deal [fire]6 damage|Burn [fire]1 dice,2,attack(6[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cannon Fire_upgraded,Deal [fire]8 damage|Burn [fire]1 dice,2,attack(8[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cannon Fire_downgraded,Deal [fire]3 damage|Burn [fire]1 dice,2,attack(3[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Memorise,Replace the spell in slot <slotdoubles>|with the unexpected spell,1,if(simulation) { bonus(-1000); } else { Spellbook.changespellflash(d[;]Spellbook.getunexpectedspell()); },,DOUBLES|DOUBLES,,PINK,change_power,change_power,,,0,YES,NO,witchonly|curseavoid|vanilla,1,,,,,,,,,,,
Memorise_upgraded,Replace the spell in slot <d6>|with the unexpected spell,1,if(simulation) { bonus(-1000); } else { Spellbook.changespellflash(d[;]Spellbook.getunexpectedspell()); },,NORMAL,,PINK,,,,,0,YES,NO,witchonly|curseavoid|vanilla,,,,,,,,,,,,
Memorise_downgraded,Replace the spell in slot 1|with the unexpected spell,1,if(simulation) { bonus(-1000); } else { Spellbook.changespellflash(1[;]Spellbook.getunexpectedspell()); },,REQUIRE1|REQUIRE1,,PINK,,,,,0,YES,NO,witchonly|curseavoid|vanilla,,,,,,,,,,,,
Picnic Basket,Keep a <d6> for next turn,1,inflictself(~stash~+d[;]1); inflictself(~illuminate~);,,NORMAL,,PINK,change_power,complicate,,,0,YES,NO,vanilla,,,,,,,,,,,,
Picnic Basket_upgraded,Keep a <d6> for next turn|[gray](Reuseable),1,inflictself(~stash~+d[;]1); inflictself(~illuminate~);,,NORMAL,,PINK,,,,,2,YES,NO,vanilla,,,,,,,,,,,,
Marmalade,Get a [dice]6 next turn,1,inflictself(~stash~+6[;]1); inflictself(~illuminate~);,,REQUIRE1,,ORANGE,simplify,doublerequirements,,,0,YES,NO,vanilla,,,,,,,,,,,,
Bear Trap,Lock [lock]1 dice,1,inflict(LOCK[;] 1); bonus(1000);,Random Roll,REQUIRE1,,PURPLE,increaserange,doublerequirements,,,0,NO,NO,vanilla,,,,,,,,,,,,
Bearpick,Shred a big dice into|other[;] smaller dice,1,var splitamount = rand([2[;]2[;]2[;]3[;]3[;]4]); givedice(split(d[;]splitamount)[;] ~splitdice~);,Steal,MIN5,,GREEN,increaserange,decreaserange,,,0,YES,NO,vanilla,,,,,,,,,,,,
Honey,Reroll the dice[;] get a|higher value than before,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); },Megabump,MAX4,,YELLOW,increaserange,decreaserange,,,0,YES,NO,vanilla,,,,,,,,,,,,
Bear Swipe,Do [sword]<d6> damage[;]|return the dice,1,attack(d); givedice(d);,Shuriken,MAX3,,RED,increaserange,decreaserange,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Bear Hug,Do [sword]<double> damage[;]|lose a dice,2,if(simulation) { bonus(-1000); } else { attack(d * 2); self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1- self.dice; },,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1 - self.dice; sfx(~magic_gaindice~[;]~~[;]0.2);
Frogsword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE3,,GREEN,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Frogsword_upgraded,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE4,,GREEN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Deep Sea Howl,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,REQUIRE4,,PURPLE,change_power,doublerequirements,,,0,NO,NO,vanilla,,,,,,,,,,,,
Deep Sea Howl_upgraded,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,EVEN,,PURPLE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wicker Staff,Deal [fire]9 damage|Burn [fire]2 dice,2,attack(9[;] FIRE); inflict(FIRE[;] 2);,Blowtorch,COUNTDOWN,12,RED,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wicker Staff_weakened,Deal [fire]5 damage|Burn [fire]1 dice,2,attack(5[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,9,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wicker Staff_downgraded,Deal [fire]5 damage|Burn [fire]1 dice,2,attack(5[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,12,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Breath,Do [ice]4 damage|Inflict [ice]1 freeze,2,attack(4[;] ICE); inflict(ICE[;] 1);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Breath_upgraded,Do [ice]6 damage|Inflict [ice]1 freeze,2,attack(6[;] ICE); inflict(ICE[;] 1);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Ice Breath_downgraded,Do [sword]3 damage,2,attack(3);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Snowblower,[ice]<d6> dmg[;] +[ice]2 freeze|[gray](once per battle),1,attack(d[;] ICE); inflict(ICE[;] 2);,Flash Freeze,NORMAL|NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,YES,vanilla,,,,,,,,,,,,
Snowblower_upgraded,[ice]<d6> dmg[;] +[ice]4 freeze|[gray](once per battle),2,attack(d[;] ICE); inflict(ICE[;] 4);,Flash Freeze,NORMAL|NORMAL|NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Icecube,Inflict [ice]1 freeze|[gray](Reuseable),1,inflict(ICE);,Flash Freeze,EVEN,,BRIGHTCYAN,simplify,removereusable,,,-1,NO,NO,vanilla,1,,,,,,,,,,,
Ice Potion,[ice]8 damage[;] freeze all dice|[gray](once per battle),2,attack(8[;] ICE); inflict(ICE[;] ALL);,Refrigerator,COUNTDOWN,8,BRIGHTCYAN,threequartercountdown,change_power,,,0,NO,YES,vanilla,,,,,,,,,,,,
Ice Potion_downgraded,Do [ice]4 damage|[gray](once per battle),2,attack(4[;] ICE);,Refrigerator,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,YES,vanilla,,,,,,,,,,,,
Air Conditioner,[ice]<timesused> dmg[;] inflict [ice]1 freeze|Add +[ice]1 each use,2,attack(e.timesused + 1[;] ICE); inflict(ICE); bonus(1000);,Flash Freeze,EVEN,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,vanilla,,,,,,,,,,,,
Air Conditioner_upgraded,[ice]<timesused> dmg[;] inflict [ice]2 freeze|Add +[ice]1 each use,2,attack(e.timesused + 1[;] ICE); inflict(ICE[;] 2); bonus(1000);,Flash Freeze,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Snow Blast,Do [ice]6 damage for|each [ice]1 freeze on enemy,2,attack(getstatus(ICE) * 6[;] ICE);,Arctic Storm,COUNTDOWN,4,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Snow Blast_upgraded,Do [ice]7 damage for|each [ice]1 freeze on enemy,2,attack(getstatus(ICE) * 7[;] ICE);,Arctic Storm,COUNTDOWN,4,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Snow Blast_downgraded,Do [ice]4 damage for|each [ice]1 freeze on enemy,2,attack(getstatus(ICE) * 4[;] ICE);,Arctic Storm,COUNTDOWN,4,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cold Wind,Inflict [ice]1 freeze[;]|return both dice,1,inflict(ICE); givedice([d[;] d]);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,givedice([d[;] d]);
Cold Wind_upgraded,Inflict [ice]1 freeze[;]|return the dice,1,inflict(ICE); givedice(d);,Arctic Storm,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,givedice(d);
Cold Wind_downgraded,Inflict [ice]1 freeze,1,inflict(ICE);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Frozen Sword,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d[;]ICE); inflict(ICE[;] 2);,Flash Freeze,MAX5|MAX5,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,vanilla,1,,,,e.animate(~flashandshake~); inflictself(ICE[;] 1); sfx(~_ice~);,,,,,,,
Frozen Sword_upgraded,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d[;]ICE); inflict(ICE[;] 2);,Flash Freeze,NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,e.animate(~flashandshake~); inflictself(ICE[;] 1); sfx(~_ice~);,,,,,,,
Uncle,In 6 turns[;]|do [ice]20 damage,2,jinx(~Uncle~[;]~take [ice]%VAR% damage~[;]~Take [ice]%VAR% damage~[;]~attack(%VAR%[;] ICE); sfxdamage(null[;]%VAR%); sfx(\~_ice\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); sfx(~_thinghappens~);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Uncle_upgraded,In 5 turns[;]|do [ice]20 damage,2,jinx(~Uncle+~[;]~take [ice]%VAR% damage~[;]~Take [ice]%VAR% damage~[;]~attack(%VAR%[;] ICE); sfxdamage(null[;]%VAR%); sfx(\~_ice\~[;]\~\~[;]0.2);~[;]target[;]self[;]5[;]20); sfx(~_thinghappens~);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Uncle_downgraded,In 7 turns[;]|do [ice]20 damage,2,jinx(~Uncle-~[;]~take [ice]%VAR% damage~[;]~Take [ice]%VAR% damage~[;]~attack(%VAR%[;] ICE); sfxdamage(null[;]%VAR%); sfx(\~_ice\~[;]\~\~[;]0.2);~[;]target[;]self[;]7[;]20); sfx(~_thinghappens~);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Icicle,Do [ice]2 damage[;]|inflict [ice]1 freeze,1,attack(2[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Icicle_upgraded,Do [ice]3 damage[;]|inflict [ice]1 freeze,1,attack(3[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Icicle_downgraded,Do [ice]1 damage[;]|inflict [ice]1 freeze,1,attack(1[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Liquid Nitrogen,Do [ice]<d6> damage[;]|on 4[;] inflict [ice]1 freeze,2,attack(d[;] ICE); if(d == 4) { inflict(ICE[;] 1); },Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Liquid Nitrogen_upgraded,Do [ice]<d6> damage[;]|on even[;] inflict [ice]1 freeze,2,attack(d[;] ICE); if(d % 2 == 0) { inflict(ICE[;] 1); },Flash Freeze,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Liquid Nitrogen_downgraded,Do [ice]<d6> damage[;]|on 4[;] inflict [ice]1 freeze,2,attack(d[;] ICE); if(d == 4) { inflict(ICE[;] 1); },Flash Freeze,MAX4,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hailstone,Do [ice]6 damage|Freeze [ice]1 dice,2,attack(6[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hailstone_upgraded,Do [ice]8 damage|Inflict [ice]1 freeze,2,attack(8[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Hailstone_downgraded,Do [ice]3 damage|Freeze [ice]1 dice,2,attack(3[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wicker Gemstaff,Deal [ice]9 damage|Inflict [ice]2 freeze,2,attack(9[;] ICE); inflict(ICE[;] 2);,Flash Freeze,COUNTDOWN,12,BRIGHTCYAN,threequartercountdown,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wicker Gemstaff_weakened,Deal [ice]5 damage|Inflict [ice]1 freeze,2,attack(5[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Wicker Gemstaff_downgraded,Deal [ice]5 damage|Inflict [ice]1 freeze,2,attack(5[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,12,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Iced Latte,Self inflict [ice]1 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(ICE[;]1); sfx(~_ice~);,e.animate(~flashandshake~);,,,,,,,
Iced Latte_upgraded,Roll an extra 1|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); givedice(1);,,,,,,,
Iced Latte_downgraded,Self inflict [ice]2 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(ICE[;]2); sfx(~_ice~);,e.animate(~flashandshake~);,,,,,,,
Fire Age,Burn all dice,2,inflict(FIRE[;] ALL); bonus(1000);,Hellfire,REQUIRE1|REQUIRE1,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fire Age_upgraded,Burn all dice,2,inflict(FIRE[;] ALL); bonus(1000);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fire Age_downgraded,Burn all dice,2,inflict(FIRE[;] ALL); bonus(1000);,Hellfire,REQUIRE1|REQUIRE1|REQUIRE1|REQUIRE1,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Shatter,Do [fire]<d6> damage[;]|+[fire]3 if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d + 3)[;] FIRE); } else { attack((d)[;] FIRE); },Hellfire,NORMAL,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Shatter_upgraded,Do [fire]<d6> damage[;]|double if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d * 2)[;] FIRE); } else { attack((d)[;] FIRE); },Hellfire,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame Shatter_downgraded,Do [fire]<d6> damage[;]|+[fire]3 if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d + 3)[;] FIRE); } else { attack((d)[;] FIRE); },Hellfire,MAX3,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Pitchfork,Do [sword]<d6> damage[;]|[fire]Burn and [shock]Shock,1,attack(d); inflict(FIRE[;] 1); inflict(SHOCK[;] 1);,Blowtorch,MAX4,,RED,change_power,change_power,,,0,NO,NO,vanilla,1,,,,,,,,,,,
Pitchfork_upgraded,Do [sword]<d6> damage[;]|[fire]Burn and [shock]Shock,1,attack(d); inflict(FIRE[;] 1); inflict(SHOCK[;] 1);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Pitchfork_downgraded,Do [sword]<d6> damage,1,attack(d);,Blowtorch,REQUIRE5,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Furnace,[fire]4 damage + [fire]1 burn|[gray](Reuseable),1,attack(4[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,change_power,change_power,,,-1,NO,NO,vanilla,1,,,,,,,,,,,
Furnace_upgraded,[fire]6 damage + [fire]1 burn|[gray](Reuseable),1,attack(6[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Furnace_downgraded,[fire]2 damage + [fire]1 burn|[gray](Reuseable),1,attack(2[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,-1,NO,NO,vanilla,,,,,,,,,,,,
Fool's Frost,Inflict [vanish]Vanish,2,inflict(VANISH);,Cackle,COUNTDOWN,12,PINK,halfcountdown,change_function,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fool's Frost_downgraded,Inflict [ice]1 freeze,2,inflict(ICE);,Cackle,COUNTDOWN,12,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Fool's Frost_weakened,Inflict [ice]1 freeze,2,inflict(ICE);,Cackle,COUNTDOWN,6,PINK,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sinkhole,Inflict [weaken]3 weaken,2,inflict(WEAKEN[;] 3); bonus(-200);,Scream,COUNTDOWN,12,ORANGE,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sinkhole_downgraded,Inflict [weaken]2 weaken,2,inflict(WEAKEN[;] 2); bonus(-100);,Scream,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Sinkhole_upgraded,Inflict [weaken]4 weaken,2,inflict(WEAKEN[;] 4); bonus(-300);,Scream,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame War,Do [fire]5 damage|Burn [fire]1 dice,1,attack(5[;] FIRE); inflict(FIRE[;] 1);,Hellfire,REQUIRE1,,RED,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame War_upgraded,Do [fire]10 damage|Burn [fire]2 dice,1,attack(10[;] FIRE); inflict(FIRE[;] 2);,Hellfire,REQUIRE1|REQUIRE2,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Flame War_downgraded,Do [fire]5 damage,1,attack(5[;] FIRE);,Hellfire,REQUIRE1,,RED,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
System Shock,Do [shock]5 damage|Inflict [shock]1 shock,1,attack(5[;] SHOCK); inflict(SHOCK[;] 1);,Zap,REQUIRE1,,YELLOW,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
System Shock_upgraded,Do [shock]10 damage|Inflict [shock]2 shock,1,attack(10[;] SHOCK); inflict(SHOCK[;] 2);,Zap,REQUIRE1|REQUIRE2,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
System Shock_downgraded,Do [shock]5 damage,1,attack(5[;] SHOCK);,Zap,REQUIRE1,,YELLOW,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Gemstone Staff?,Do [ice]6 damage|Inflict [ice]1 freeze,2,attack(6[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,reducesize,change_power,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Gemstone Staff?_weakened,Do [ice]3 damage|Inflict [ice]1 freeze,1,attack(3[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Gemstone Staff?_downgraded,Do [ice]3 damage|Inflict [ice]1 freeze,2,attack(3[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,alternateversion|vanilla,,,,,,,,,,,,
Cold War,Do [ice]5 damage|Inflict [ice]1 freeze,1,attack(5[;] ICE); inflict(ICE[;] 1);,Flash Freeze,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cold War_upgraded,Do [ice]10 damage|Inflict [ice]2 freeze,1,attack(10[;] ICE); inflict(ICE[;] 2);,Flash Freeze,REQUIRE1|REQUIRE2,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Cold War_downgraded,Do [ice]5 damage,1,attack(5[;] ICE);,Flash Freeze,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,vanilla,,,,,,,,,,,,
Combat Roll@jesterwarrior,Reroll a dice,2,if(simulation){ if(d < 5){ bonus(500); } else { bonus(50); } } else { givedice(); },Random Roll,NORMAL,,GRAY,change_power,complicate,,,0,YES,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Combat Roll@jesterwarrior_upgraded,Reroll the dice[;] get a|higher value than before,2,if(simulation) { bonus(-1000); } else { if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); } },Random Roll,MAX5,,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Cornucopia,Gain a random blessing,2,var randomstatus = rand([SHIELD[;]REDUCE[;]DODGE]); var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REDUCE) randomstatus = ~shield~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Time Stop,REQUIRE6,,GREEN,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
