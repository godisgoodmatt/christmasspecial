Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Flaming Sword,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d[;]FIRE); inflict(FIRE[;] 2);,,MAX5|MAX5,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,if(!self.usecpuinsteadofdice) { self.addstatus(FIRE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(FIRE[;] 1); sfx(~_fire~); },,,,,,,
Flaming Sword_upgraded,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d[;]FIRE); inflict(FIRE[;] 2);,,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,if(!self.usecpuinsteadofdice) { self.addstatus(FIRE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(FIRE[;] 1); sfx(~_fire~); },,,,,,,
Fruit Bowl,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice),1,if(getstatusself(~freetrades~) > 0) { givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Fruit Bowl_upgraded,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice)|[gray](Reuseable),1,if(getstatusself(~freetrades~) > 0) { givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Enchanted Shield,Add [shield]<d6> shield|(Cost [mana]2[]: +[shield]<d6> shield),1,if(getstatusself(~freetrades~) > 0) { inflictself(SHIELD[;] d * 2); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); inflictself(SHIELD[;] d * 2); } else { inflictself(SHIELD[;] d); },,MAX3,,ORANGE,increaserange,decreaserange,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Sun Beam,Do [sword]5 damage|(Cost [mana]2[]: double damage),1,if(getstatusself(~freetrades~) > 0) { attack(10); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attack(10); } else { attack(5); },,EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Magnifying Glass,Double dice value|(Cost [mana]1[]: instead[;] triple),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA|1); givedice(d * 3| ~combinedice~); } else { givedice(d * 2| ~combinedice~); } ,Clone Device,MAX3,,BRIGHTCYAN,change_requirements,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Magnifying Glass_upgraded,Double dice value|(Cost [mana]1[]: instead[;] triple),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA|1); givedice(d * 3| ~combinedice~); } else { givedice(d * 2| ~combinedice~); } ,Clone Device,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Stew Pot,Do [sword]1 damage[;] reroll dice|(If [mana]>=6: return 5 or 6),1,if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Stew Pot_upgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=4: return 5 or 6),1,if(getstatusself(MANA) >= 4 # getstatusself(~freetrades~) >= 1) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Stew Pot_downgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=8: return 5 or 6),1,if(getstatusself(MANA) >= 8 # getstatusself(~freetrades~) >= 1) { givedice(rand([5[;]6])); } else { givedice(); } attack(1);,,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Moon Beam,Do [sword]5 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7 # getstatusself(~freetrades~) >= 1) { attack(10); } else { attack(5); },,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Moon Beam_upgraded,Do [sword]7 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7 # getstatusself(~freetrades~) >= 1) { attack(14); } else { attack(7); },,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Northern Lights,Get 2x<d6>s next turn|(If [mana]>=5: get 3 instead),1,if(getstatusself(MANA) >= 5 # getstatusself(~freetrades~) >= 1) { inflictself(~stash~+d[;]3); inflictself(~illuminate~); } else { inflictself(~stash~+d[;]2); inflictself(~illuminate~); },,NORMAL,,PURPLE,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Northern Lights_upgraded,Get 4x<d6>s next turn|(If [mana]>=5: get 6 instead),1,if(getstatusself(MANA) >= 5) { inflictself(~stash~+d|6); inflictself(~illuminate~); } else { inflictself(~stash~+d|4); inflictself(~illuminate~); } ,,DOUBLES|DOUBLES,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sunburn,Do [fire]<d6> damage|(Cost [mana]1[]: burn a dice),1,if(getstatusself(~freetrades~) > 0) { attack(d[;] FIRE); inflict(FIRE[;] 1); } else if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); attack(d[;] FIRE); inflict(FIRE[;] 1); } else { attack(d[;] FIRE); },Ember,MIN4,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Sunburn_upgraded,Do [fire]<d6> damage|(Cost [mana]1[]: burn a dice),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA|1); attack(d | FIRE); inflict(FIRE| 1); } else { attack(d | FIRE); } ,Ember,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(getstatusself(MANA) >= 1) { removestatusself(MANA|1); }
Cold Snap,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2 # getstatusself(~freetrades~) > 0) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Cold Snap_upgraded,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2 # getstatusself(~freetrades~) > 0) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Summer Solstice,Do [sword]<d6> damage|(Cost [mana]4[]: triple damage),1,if(getstatusself(~freetrades~) > 0) { attack(d * 3); } else if(getstatusself(MANA) >= 4) { removestatusself(MANA[;]4); attack(d * 3); } else { attack(d); },Hellfire,EVEN|EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Winter Solstice,Do [sword]<d6> damage|(If [mana]>=12: triple damage),1,if(getstatusself(MANA) >= 12 # getstatusself(~freetrades~) >= 1) { attack(d * 3); } else { attack(d); },,ODD|ODD,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Moonlight Spear,Do [sword]10 damage|(If [mana]>=8: do double),1,if(getstatusself(MANA) >= 8 # getstatusself(~freetrades~) >= 1) { attack(20); } else { attack(10); },Magic Six,REQUIRE6,,PURPLE,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Moonlight Spear_upgraded,Do [sword]10 damage|(If [mana]>=6: do double),1,if(getstatusself(MANA) >= 6) { attack(20); } else { attack(10); } ,Magic Six,REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Thistle,Gain [thorns]1 thorns|(Cost [mana]1[]: +[thorns]1 extra),1,if(getstatusself(~freetrades~) > 0) { inflictself(THORNS[;] 2); } else if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); inflictself(THORNS[;] 2); } else { inflictself(THORNS[;] 1); },Plasma Gun,ODD,,GREEN,simplify,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Blue Ocean,Do [sword]<d6> damage|(Cost [mana]2[]: heal 3),1,if(getstatusself(~freetrades~) > 0) { attackself(-3); attack(d); sfx(~_heal~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attackself(-3); attack(d); sfx(~_heal~[;]~~[;]0.2); } else { attack(d); } sfxdamage(target[;]d);,Regenerate,MAX4,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Frozen Sword,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d[;]ICE); inflict(ICE[;] 2);,Flash Freeze,MAX5|MAX5,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,if(!self.usecpuinsteadofdice) { self.addstatus(ICE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(ICE[;] 1); sfx(~_ice~); },,,,,,,
Frozen Sword_upgraded,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d[;]ICE); inflict(ICE[;] 2);,Flash Freeze,NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,if(!self.usecpuinsteadofdice) { self.addstatus(ICE[;] 1); },e.animate(~flashandshake~); if(self.usecpuinsteadofdice) { inflictself(ICE[;] 1); sfx(~_ice~); },,,,,,,
Winds of Winter,Do [sword]1 damage for each|[mana]1 mana you have,1,if(getstatusself(MANA) > 0) {attack(getstatusself(MANA)); },,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Wrong Answer,Do [sword]1 damage[;] and|heal completely,2,attack(1); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]1);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_upgraded,Do [sword]3 damage[;] and|heal completely,2,attack(3); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]3);,,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_downgraded,Heal completely,2,attackself(-self.maxhp); target.removestatus(ALL);,,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dealmaker_downgraded,Make next mana trade free,1,inflictself(~manakeep~); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,combination:ht,1,,,,,,,,,,,
Time Edge_downgraded,Do [sword]6 damage,1,attack(6); sfxdamage(target[;]6);,,COMBINATION,,PINK,change_power,change_power,,,0,NO,NO,combination:tt,,,,,,,,,,,,
Blessed Blade_downgraded,Do [sword]6 damage,1,attack(6); sfxdamage(target[;]6);,,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,combination:hh,,,,,,,,,,,,
Poinsettia,[sword]3[comma] chance 25%: add [poison]2|(If [mana]>=3[]: +50% chance),1,attack(d);var odds = 25;if(getstatusself(MANA) >= 3 # getstatusself(~freetrades~) >= 1) odds = 75;if(getstatusself(~luck~) > 0) odds += odds * getstatusself(~luck~);if(getstatusself(~luck+~) >= 0) odds = 100;if(chance(odds)){self.textparticle(~Success!~);inflict(POISON|2);sfx(~_poison~[;]~~[;]0.2);}attack(d);sfxdamage(target|d);,,MAX3,,PURPLE,increaserange,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Poinsettia,[sword]3[comma] chance 25%: add [poison]2|(If [mana]>=3[]: +50% chance),1,attack(d);var odds = 25;if(getstatusself(MANA) >= 3 # getstatusself(~freetrades~) >= 1) odds = 75;if(getstatusself(~luck~) > 0) odds += odds * getstatusself(~luck~);if(getstatusself(~luck+~) >= 0) odds = 100;if(chance(odds)){self.textparticle(~Success!~);inflict(POISON|2);sfx(~_poison~[;]~~[;]0.2);}attack(d);sfxdamage(target|d);,,MAX3,,PURPLE,increaserange,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Dream Luck,[sword]<d6>[comma] chance 25% to double|(Cost [mana]3[]: +50% chance),1,if(getstatusself(~freetrades~) > 0) { attack(d * 2); sfxdamage(target|d * 2);} else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attack(d * 2); sfxdamage(target|d * 2); } else { attack(d);sfxdamage(target|d);  },,ODD,,RED,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Magic Hug,Cost [mana]<d6>[]: [sword]<double> damage,1,if(getstatusself(~freetrades~) > 0) { attack(d * 2); sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d * 2+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();} else if(getstatusself(MANA) >= d) { removestatusself(MANA[;]d); attack(d * 2); sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d * 2+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();} else {target.textparticle(~No effect!~);},,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Honey Pot,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 3 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Honey Pot_upgraded,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 4 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,witchonly,,,,,,,,,,,,
Next Tome,Get the second spellbook|Current spellbook: <var:currentspellbook>,1,sfx(~_thinghappens~); var booknum = self.getvar(~currentspellbook~); for(i in 1...7) { if(Spellbook.isempty(i)) { self.setvar(~spellbook~+booknum+~slot~+i[;]~Empty slot~); } else { self.setvar(~spellbook~+booknum+~slot~+i[;]Spellbook.spellname(i)); } } for(eq in self.equipment){ if(eq.name == e.name){ eq.animate(~flashandshake~); } } self.setvar(~currentspellbook~[;]self.getvar(~currentspellbook~) + 1); if(self.getvar(~currentspellbook~) == 4) { self.setvar(~currentspellbook~[;]1); } booknum = self.getvar(~currentspellbook~); for(q in 1...7) { if(self.getvar(~spellbook~+booknum+~slot~+q) != ~Empty slot~) { Spellbook.changespellflash(q[;]self.getvar(~spellbook~+booknum+~slot~+q)); } else { Spellbook.erase(q); } },Time Stop,NORMAL,,GRAY,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|weakenavoid|curseavoid|altpoisonavoid|shockavoid|cannotsteal,1,inflictself(~silencenextvolume~);,,if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.hasstatus(SILENCE)) { e.availablethisturn = false; e.unavailabletext = ~Unavailable~; e.unavailabledetails = [~Break silence to unlock~]; }if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },,,,,e.preventdefault = true; e.maintainfury = true;,
Fogged Mirror,In [jinx]2 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Fogged Mirror_upgraded,In [jinx]2 turns[;] +1 dice|,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror_downgraded,In [jinx]3 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]3[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Sludge Spear,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~[;]~~[;]0.2); sfx(~_magic~);,Poison Arrow,REQUIRE6,,PURPLE,change_power,doublerequirements,,none,0,NO,NO,gb,1,,,,,,,,,,,
Sludge Spear_upgraded,Inflict [poison]5 poison,1,inflict(POISON[;]5); sfx(~_poison~[;]~~[;]0.2); sfx(~_magic~);,Poison Arrow,REQUIRE6,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Transporter,Duplicate part of a dice,1,var parts = split(d); givedice([d[;]parts[0]]);,Clone Device,MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Transporter_upgraded,Duplicate the most|part of a dice,1,var parts = split(d); if(parts[0] > parts[1]){ givedice([d[;]parts[0]]); } else{ givedice([d[;]parts[0]]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Transporter_downgraded,Duplicate a small|part of a dice,1,var parts = split(d); if(parts[0] < parts[1]){ givedice([d[;]parts[0]]); } else{ givedice([d[;]parts[0]]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Manic Repeater,Do [sword]1 dmg per [mana]1 mana|(Cost [mana]1[]: repeat it),1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~); if(getstatusself(MANA) >= 1){ removestatusself(MANA[;]1); },Fury,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:666,2,,,,,,,,if(getstatusself(FURY) < 1) { if(getstatusself(MANA) >= 1) { var blankskill = new elements.Skill(~Against All Odds_old~); blankskill.script = ~self.addstatus(FURY[;]1)~; var act = new motion.actuators.SimpleActuator(null[;] 0.5[;] null); act._repeat = 1; act.onRepeat(blankskill.execute[;] [self[;]target]); act.move(); } },,,
Manic Repeater_downgraded,Do [sword]1 damage|per each [mana]1 mana,1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~);,Fury,COMBINATION,,RED,twothirdcountdown,change_power,,,0,NO,NO,combination:666,,,,,,,,,,,,
Dragon Dust,Do [sword]4 damage[comma] activate|another Dragon Dust,1,attack(4); sfxdamage(target[;]4); var selfequipment = []; for (eq in self.equipment){ if(eq.name == e.name && eq.ready){ selfequipment.push(eq); } } if(selfequipment.length > 0){ sfx(~jester_snap~[;]~~[;]0.1); var eq = rand(selfequipment) ; eq.animate(~snap~); delay(eq.remainingcountdown * 0.3); var mydice = new elements.Dice(); mydice.basevalue = d; eq.assigndice(mydice); mydice.assigned = eq; self.dicepool.push(mydice); eq.doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] eq.assigneddice[;] 0.2); },,ODD,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Dragon Dust_upgraded,Do [sword]4[comma] reroll dice[comma] activate|another Dragon Dust,1,attack(4); sfxdamage(target[;]4); givedice(); var selfequipment = []; for (eq in self.equipment){ if(eq.name == e.name && eq.ready){ selfequipment.push(eq); } } if(selfequipment.length > 0){ sfx(~jester_snap~[;]~~[;]0.1); var eq = rand(selfequipment) ; eq.animate(~snap~); delay(eq.remainingcountdown * 0.3); var mydice = new elements.Dice(); mydice.basevalue = d; eq.assigndice(mydice); mydice.assigned = eq; self.dicepool.push(mydice); eq.doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] eq.assigneddice[;] 0.2); },,ODD,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dragon Dust_downgraded,Do [sword]4 damage,1,attack(4); sfxdamage(target[;]4);,,ODD,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Glass Dust,Do [sword]5 damage|(Start turn: if prepared 3 at|once[;] +1 dice this fight),1,attack(5); sfxdamage(target[;]5);,Infinity Mirror,EVEN,,PINK,change_power,complicate,,,0,NO,NO,,1,,,self.setvar(~mirrordust~[;]self.getvar(~mirrordust~) + 1); if(self.getvar(~mirrordust~) == 3){ self.extradice++; sfx(~magic_gaindice~); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } },if(self.getvar(~mirrordust~) == 3){ self.setvar(~mirrordust~[;]0); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } }self.setvar(~mirrordust~[;]0);,,,,,,,
Glass Dust_upgraded,Do [sword]7 damage|(Start turn: if prepared 3 at|once[;] +1 dice this fight),1,attack(7); sfxdamage(target[;]7);,Infinity Mirror,EVEN,,PINK,,,,,0,NO,NO,,,,,self.setvar(~mirrordust~[;]self.getvar(~mirrordust~) + 1); if(self.getvar(~mirrordust~) == 3){ self.extradice++; sfx(~magic_gaindice~); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } },if(self.getvar(~mirrordust~) == 3){ self.setvar(~mirrordust~[;]0); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } }self.setvar(~mirrordust~[;]0);,,,,,,,
Ashtray,Do [sword]5 damage|[85%](Cost [mana]1[]: cast a random spell),1,attack(5); sfxdamage(target[;]5); sfx(~_mana~[;]~~[;]0.1); if(self.hasstatus(~freetrades~)){ var eq = self.getskillcard(); var mydice = new elements.Dice(); var valuearray = []; for(i in 1...7){ if(!Spellbook.isempty(i)){ valuearray.push(i); } } mydice.basevalue = rand(valuearray); mydice.x = -200; mydice.y = -200; mydice.blind = true; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); } else if(self.hasstatus(MANA)){ var eq = self.getskillcard(); var mydice = new elements.Dice(); var valuearray = []; for(i in 1...7){ if(!Spellbook.isempty(i)){ valuearray.push(i); } } mydice.basevalue = rand(valuearray); mydice.x = -200; mydice.y = -200; mydice.blind = true; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); removestatusself(MANA[;]1); },,ODD,,PINK,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Recurring Winds,Activate all spells that was|used when this is prepared,1,sfx(~_fury~); if (!simulation) { var width = []; for (i in 0...(3840 - 792)) { width.push(i); } var long = 0.2; var rewinditem = self.getvar(~recurringlists~); for(i in 0...rewinditem.length) { if(rewinditem[i].name != e.name && rewinditem[i].equippedby == self) { rewinditem[i].x = rand(width); rewinditem[i].y = (self.isplayer ? (e.castdirection == 1 ? -e.height : 2160) : (e.castdirection == 1 ? 2160 : -e.height)); rewinditem[i].show = true; var diceywind = []; if(rewinditem[i].slots.length > 0 && rewinditem[i].slots.indexOf(~COUNTDOWN~) != 0) { for(q in 0...rewinditem[i].assigneddice.length) { diceywind.push(rewinditem[i].assigneddice[q].basevalue); }rewinditem[i].removedice(); if(rewinditem[i].slots.length > 0) { for(aw in 0...rewinditem[i].slots.length) { var mydice = new elements.Dice(); mydice.basevalue = diceywind[aw]; rewinditem[i].assigndice(mydice); trace(~1!~); mydice.assigned = rewinditem[i]; self.dicepool.push(mydice); mydice.canbedragged = false; } } } else { rewinditem[i].remainingcountdown = 0; }rewinditem[i].doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] rewinditem[i].assigneddice[;] long); long += 0.2; trace(rewinditem[i].castdirection); } } },Fury,COUNTDOWN,25,PURPLE,twothirdcountdown,noeffect,,,0,YES,NO,,2,,,,,,,,,,,
Blessed Bowl,Gain a random blessing|[90%](If [mana]>=6[]: get a better blessing),1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatuslist = [SHIELD[;]THORNS[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]; }else { randomstatuslist = [SHIELD[;]THORNS[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]; } if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { randomstatuslist.remove(SHIELD); randomstatuslist.remove(REEQUIPNEXT); randomstatuslist.remove(THORNS); randomstatuslist.remove(~manakeep~); } var randomstatus = rand(randomstatuslist); var a = 1; if (randomstatus == THORNS) a = 3; if (randomstatus == SHIELD) a = 4; if (randomstatus == MANA) a = 3; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; if(randomstatus == ~doublecast~) randomstatus = ~MANA~; if(randomstatus == ~upgradecast~) randomstatus = ~MANA~; if(randomstatus == ~manakeep~) randomstatus = ~MANA~; if(randomstatus == ~manaboost~) randomstatus = ~MANA~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,witchonly|combination:23,1,,,,,,,,,,,
Little Pot,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Power Up,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Little Pot_upgraded,The next time you spend [mana][comma]|it will increase your mana,1,inflictself(~manakeep+~); inflictself(MANA[;]2); sfx(~_mana~);,Power Up,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Little Pot_downgraded,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Power Up,MIN4,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Double Cast,Cast a spell from|slot <d6> twice,1,if(!Spellbook.isempty(d)){ inflictself(~doublecast~); sfx(~_mana~[;]~~[;]0.1); var eq = self.getskillcard(); var mydice = new elements.Dice(); mydice.basevalue = d; mydice.x = -200; mydice.y = -200; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); },,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Double Cast_upgraded,Cast a spell from|slot <d6> thrice,1,if(!Spellbook.isempty(d)){ inflictself(~doublecast~[;]2); sfx(~_mana~[;]~~[;]0.1); var eq = self.getskillcard(); var mydice = new elements.Dice(); mydice.basevalue = d; mydice.x = -200; mydice.y = -200; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); },,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,witchonly,,,,,,,,,,,,
Double Cast_downgraded,Place two copies of the|next spell you cast,1,inflictself(~doublecast~); sfx(~_mana~[;]~~[;]0.1);,,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,witchonly,,,,,,,,,,,,
Hotplate,Gain [mana]1 extra mana when|you gain mana this turn,1,inflictself(~manaboost~); sfx(~_mana~[;]~~[;]0.1);,,REQUIRE1,,RED,simplify,doublerequirements,,,0,YES,NO,,1,,,,,,,,,,,
Confetti,[90%]Gain [recycle]Re-equip[][comma]|[90%][potion]Keep_Mana[][comma] [confuse]Double_Cast,1,inflictself(REEQUIPNEXT); inflictself(~manakeep~); inflictself(~doublecast~); sfx(~_magic~[;]~~[;]0.1);,,COUNTDOWN,10,PURPLE,halfcountdown,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Confetti_downgraded,[90%]Gain [recycle]Re-equip[][comma]|[90%][potion]Keep_Mana[][comma] or [confuse]Double_Cast,1,var randstatus = rand([REEQUIPNEXT[;]~manakeep~[;]~doublecast~]); inflictself(randstatus); sfx(~_magic~[;]~~[;]0.1);,,COUNTDOWN,10,PURPLE,halfcountdown,change_power,,,0,YES,NO,,,,,,,,,,,,,
Luck Omen,Do [sword]5 damage. If this is|the final blow[;] stash unused|[mana] mana for next fight,1,attack(5); sfxdamage(target[;]5); if(target.hp <= 0){ self.setvar(~unusedmana~[;]getstatusself(MANA)); removestatusself(MANA[;]getstatusself(MANA)); },Regenerate,EVEN,,GREEN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Winter Wings,If [mana]>=6[;] dodge next attack|(If not used: get [mana]1),1,if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1){ inflictself(DODGE); sfx(~_dodge~[;]~~[;]0.2); } else { self.textparticle(~No effect!~); },Teleport,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,,1,,,,,,,if(e.timesused <= 0){ inflictself(MANA[;]1); } else { e.timesused = 0; },,,,
Winter Wings_upgraded,If [mana]>=6[;] dodge next attack|(If not used: get [mana]2),1,if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1){ inflictself(DODGE); sfx(~_dodge~[;]~~[;]0.2); } else { self.textparticle(~No effect!~); },Teleport,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,,,,,,,,,if(e.timesused <= 0){ inflictself(MANA[;]2); } else { e.timesused = 0; },,,,
Sultry Winds,Do [sword]5 damage for each|[mana]3 mana you have,1,var mana = getstatusself(MANA); var potassum = 0; var totaldamage = 0; for(i in 0 ... mana){ potassum++; if(potassum == 3){ potassum -= 3; totaldamage += 5; } } attack(totaldamage); sfxdamage(target[;]totaldamage);,,ODD,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Sultry Winds_upgraded,Do [sword]6 damage for each|[mana]3 mana you have,1,var mana = getstatusself(MANA); var potassum = 0; var totaldamage = 0; for(i in 0 ... mana){ potassum++; if(potassum == 3){ potassum -= 3; totaldamage += 6; } } attack(totaldamage); sfxdamage(target[;]totaldamage);,,ODD,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sultry Winds_downgraded,Do [sword]3 damage for each|[mana]3 mana you have,1,var mana = getstatusself(MANA); var potassum = 0; var totaldamage = 0; for(i in 0 ... mana){ potassum++; if(potassum == 3){ potassum -= 3; totaldamage += 3; } } attack(totaldamage); sfxdamage(target[;]totaldamage);,,ODD,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dramatic Stab,If [mana]>=24: Take final [heart]5 hp|from vampires,1,if(target.hp <= 5 && getstatus(VAMPIRE) > 0 && getstatusself(MANA) >= 24) { removestatus(VAMPIRE[;] ALL); attack(5); } else{ attack(5); target.textparticle(~No effect!~); },Heat Ray,NORMAL,,PINK,change_power,noeffect,vampire,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Dramatic Stab_upgraded,If [mana]>=18: Take final [heart]5 hp|from vampires,1,if(target.hp <= 5 && getstatus(VAMPIRE) > 0 && getstatusself(MANA) >= 18) { removestatus(VAMPIRE[;] ALL); attack(5); } else{ attack(5); target.textparticle(~No effect!~); },Heat Ray,NORMAL,,PINK,change_power,noeffect,vampire,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chilly Pepper,if [mana] is even[;] [ice]6 dmg + [ice]1|(get [mana]1 on countdown),1,if(getstatusself(MANA) % 2 == 0 # getstatusself(~freetrades~) >= 1){ attack(6[;]ICE); inflict(ICE); sfxdamage(target[;]6); sfx(~_ice~[;]~~[;]0.2); },Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Chilly Pepper_upgraded,if [mana] is even[;] [ice]8 dmg + [ice]1|(get [mana]1 on countdown),1,if(getstatusself(MANA) % 2 == 0 # getstatusself(~freetrades~) >= 1){ attack(8[;]ICE); inflict(ICE); sfxdamage(target[;]8); sfx(~_ice~[;]~~[;]0.2); },Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Chilly Pepper_downgraded,if [mana] is even[;] inflict [ice]1|(get [mana]1 on countdown),1,if(getstatusself(MANA) % 2 == 0 # getstatusself(~freetrades~) >= 1){ inflict(ICE); sfx(~_ice~[;]~~[;]0.2); },Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Enchanted Armor,Add [shield]<d6> shield|(If [mana]>=3[]: reduce by [reduce]1[]),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 3) { inflictself(REDUCE[;]1); } inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,,MAX3,,ORANGE,add1,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Candy Steal,Recover [heal]<d6> health|(Cost [mana]2[]: return dice),1,if(getstatusself(~freetrades~) > 0) { givedice(d); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); givedice(d); } attackself(-d); sfx(~_heal~);,,MAX3,,GREEN,change_power,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Candy Steal_upgraded,Recover [heal]<d6> health|(Cost [mana]2[]: return dice)|[gray](Reuseable),1,if(getstatusself(~freetrades~) > 0) { givedice(d); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); givedice(d); } attackself(-d); sfx(~_heal~);,,MAX3,,GREEN,change_power,decreaserange,,,2,YES,NO,,,,,,,,,,,,,
Wide Divide,Split the dice in two|(Cost [mana]2[]: in 3 instead),1,if(getstatusself(~freetrades~) >= 1) { givedice(split(d[;] 3)[;] ~splitdice~); } else if(getstatusself(MANA) >= 2) { givedice(split(d[;] 3)[;] ~splitdice~); removestatusself(MANA[;]2); } else { givedice(split(d[;] 2)[;] ~splitdice~); },,MIN4,,GREEN,simplify,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Winter Eclipse,Do [sword]<d6> damage|(Cost [mana]4[]: instead[;] multiply|dice and do as damage),1,if(getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); } else if(getstatusself(MANA) >= 4 # getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); removestatusself(MANA[;]4); } else { attack(d); sfxdamage(d); },Reversal,EVEN|EVEN,,ORANGE,simplify,change_power,,,0,NO,NO,,2,,,,,,,,,,,
Winter Eclipse_downgraded,Do [sword]<d6> damage|(Cost [mana]4[]: instead[;] multiply|dice and do as damage),1,if(getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); } else if(getstatusself(MANA) >= 4 # getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); removestatusself(MANA[;]4); } else { attack(d); sfxdamage(d); },Reversal,REQUIRE4|REQUIRE4,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cold Burn,Do [sword]6 damage|(Cost [mana]2: inflict [ice]1 + [fire]1[]),1,if(getstatusself(~freetrades~) > 0) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); removestatusself(MANA[;]2); } attack(6); sfxdamage(target[;]6);,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:th,1,,,,,,,,,,,
Christmas Star,[sword]<double> dmg[;] disable current|spellbook for [nospellbook]3 turns,1,attack(d * 2); sfxdamage(target[;]d * 2); inflictself(~bookban~+self.getvar(~currentspellbook~)[;]2);,,MAX5,,PURPLE,simplify,complicate,,,0,NO,NO,witchonly,1,,,,,,,,,,,
Vampire Blade,Do [sword]4. If this defeats without|excess[;] heal completely,1,attack(4); sfxdamage(target[;]4); if(target.hp == 0){ attacself(-self.maxhp); sfx(~_heal~[;]~~[;]0.2); },Regenerate,COUNTDOWN,30,GREEN,twothirdcountdown,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Vampire Blade_downgraded,Do [sword]1. If this defeats without|excess[;] heal completely,1,attack(1); sfxdamage(target[;]1); if(target.hp == 0){ attacself(-self.maxhp); sfx(~_heal~[;]~~[;]0.2); },Regenerate,COUNTDOWN,30,GREEN,twothirdcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Raisin,Heal [heal]2. If above max hp[;]|convert excess to mana,1,if(self.maxhp - self.hp == 0) { inflictself(MANA[;] 2); sfx(~_mana~); } else if(self.maxhp - self.hp == 1) { inflictself(MANA[;] 1); attackself(-1); sfx(~_mana~); sfx(~_heal~); } else { attackself(-2); sfx(~_heal~); },Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Raisin_upgraded,Heal [heal]3. If above max hp[;]|convert excess to mana,1,if(self.maxhp - self.hp == 0) { inflictself(MANA[;] 3); sfx(~_mana~); } else if(self.maxhp - self.hp == 1) { inflictself(MANA[;] 2); attackself(-1); sfx(~_mana~); sfx(~_heal~); } else if(self.maxhp - self.hp == 2) { inflictself(MANA[;] 1); attackself(-2); sfx(~_mana~); sfx(~_heal~); } else { attackself(-3); sfx(~_heal~); },Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Raisin_downgraded,Heal [heal]1 health,1,attackself(-1);,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Wicked Contract,All mana-using bonuses|are free for this turn,1,inflictself(~freetrades~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:tttt,1,,,,,,,,,,,
Wicked Contract_downgraded,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:tttt,,,,,,,,,,,,
Wicked Contract_weakened,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:tttt,,,,,,,,,,,,
Overwinter,Upgrade the next|spell you cast,1,inflictself(~upgradecast~); sfx(~_mana~);,Regenerate,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,witchonly|fd,1,,,,,,,,,,,
Echo Sword,Do [weaken]<d6> dmg[;] +[weaken]2 weaken|([weaken]Weaken[] the first spell|you cast on each turn),1,attack(d[;]WEAKEN); inflict(WEAKEN[;] 2); sfx(~_metals~); sfx(~_weaken~[;]~~[;]0.2); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,MAX5|MAX5,,ORANGE,increaserange,complicate,,,0,NO,NO,witchonly,1,,,,e.animate(~flashandshake~); inflictself(~weakencast~[;] 1); sfx(~_weaken~); self.symbolparticle(WEAKEN);,,,,,,,
Buzzing Sword,Do [shock]<d6> dmg[;] +[shock]2 shock|([shock]Shock[] the first spell|you cast on each turn),1,attack(d[;]SHOCK); inflict(SHOCK[;] 2); sfx(~_metals~); sfx(~_shock~[;]~~[;]0.2); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,MAX5|MAX5,,YELLOW,increaserange,complicate,,,0,NO,NO,witchonly,1,,,,e.animate(~flashandshake~); inflictself(~shockcast~[;] 1); sfx(~_shock~); self.symbolparticle(SHOCK);,,,,,,,
Five Leaf Clover,Double success odds|(If [mana]>=5: odds are 100%),1,if(getstatusself(MANA) >= 5 # getstatusself(~freetrades~) >= 1) { inflictself(~luck+~); } else { inflictself(~luck~); } sfx(~_mana~[;]~~[;]0.2);,,ODD,,GREEN,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Five Leaf Clover_upgraded,Double success odds|(If [mana]>=3: odds are 100%),1,if(getstatusself(MANA) >= 3 # getstatusself(~freetrades~) >= 1) { inflictself(~luck+~); } else { inflictself(~luck~); } sfx(~_mana~[;]~~[;]0.2);,,ODD,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Hellebore,Do [sword]<d6> damage|33% chance to get [mana]3,1,var odds = 33; if(getstatusself(~luck~) > 0){ odds += 33 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(MANA[;]3); sfx(~_mana~[;]~~[;]0.2); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Hellebore_upgraded,Do [sword]<d6> damage|75% chance to get [mana]3,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds += 75 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(MANA[;]3); sfx(~_mana~[;]~~[;]0.2); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Hellebore_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Hippeastrum,In [jinx]6 turns[comma] do [fire]20 dmg|(Cost [mana]2: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0) { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]4[;]20); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]4[;]20); } else { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); } sfx(~_mana~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,2,,,,,,,,,,,
Hippeastrum_upgraded,In [jinx]6 turns[comma] do [fire]20 dmg|(Cost [mana]3: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0) { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]3[;]20); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]3[;]20); } else { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); } sfx(~_mana~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Hippeastrum_downgraded,In [jinx]6 turns[comma]|do [fire]20 damage,1,jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); sfx(~_mana~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Nimble Hands,Borrow enemy equipment[;]|permanently if not defeated,2,sfx(~useitem~); if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); self.setvar(~nimblehandsstolencard~[;]randomequipment); inflictself(~nimblehandsstatus~); giveequipment(randomequipment.name + randomequipment.namemodifier[;] false[;] true[;] e); } } } else { bonus(1000 + (self.dicepool.length * 500)); delay(0.2); },,ODD,,GREEN,simplify,complicate,,,0,NO,YES,cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Unwanted Present,Confuse enemy,1,inflict(CONFUSE); sfx(~_blind~[;]~~[;]0.2);,,REQUIRE1,,ORANGE,simplify,doublerequirements,,,0,NO,NO,,1,,,,,,,,,,,
Escape Plan,Flee immediately|(Shock [shock]1 on countdown),2,flee(); bonus(1000); sfx(~flee~);,Jetpack,COUNTDOWN,35,YELLOW,threequartercountdown,change_power,,,0,YES,NO,,,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Heater,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_upgraded,Weaken all equipment|that are cyan,1,inflict(~heater+~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_downgraded,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,REQUIRE3|REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Escape Plan_downgraded,Flee immediately,2,flee(); bonus(1000); sfx(~_thinghappens~);,Jetpack,COUNTDOWN,35,YELLOW,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Bright Flash,Make enemy weak to fire|[gray](once per battle),2,inflict(~fireweakness~); sfx(~_curse~[;]~~[;]0.2);,Hellfire,EVEN,,RED,simplify,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Sparkler,Burns [fire]1 dice[comma]|flips random dice,1,inflict(FIRE); sfx(~_fire~[;]~~[;]0.2); if(!simulation){ var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(7 - availdice[0].basevalue[;] self.screenposition()); } } else { delay(0.5); },Hellfire,EVEN,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Light Strike,Do [shock]<d6> damage[comma]|inflict [shock]2 shock,2,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Light Strike_upgraded,Do [shock]<d6> damage[comma]|inflict [shock]3 shock,2,attack(d[;]SHOCK); inflict(SHOCK[;]3); sfxdamage(target[;]d); sfx(~_shock~);,,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Light Strike_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Chrysanthemum,Gain [mana]1 mana per|each unused dice,1,var temp = 0; for(d in self.dicepool) { if(d.available()) temp++; } inflictself(MANA[;]temp); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,PINK,change_power,change_power,,,0,YES,NO,combination:777,,,,,,,,,,,,
Chrysanthemum_upgraded,Gain [mana]1 mana per|each unused dice,1,var temp = 0; for(d in self.dicepool) { if(d.available()) temp++; } inflictself(MANA[;]temp); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,PINK,change_power,change_power,,,0,YES,NO,combination:77,,,,,,,,,,,,
Chrysanthemum_downgraded,Gain [mana]1 mana per|each unused even dice,1,var temp = 0; for(d in self.dicepool) { if(d.available() && d % 2 == 0) temp++; } inflictself(MANA[;]temp); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,PINK,change_power,change_power,,,0,YES,NO,combination:777,,,,,,,,,,,,
Cold Burn_upgraded,Do [sword]6 damage|(Cost [mana]2: inflict [ice]1 + [fire]1[]),1,if(getstatusself(~freetrades~) > 0) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); removestatusself(MANA[;]2); } attack(6); sfxdamage(target[;]6);,,EVEN,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cold Burn_downgraded,Do [sword]6 damage,1,attack(6); sfxdamage(target[;]6);,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:th,,,,,,,,,,,,
Blessed Bowl_upgraded,Gain a random blessing|[90%](If [mana]>=4[]: get a better blessing),1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatuslist = [SHIELD[;]THORNS[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); }else { randomstatuslist = [SHIELD[;]THORNS[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); } if(getstatusself(MANA) >= 3 # getstatusself(~freetrades~) >= 1) { randomstatuslist.remove(SHIELD); randomstatuslist.remove(REEQUIPNEXT); randomstatuslist.remove(THORNS); randomstatuslist.remove(~manakeep~); } var randomstatus = rand(randomstatuslist); var a = 1; if (randomstatus == THORNS) a = 3; if (randomstatus == SHIELD) a = 4; if (randomstatus == MANA) a = 3; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; if(randomstatus == ~doublecast~) randomstatus = ~MANA~; if(randomstatus == ~upgradecast~) randomstatus = ~MANA~; if(randomstatus == ~manakeep~) randomstatus = ~MANA~; if(randomstatus == ~manaboost~) randomstatus = ~MANA~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,witchonly|combination:23,,,,,,,,,,,,
Blessed Bowl_downgraded,Gain a random blessing|[90%](If [mana]>=12[]: get a better blessing),1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatuslist = [SHIELD[;]THORNS[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); }else { randomstatuslist = [SHIELD[;]THORNS[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); } if(getstatusself(MANA) >= 12 # getstatusself(~freetrades~) >= 1) { randomstatuslist.remove(SHIELD); randomstatuslist.remove(REEQUIPNEXT); randomstatuslist.remove(THORNS); randomstatuslist.remove(~manakeep~); } var randomstatus = rand(randomstatuslist); var a = 1; if (randomstatus == THORNS) a = 3; if (randomstatus == SHIELD) a = 4; if (randomstatus == MANA) a = 3; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; if(randomstatus == ~doublecast~) randomstatus = ~MANA~; if(randomstatus == ~upgradecast~) randomstatus = ~MANA~; if(randomstatus == ~manakeep~) randomstatus = ~MANA~; if(randomstatus == ~manaboost~) randomstatus = ~MANA~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,witchonly|combination:23,,,,,,,,,,,,
Manic Repeater_upgraded,Do [sword]1 dmg per [mana]1 mana|(Cost [mana]1[]: repeat it),1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~); if(getstatusself(MANA) >= 1){ removestatusself(MANA[;]1); },Fury,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:777,2,,,,,,,,if(getstatusself(FURY) < 1) { if(getstatusself(MANA) >= 1) { var blankskill = new elements.Skill(~Against All Odds_old~); blankskill.script = ~self.addstatus(FURY[;]1)~; var act = new motion.actuators.SimpleActuator(null[;] 0.5[;] null); act._repeat = 1; act.onRepeat(blankskill.execute[;] [self[;]target]); act.move(); } },,,
Manic Repeater_weakened,Do [sword]1 damage|per each [mana]1 mana,1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~);,Fury,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:777,,,,,,,,,,,,
Wicked Contract_upgraded,All mana-using bonuses|are free for this turn,1,inflictself(~freetrades~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:ttt,,,,,,,,,,,,
Staff Hilt,Do [sword]7 damage|(Cost [mana]3[]: Do [fire]10 instead),1,if(getstatusself(~freetrades~) > 0) { attack(10[;]FIRE); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 3) { attack(10[;]FIRE); removestatusself(MANA[;]3); sfx(~_fire~[;]~~[;]0.2); } else { attack(7); }  sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]7)~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:16,1,,,,,,,,,,,
Staff Hilt_upgraded,Do [sword]7 damage|[85%](Cost [mana]3[]: [fire]10 + [fire]Burn instead),1,if(getstatusself(~freetrades~) > 0) { attack(10[;]FIRE); sfx(~_fire~[;]~~[;]0.2); inflict(FIRE); } else if(getstatusself(MANA) >= 3) { attack(10[;]FIRE); removestatusself(MANA[;]3); sfx(~_fire~[;]~~[;]0.2); inflict(FIRE); } else { attack(7); }  sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]7)~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:16,,,,,,,,,,,,
Staff Hilt_downgraded,Do [sword]7 damage|(Cost [mana]3[]: Do [fire]7 instead),1,if(getstatusself(~freetrades~) > 0) { attack(7[;]FIRE); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 3) { attack(7[;]FIRE); removestatusself(MANA[;]3); sfx(~_fire~[;]~~[;]0.2); } else { attack(7); }  sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]7)~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:16,,,,,,,,,,,,
Spiked Coffin,Add [shield]<d6> shield|(Cost [mana]2[]: Do [sword]<double> dmg),1,if(getstatusself(~freetrades~) > 0) { attack(d * 2); sfxdamage(target[;]d * 2); } else if(getstatusself(MANA) >= 2) { attack(d * 2); sfxdamage(target[;]d * 2); removestatusself(MANA[;]2); } sfx(~_shield~[;]~~[;]0.2); inflictself(SHIELD[;]d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 2 && getstatusself(~freetrades~) > 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Spiked Coffin_upgraded,Add [shield]<d6> shield|(Cost [mana]2[]: Do [sword]<triple> dmg),1,if(getstatusself(~freetrades~) > 0) { attack(d * 3); sfxdamage(target[;]d * 3); } else if(getstatusself(MANA) >= 2) { attack(d * 3); sfxdamage(target[;]d * 3); removestatusself(MANA[;]2); } sfx(~_shield~[;]~~[;]0.2); inflictself(SHIELD[;]d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 2 && getstatusself(~freetrades~) > 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Spiked Coffin_downgraded,Add [shield]<d6> shield|(Cost [mana]2[]: Do [sword]<d6> dmg),1,if(getstatusself(~freetrades~) > 0) { attack(d); sfxdamage(target[;]d); } else if(getstatusself(MANA) >= 2) { attack(d); sfxdamage(target[;]d); removestatusself(MANA[;]2); } sfx(~_shield~[;]~~[;]0.2); inflictself(SHIELD[;]d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 2 && getstatusself(~freetrades~) > 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Sharp Cauldron,Gain [mana]2[comma] roll two dice|[gray](Reuseable),1,inflictself(MANA[;]2); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,ORANGE,change_power,change_power,,,-1,YES,NO,combination:11,1,,,,,,,,,,,
Sharp Cauldron_upgraded,Gain [mana]1[comma] roll new dice|[gray](Reuseable),1,inflictself(MANA[;]1); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE1,,ORANGE,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Sharp Cauldron_downgraded,Gain [mana]2 mana|[gray](Reuseable),1,inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,ORANGE,change_power,change_power,,,-1,YES,NO,combination:11,,,,,,,,,,,,
Byejinx,Jinx countdowns -[jinx]1|(Cost [mana]3[]: -[jinx]1 extra),1,if(getstatusself(~freetrades~) > 0) { boostjinxcountdowns(self[;] 2); boostjinxcountdowns(target[;] 2); } else if(getstatusself(MANA) >= 3) { boostjinxcountdowns(self[;] 2); boostjinxcountdowns(target[;] 2); removestatusself(MANA[;]3); } else { boostjinxcountdowns(self[;] 1); boostjinxcountdowns(target[;] 1); } sfx(~_mana~);,,ODD,,PINK,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Byejinx_upgraded,Jinx countdowns -[jinx]1|(Cost [mana]3[]: -[jinx]2 extra),1,if(getstatusself(~freetrades~) > 0) { boostjinxcountdowns(self[;] 3); boostjinxcountdowns(target[;] 3); } else if(getstatusself(MANA) >= 3) { boostjinxcountdowns(self[;] 3); boostjinxcountdowns(target[;] 3); removestatusself(MANA[;]3); } else { boostjinxcountdowns(self[;] 1); boostjinxcountdowns(target[;] 1); } sfx(~_mana~);,,ODD,,PINK,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Magic Phone,Do [sword]<d6> damage|[90%](Cost [mana]2[]: repeat in 2 turns),1,if(getstatusself(~freetrades~) > 0) { jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);sfx(\~_magic\~);~[;]target[;]self[;]2[;]d); sfx(~_mana~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);sfx(\~_magic\~);~[;]target[;]self[;]2[;]d); sfx(~_mana~[;]~~[;]0.2); removestatusself(MANA[;]2); } attack(d); sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,NORMAL,,YELLOW,add2,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Fear Ocean,Do [sword]<d6> damage|(If [mana]>=4[]: charge limit by 3),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 4) { self.limitvalue += 3; if (self.limitvalue > self.limitmax) self.limitvalue = self.limitmax; sfx(~_heal~[;]~~[;]0.2); } attack(d); sfxdamage(target[;]d);,Regenerate,MAX4,,GRAY,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Moonflower,In [jinx]<d6> turns[comma] do [sword]<triple>|(If [mana]>=5[]: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 5) { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d - 2[;]d * 3); } else { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;]d * 3); } sfx(~_thinghappens~);,,MIN3,,PINK,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Moonflower_upgraded,In [jinx]<d6> turns[comma] do [sword]<quadruple>|(If [mana]>=5[]: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 5) { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d - 2[;]d * 4); } else { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;]d * 4); } sfx(~_thinghappens~);,,MIN3,,PINK,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Sugar Donut,Consume [mana]<d6> mana to|gain [mana]<triple> in [jinx]<d6> turns,1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= d) { if(getstatusself(~freetrades~) <= 0) removestatusself(MANA[;]d); jinx(e.name[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~[;]\~\~[;]0.1);~[;]self[;]self[;]d[;]d*3); sfx(~_thinghappens~); } else { self.textparticle(~No effect!~); },Accelerate,MAX3,,GREEN,increaserange,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Sugar Star,Every [jinx]<slotdoubles> turns[comma]|get [mana]<slotdoubles> mana,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] d[;] d); } else { jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);~[;] self[;] self[;] d[;] d); }sfx(~_thinghappens~);,Accelerate,DOUBLES|DOUBLES,,PINK,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Sugar Star_downgraded,Every [jinx]3 turns[comma]|get [mana]3 mana,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]3); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]3); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]3); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]3); jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] 3[;] 3); } else { jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);~[;] self[;] self[;] 3[;] 3); }sfx(~_thinghappens~);,Accelerate,REQUIRE3|REQUIRE3,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sugar Star_upgraded,Every [jinx]<d6> turns[comma]|get [mana]<d6> mana,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] d[;] d); } else { jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);~[;] self[;] self[;] d[;] d); }sfx(~_thinghappens~);,Accelerate,MAX4,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Golden Clock,Do [sword]1 for each [jinx]jinx|(If [mana]>=6[]: do double),1,var jinxcount = getjinx(self) + getjinx(target); if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { attack(jinxcount * 2); sfxdamage(target[;]jinxcount * 2); } else { attack(jinxcount); sfxdamage(target[;]jinxcount); },,EVEN,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Golden Clock_upgraded,Do [sword]1 for each [jinx]jinx|(If [mana]>=6[]: do triple),1,var jinxcount = getjinx(self) + getjinx(target); if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { attack(jinxcount * 3); sfxdamage(target[;]jinxcount * 3); } else { attack(jinxcount); sfxdamage(target[;]jinxcount); },,EVEN,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Golden Clock_downgraded,[sword]1 for each [jinx]jinx on you|(If [mana]>=6[]: do double),1,var jinxcount = getjinx(self); if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { attack(jinxcount * 2); sfxdamage(target[;]jinxcount * 2); } else { attack(jinxcount); sfxdamage(target[;]jinxcount); },,EVEN,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blessed Blade,Do [sword]7 damage[comma]|(Cost [mana]3[]: x2 success odds),1,attack(7); sfxdamage(target|7);if(getstatusself(~freetrades~) > 0) { inflictself(~luck~);sfx(~_mana~|~~|0.2); } else if(getstatusself(MANA) >= 3) { inflictself(~luck~);sfx(~_mana~|~~|0.2); removestatusself(MANA[;]3); } else { inflictself(~luck~);sfx(~_mana~|~~|0.2);},,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,combination:hh,1,,,,,,,,,,,
Blessed Blade_upgraded,Do [sword]7 damage[comma]|(Cost [mana]2[]: x2 success odds),1,attack(7); sfxdamage(target|7);if(getstatusself(~freetrades~) > 0) { inflictself(~luck~);sfx(~_mana~|~~|0.2); } else if(getstatusself(MANA) >= 2) { inflictself(~luck~);sfx(~_mana~|~~|0.2); removestatusself(MANA[;]2); } else { inflictself(~luck~);sfx(~_mana~|~~|0.2);},,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,combinatioh:hh,,,,,,,,,,,,
Dealmaker,Deal [sword]5 damage[comma]|make next mana trade free,1,attack(5); sfxdamage(target[;]5); inflictself(~manakeep~); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,combination:ht,1,,,,,,,,,,,
Dealmaker_upgraded,Deal [sword]7 damage[comma]|make next mana trade free,1,attack(7); sfxdamage(target[;]d); inflictself(~manakeep~);sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,combination:ht,,,,,,,,,,,,
Time Edge,Do [sword]7 damage[comma]|(If [mana]>=5[]: -[jinx]1 to all jinxes),1,attack(7); sfxdamage(target[;]7); if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 5) { boostjinxcountdowns(target[;]1); boostjinxcountdowns(self[;]1); sfx(~_mana~[;]~~[;]0.2); },,COMBINATION,,PINK,change_power,change_power,,,0,NO,NO,combination:tt,1,,,,,,,,,,,
Time Edge_upgraded,Do [sword]7 damage[comma]|(If [mana]>=3[]: -[jinx]1 to all jinxes),1,attack(7); sfxdamage(target[;]7); if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 3) { boostjinxcountdowns(target[;]1); boostjinxcountdowns(self[;]1); sfx(~_mana~[;]~~[;]0.2); },,COMBINATION,,PINK,change_power,change_power,,,0,NO,NO,combination:tt,,,,,,,,,,,,
Hall of Glass,Every turn[comma] +1 dice this|fight and curse yourself,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~+1 dice this fight and curse yourself[comma] repeats every turn~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~+1 dice this fight and curse~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]1); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]1); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~+1 dice this fight and curse yourself[comma] repeats every turn~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~+1 dice this fight and curse~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]1); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]1); jinx(e.name[;]~+1 dice this fight and curse yourself[comma] repeats every turn~[;]~+1 dice this fight and curse~[;]~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] 1[;] 1); } else { jinx(e.name[;]~+1 dice this fight and curse yourself[comma] repeats every turn~[;]~+1 dice this fight and curse~[;]~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;~[;] self[;] self[;] 1[;] 1); }sfx(~_thinghappens~);,Infinity Mirror,REQUIRE6,,PURPLE,simplify,doublerequirements,,,0,YES,NO,,1,,,,,,,,,,,
Motor Oil,Repeat next action[;] errors on 2nd roll,1,inflictself(FURY); sfx(~_fury~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,YES,NO,robotonly|fd,,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 1 && e.ready) roboterror(self[;] [e]);,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 1 && e.ready) roboterror(self[;] [e]);,,,,,
Motor Oil_downgraded,Repeat next action[;] errors on 3nd roll,1,inflictself(FURY); sfx(~_fury~);,,REQUIRE6|REQUIRE6,,ORANGE,simplify,change_power,,,0,YES,NO,robotonly|fd,,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 2 && e.ready) roboterror(self[;] [e]);,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 2 && e.ready) roboterror(self[;] [e]);,,,,,
Amp,Double current song,2,inflictself(~Song~[;] getstatusself(~Song~)); sfx(~_song~);,Cheat,EVEN|ODD,,GRAY,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snowball Machinegun,Do [ice]<d6> damage twice|[gray](Reuseable),2,attack(d[;] ICE); attack(d[;] ICE); sfxdamage(target[;] d); sfx(~_ice~);,Snow Catapult,MAX2,,BRIGHTCYAN,increaserange,decreaserange,,,2,NO,NO,,,,,,,,,,,,,attack(d[;] ICE); sfxdamage(target[;] d); sfx(~_ice~);
Snowball Effect,Everytime you deal ice dmg|deal +[ice]1 dmg this battle|[gray](Once Per Battle),2,inflictself(~snowball~); inflict(~snowballenemy~); sfx(~levelup~); sfx(~_ice~);,,COUNTDOWN,12,BRIGHTCYAN,halfcountdown,change_power,,,0,YES,YES,,,,,,,,,,,,,
Snowball Effect_downgraded,Everytime you deal ice dmg|deal +[ice]1 dmg this battle|[gray](Once Per Battle),2,inflictself(~snowball~); inflict(~snowballenemy~); sfx(~levelup~); sfx(~_ice~);,,COUNTDOWN,18,BRIGHTCYAN,halfcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Call for Backup Warrior,Warrior Smash|[sword]<var:bopcount> dmg[;] +1 per bop,2,attack(self.getvar(~bopcount~));,Lucky Shot,,,BRIGHTCYAN,,change_power,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,,
Call for Backup Thief,Yoink|Borrow equipment,2,//$var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~)){ enemyequipment.push(eq);}} if(enemyequipment.length > 0){var randomequipment = rand(enemyequipment); replacemewith(randomequipment.name + randomequipment.namemodifier); }$,Steal,,,GREEN,,change_power,,none,0,NO,NO,excludefromrandomlists|cannotsteal|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot,Slot Machine|Get random equipment,2,//$replacemewith(rand(getequipmentlist(null|[]|[~skillcard~|~excludefromrandomlists~|~robotonly~|~witchonly~|~alternateversion~]))| -1);$,Reversal,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1| 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?,Black Market|Rent a powerful item|Costs [gold]1[;] you have [gold]<gold>,2,//$if(self.gold > 0){ self.gold--; replacemewith(rand([~Dark Shadow~|~Bear Maul~|~Two Handed Sword~|~Tower Shield~|~Earthquake~|~Tap Dance~|~Head of Krampus~|~Nerf Gun~|~Candy Cane Spear~])| -1); } else { self.textparticle(~Can't afford!~); }$,,,,GREEN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?,Power Surge|Add +1 to all dice|less than six,2,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue < 6){ mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1| 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Divine Tazer,Do [shock]<d6> damage[;]|[shock]Shocks the enemy|[gray](Reuseable),2,attack(d[;] SHOCK); inflict(SHOCK); sfx(~_shock~); sfxdamage(target[;] d);,,MAX5,,YELLOW,change_power,complicate,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Tazer_upgraded,Do [shock]<d6> damage[;]|[shock]Shocks the enemy,2,attack(d[;] SHOCK); inflict(SHOCK); sfx(~_shock~); sfxdamage(target[;] d);,,NORMAL,,YELLOW,,,,,-1,NO,NO,,,,,,,,,,,,,
Divine Flamethrower,Do [fire]<d6> damage[;]|Burn an enemy dice|[gray](Reuseable),2,attack(d[;] FIRE); inflict(FIRE); sfx(~_fire~); sfxdamage(target[;] d);,,NORMAL|NORMAL,,RED,reducesize,complicate,,,2,NO,NO,,,,,,,,,,,,,
Divine Cap Gun,Do [sword]6 damage|[gray](Reuseable),2,attack(6); sfxdamage(target[;] 6);,,REQUIRE6,,RED,simplify,doublerequirements,,,3,NO,NO,,,,,,,,,,,,,
Divine Snap,Do [sword]8 damage|50% chance to roll all 6's |next turn,2,if(chance(50)){ inflictself(~all6~); sfx(~_ladysnap~); attack(8); sfxdamage(target[;] 8); } else { attack(8); sfxdamage(target[;] 8); },,COUNTDOWN,14,PINK,halfcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snap_downgraded,Do [sword]6 damage,2,attack(6); sfxdamage(target[;] 6); ,,COUNTDOWN,20,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Divine Dagger@LL,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1); sfxdamage(target[;] e.timesused+1);,,MIN2,,RED,change_power,doublerequirements,,,-1,NO,NO,excludefromrandomlists,,,,e.timesused = 0;,,,,,,,,
Divine Dagger@LL_upgraded,[sword]<twicetimesused> dmg[;] +[sword]2 each use|[gray](Reuseable),2,attack(e.timesused+2); sfxdamage(target[;] e.timesused+2);,,MIN2,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,e.timesused = 0;,,,,,,,,
Backstab@LL,Do [sword]<equipmentuse> damage. Add [sword]2|on each item use.,2,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]);  e.changeslots([oe]);  e.animate(~flashandshake~); attack(self.equipmentused * 2 - 2); sfxdamage(target[;] self.equipmentused * 2 - 2);,,REQUIRE1,,,,,,,0,NO,NO,excludefromrandomlists,,,,,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]);  e.changeslots([oe]);  e.animate(~flashandshake~);,,,,,,,
Backstab@LL_upgraded,Do [sword]<equipmentuse> damage. Add [sword]2|on each item use.,2,attack(self.equipmentused * 2 - 2); sfxdamage(target[;] self.equipmentused * 2 - 2);,,MAX3,,,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Backstab@LL_downgraded,Do [sword]<equipmentuse> damage. Add [sword]1|on each item use.,2,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]);  e.changeslots([oe]);  e.animate(~flashandshake~); attack(self.equipmentused - 1);,,REQUIRE1|REQUIRE6,,,,,,,0,NO,NO,excludefromrandomlists,,,,,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]);  e.changeslots([oe]);  e.animate(~flashandshake~);,,,,,,,
Judgement@plants,Do [sword]<triple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~plants~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_upgraded,Do [sword]<quadruple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~plants~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_downgraded,Do [sword]<d6>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~plants~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats,Do [sword]<triple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~hats~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_upgraded,Do [sword]<quadruple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~hats~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_downgraded,Do [sword]<d6>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~hats~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green,Do [sword]<triple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~green~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_upgraded,Do [sword]<quadruple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~green~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_downgraded,Do [sword]<d6>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~green~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords,Do [sword]<triple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_upgraded,Do [sword]<quadruple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_downgraded,Do [sword]<d6>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields,Do [sword]<triple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_upgraded,Do [sword]<quadruple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_downgraded,Do [sword]<d6>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears,Do [sword]<triple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~spears~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_upgraded,Do [sword]<quadruple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~spears~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_downgraded,Do [sword]<d6>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~spears~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals,Do [sword]<triple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~animals~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_upgraded,Do [sword]<quadruple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~animals~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_downgraded,Do [sword]<d6>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~animals~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating,Do [sword]<triple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~floating~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_upgraded,Do [sword]<quadruple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~floating~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_downgraded,Do [sword]<d6>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~floating~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear,Do [sword]<triple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~eyewear~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_upgraded,Do [sword]<quadruple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~eyewear~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_downgraded,Do [sword]<d6>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~eyewear~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses,Do [sword]<triple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~bosses~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_upgraded,Do [sword]<quadruple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~bosses~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_downgraded,Do [sword]<d6>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~bosses~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1,Do [sword]<triple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~level1~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_upgraded,Do [sword]<quadruple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~level1~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_downgraded,Do [sword]<d6>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~level1)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire,Do [sword]<triple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~onfire~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_upgraded,Do [sword]<quadruple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~onfire~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_downgraded,Do [sword]<d6>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~onfire~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison,Do [sword]<triple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_upgraded,Do [sword]<quadruple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_downgraded,Do [sword]<d6>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines,Do [sword]<triple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_upgraded,Do [sword]<quadruple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_downgraded,Do [sword]<d6>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic,Do [sword]<triple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~magic~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_upgraded,Do [sword]<quadruple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~magic~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_downgraded,Do [sword]<d6>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~magic~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings,Do [sword]<triple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~wings~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_upgraded,Do [sword]<quadruple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~wings~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_downgraded,Do [sword]<d6>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~wings~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople,Do [sword]<triple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~dicepeople~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_upgraded,Do [sword]<quadruple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~dicepeople~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_downgraded,Do [sword]<d6>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~dicepeople~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs,Do [sword]<triple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~limbs~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_upgraded,Do [sword]<quadruple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~limbs~)); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_downgraded,Do [sword]<d6>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~).concat(getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~limbs~)); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp,Do [sword]<triple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_upgraded,Do [sword]<quadruple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_downgraded,Do [sword]<d6>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp,Do [sword]<triple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_upgraded,Do [sword]<quadruple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_downgraded,Do [sword]<d6>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@Singers,Do [sword]<triple>[;] if target sings|take only [sword]1,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~singers~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@Singers_upgraded,Do [sword]<quadruple>[;] if target sings|take only [sword]1,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~singers~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@Singers_downgraded,Do [sword]<d6>[;] if target sings|take only [sword]1,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~singers~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@red,Do [sword]<triple>[;] red things|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~red~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@red_upgraded,Do [sword]<quadruple>[;] red things|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~red~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@red_downgraded,Do [sword]<d6>[;] red things|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~red~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@human,Do [sword]<triple>[;] humans|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~human~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@human_upgraded,Do [sword]<quadruple>[;] humans|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~human~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@human_downgraded,Do [sword]<d6>[;] humans|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~human~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Random Judgement,Gain a random|Judgement item,2,var judge = rand([~Judgement@red~[;]~Judgement@human~[;]~Judgement@Singers~[;]~Judgement@animals~[;]~Judgement@bosses~[;]~Judgement@floating~[;]~Judgement@eyewear~[;]~Judgement@fullhp~[;]~Judgement@green~[;]~Judgement@hats~[;]~Judgement@machines~[;]~Judgement@lowhp~[;]~Judgement@limbs~[;]~Judgement@animals~[;]~Judgement@onfire~[;]~Judgement@magic~[;]~Judgement@machines~[;]~Judgement@swords~[;]~Judgement@wings~[;]~Judgement@spears~[;]~Judgement@shields~[;]~Judgement@poison~[;]~Judgement@plants~]); giveequipment([judge][;]true[;]false); sfx(~_thinghappens~);,,NORMAL,,PINK,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Christmas Spite,Deal [sword]2 damage|[gray](reuseable),2,sfxdamage(target[;]2); attack(2);,Hellfire,MIN2,,RED,change_power,complicate,,,-1,NO,NO,,1,,,,,,,,,,,
Christmas Spite_upgraded,Deal [sword]3 damage|[gray](reuseable),2,sfxdamage(target[;]3); attack(3);,Hellfire,MIN2,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Bring Down,Deal dmg equal to 20%|of enemy's current HP|[gray](reuseable),2,sfxdamage(target[;]target.hp / 5); attack(target.hp / 5);,Hellfire,MIN2,,RED,change_power,complicate,,,-1,NO,NO,,1,,,,,,,,,,,
Bring Down_upgraded,Deal dmg equal to 25%|of enemy's current HP|[gray](reuseable),2,sfxdamage(target[;]target.hp / 4); attack(target.hp / 4);,Hellfire,MIN2,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Commandments,Get a new commandment every turn,2,,,,,GRAY,,,,,0,NO,YES,skillcard,,,,runscript(~christmasspecial/commandments.hx~[;][ALL[;]e[;]~[newline](Get a new commandment[newline]every turn.)~]); inflictself(~commandment~),,,,,,,,
Commandments@status,Replaces current skillcard|(Get a new status-related|commandment and 50%|chance to inflict a|random status each turn.),2,,,,,YELLOW,,,,,0,NO,NO,skillcard|skill:Commandments@statusskill,,,,,,,,,,,,
Commandments@statusskill,Skillcard version of @status,2,,,,,YELLOW,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~status~[;]e[;]~[newline](Get a new status-related[newline]commandment and 50%[newline]chance to inflict a[newline]random status each turn.)~]); inflictself(~commandment~); if(chance(50)){inflict(rand(loadtext(~christmasspecial/randomeffects~))); },,,,,,,,
Commandments@health,Replaces current skillcard|(Get a new health-related|commandment and 50%|chance to heal 3|health each turn.),2,,,,,GREEN,,,,,0,NO,NO,skillcard|skill:Commandments@healthskill,,,,,,,,,,,,
Commandments@healthskill,Skillcard version of @health,2,,,,,GREEN,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~health~[;]e[;]~[newline](Get a new health-related[newline]commandment and 50%[newline]to heal 3 health[newline]each turn.)~]); inflictself(~commandment~);,if(chance(50)){attackself(-3); sfx(~_cure~);  e.animate(~flashandshake~); },,,,,,,
Commandments@dmg,Replaces current skillcard|(Get a new damage-related|commandment and 30%|chance to deal 4|damage each turn.),2,,,,,RED,,,,,0,NO,NO,skillcard|skill:Commandments@dmgskill,,,,,,,,,,,,
Commandments@dmgskill,Skillcard version of @dmg,2,,,,,RED,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~damage~[;]e[;]~[newline](Get a new damage-related[newline]commandment and 30%[newline]to deal 4 damage[newline]each turn.)~]); inflictself(~commandment~); ,if(chance(30)){attack(4); sfxdamage(target[;] 4); e.animate(~flashandshake~); } ,,,,,,,
Commandments@dice,Replaces current skillcard|(Get a new dice-related|commandment and 20%|chance to roll a|new dice each turn.),2,,,,,PINK,,,,,0,NO,NO,skillcard|skill:Commandments@diceskill,,,,,,,,,,,,
Commandments@diceskill,Skillcard version of @dice,2,,,,,PINK,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~dice~[;]e[;]~[newline](Get a new dice-related[newline]commandment and 20%[newline]to roll a new[newline]dice each turn.)~]); inflictself(~commandment~); if(chance(20)){self.bonusdice++; sfx(~magic_gaindice~); },,,,,,,,
The Divine Killer,Replaces current skillcard|Do [sword]25 damage|When used is replaced,2,,Catapult,COMBINATION,,RED,reducesize,noeffect,,,0,NO,NO,combination:77777|skillcard|skill:The Divine Killer@skill,,,,,,,,,,,,
The Divine Killer@skill,Replaces current skillcard|Do [sword]25 damage|When used is replaced,2,attack(25); sfxdamage(target[;] 25); self.replaceskillcard(self.getvar(~newskills~).pop()); self.getvar(~oldeqs~).remove((e+'').split('@')[0]); sfx(~_ladysnap~);,,COMBINATION,,RED,reducesize,noeffect,,,0,NO,NO,combination:77777|skillcard,,,,,,,,,,,,
The Second Chance,Replaces current skillcard|Heal to max hp gain [reduce]2|When used is replaced,2,,Catapult,COMBINATION,,GREEN,reducesize,noeffect,,,0,YES,NO,combination:77777|skillcard|skill:The Second Chance@skill,,,,,,,,,,,,
The Second Chance@skill,Replaces current skillcard|Heal to max hp gain [reduce]2|When used is replaced,2,attackself(-999); sfx(~_heal~); inflictself(REDUCE[;] 2); self.replaceskillcard(self.getvar(~newskills~).pop()); self.getvar(~oldeqs~).remove((e+'').split('@')[0]); sfx(~_ladysnap~);,,COMBINATION,,GREEN,reducesize,noeffect,,,0,YES,NO,combination:77777|skillcard,,,,,,,,,,,,
The Middle Road,Replaces current skillcard|Do [sword]10 damage|Heal [heal]10 hp|When used is replaced,2,,Catapult,COMBINATION,,GRAY,reducesize,noeffect,,,0,NO,NO,combination:7777|skillcard|skill:The Middle Road@skill,,,,,,,,,,,,
The Middle Road@skill,Replaces current skillcard|Do [sword]10 damage|Heal [heal]10 hp|When used is replaced,2,attack(10); sfxdamage(target[;] 10); attackself(-10); sfx(~_heal~); self.replaceskillcard(self.getvar(~newskills~).pop()); self.getvar(~oldeqs~).remove((e+'').split('@')[0]); sfx(~_ladysnap~);,,COMBINATION,,GRAY,reducesize,noeffect,,,0,NO,NO,combination:7777|skillcard,,,,,,,,,,,,
Lady's Combo,Do [sword]12 damage,2,attack(12); sfxdamage(target[;] 12);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:456|excludefromrandomlists,,,,,,,,,,,,
Lady's Combo_upgraded,Do [sword]12 damage,2,attack(12); sfxdamage(target[;] 12);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:777|excludefromrandomlists,,,,,,,,,,,,
Lady's Combo_downgraded,Do [sword]12 damage,2,attack(12); sfxdamage(target[;] 12);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:12366|excludefromrandomlists,,,,,,,,,,,,
Combination Lock,Do [sword]10 damage,2,attack(10); sfxdamage(target[;] 10);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:1221|excludefromrandomlists,,,,,,,,,,,,
Combination Lock_upgraded,Do [sword]15 damage,2,attack(15); sfxdamage(target[;] 15);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:1997|excludefromrandomlists,,,,,,,,,,,,
Combination Lock_downgraded,Do [sword]5 damage,2,attack(5); sfxdamage(target[;] 5);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:1997|excludefromrandomlists,,,,,,,,,,,,
Slush Spell,Do [ice]5 damage|Inflict [shiver]2_Slush,1,inflict(~Slush~[;] 2); sfx(~_ice~); attack(5[;] ICE); sfxdamage(target[;] 5);,Atric Storm,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slush Spell_upgraded,Do [ice]7 damage|Inflict [shiver]2_Slush,1,inflict(~Slush~[;] 2); sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Atric Storm,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slush Spell_downgraded,Do [ice]5 damage,1,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 5);,Atric Storm,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Doom Spell,Do [sword]5 damage|Inflict [skipturn]Timely_Demise,1,attack(5); sfxdamage(target[;]5); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~);,Disorient,REQUIRE2,,BLACK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Doom Spell_upgraded,Do [sword]5 damage|Inflict [skipturn]2_Timely_Demise,1,attack(5); sfxdamage(target[;]5); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 2);,Disorient,REQUIRE2,,BLACK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Doom Spell_downgraded,Do [sword]5 damage|Inflict [skipturn]Timely_Demise,1,attack(5); sfxdamage(target[;]5); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~);,Disorient,REQUIRE2|REQUIRE2,,BLACK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Redshift Spell,Do [shock]4 damage|Shock all red items,1,attack(4[;] SHOCK); sfxdamage(target[;]4); if(simulation) { inflict(SHOCK); } if(!simulation) { var red = new elements.Equipment(~Fireball~).equipmentcol; var hasred = false; for(eq in self.equipment) { if(eq.equipmentcol == red) { hasred = true; break; } } if(hasred) inflict(~redshift~); else inflict(SHOCK); sfx(~_shock~); },Pea Gun,REQUIRE3,,RED,simplify,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Regeneration Spell,Gain [grace]4_Regeneration,1,inflictself(~regeneration~[;] 4); sfx(~_cure~);,Regenerate,REQUIRE4,,PINK,change_power,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Regeneration Spell_upgraded,Gain [grace]5_Regeneration,1,inflictself(~regeneration~[;] 5); sfx(~_cure~);,Regenerate,REQUIRE4,,PINK,change_power,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Sweet Spell,Do [sword]3 damage|Inflict [heart]3 Too Sweet,1,inflict(~Too Sweet~[;] 3); attack(3); sfxdamage(target[;]3);,Pea Gun,REQUIRE5,,RED,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Sweet Spell_upgraded,Do [sword]3 damage|Inflict [heart]5 Too Sweet,1,inflict(~Too Sweet~[;] 5); attack(3); sfxdamage(target[;]3);,Pea Gun,REQUIRE5,,RED,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Snowcloud,Do [ice]<double> damage|Freeze ALL dice,2,inflict(ICE[;] ALL); sfx(~_ice~); attack(d * 2[;] ICE); sfxdamage(target[;] d * 2);,Arctic Storm,MAX3,,BRIGHTCYAN,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Smack,Do [sword]4 damage,1,attack(d); sfxdamage(target[;] d);,Pea Gun,MAX3,,RED,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball,Do [ice]<d6> damage|Inflict [shiver]Slush,1,inflict(~Slush~); sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball_upgraded,Do [ice]<d6> damage|Inflict [shiver]Slush,1,inflict(~Slush~); sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball_downgraded,Do [ice]<d6> damage,1,sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slushie,Inflict [shiver]3 slush,2,inflict(~Slush~[;] 3); sfx(~_ice~);,Slushie,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Slushie_upgraded,Inflict [shiver]3 slush,2,inflict(~Slush~[;] 3); sfx(~_ice~);,Slushie,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Slushie_downgraded,Inflict [shiver]1 slush,2,inflict(~Slush~); sfx(~_ice~);,Slushie,REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freezer,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Freezer_upgraded,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Freezer_downgraded,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,MIN3,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Cold Cut,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cold Cut_upgraded,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cold Cut_downgraded,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,REQUIRE1|REQUIRE1|REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane Spear,Do [sword]<d6> damage|Gain [regen]1 regen|,2,attack(d); sfxdamage(target[;] d); inflictself(~Regen~); sfx(~_cure~);,Candy Spear,ODD,,RED,change_power,change_power,,,2,NO,NO,,,,,,,,,,,,,
Candy Cane Spear_upgraded,Do [sword]<d6> damage|Gain [regen]2 regen|,2,attack(d); sfxdamage(target[;] d); inflictself(~Regen~); sfx(~_cure~);,Candy Spear,ODD,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Candy Cane Spear_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d);,Candy Spear,ODD,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Christmas Vacation,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Christmas Vacation_upgraded,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Christmas Vacation_downgraded,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,ODD|ODD|ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
AC Unit,Gain [fan]2 fan,1,inflictself(~Fan~[;] 2); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
AC Unit_upgraded,Gain [fan]3 fan,1,inflictself(~Fan~[;] 3); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
AC Unit_downgraded,Gain [fan]1 fan,1,inflictself(~Fan~); sfx(~_ice~);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Tree Shake,Receive 2-4 ornaments|Take [sword]1 dmg for each|(cooldown of 1 turn),2,var number = rand([2[;]3[;]4]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); } e.setvar(~cooldown~|1);,,NORMAL|NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,e.dicehistory = []; e.setvar(~cooldown~|0);,e.setvar(~cooldown~|0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,if(e.dicehistory.length > 0){ var dh = e.dicehistory[0].basevalue; if(e.remainingcountdown == dh ) { bonus(9999); } else { if(e.remainingcountdown <= dh) { bonus(-10 * dh); } else if(e.remainingcountdown  == dh) { bonus(10 * dh); } } e.dicehistory = []; },,,,,
Broken Ornament,Do [sword]<d6> damage|Inflict [bleed]1 bleed|[gray](once per battle),1,inflict(~Bleed~); sfx(~_poison~); attack(d); sfxdamage(target[;] d);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Tree Shake_upgraded,Receive 3-5 ornaments|Take [sword]1 dmg for each|(cooldown of 1 turn),2,var number = rand([3[;]4[;]5]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); } e.setvar(~cooldown~|1);,,NORMAL|NORMAL,9,GREEN,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~cooldown~|0);,e.setvar(~cooldown~|0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Tree Shake_downgraded,Receive 1-3 ornaments|Take [sword]1 dmg for each|(cooldown of 1 turn),2,var number = rand([1[;]2[;]3]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); } e.setvar(~cooldown~|1);,,NORMAL|NORMAL|NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~cooldown~|0);,e.setvar(~cooldown~|0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Nutcracker_upgraded,Do [sword]<d6> damage|Triple if enemy is male,2,var namelist = [~Drake~[;]~Wicker Man~[;]~Snowman~[;]~Hothead~[;]~Wolf Puppy~[;]~Bully~[;]~Elf~[;]~Thief~[;]~Warrior~[;]~Buster~[;]~Cactus~[;]~Copycat~[;]~Cornelius~[;]~Cowboy~[;]~Fireman~[;]~Frog~[;]~Gargoyle~[;]~Handyman~[;]~Loud Bird~[;]~Magician~[;]~Pirate~[;]~Rat King~[;]~Rotten Apple~[;]~Rose~[;]~Skeleton~[;]~Sneezy~[;]~Space Marine~[;]~Sterohead~[;]~Sticky Hands~[;]~Vacuum~[;]~Warlock~[;]~Wizard~[;]~Yeti~[;]~Wisp~]; var doubledmg = false; for(name in namelist) { if(target.name == name) { doubledmg = true; break; } } if(doubledmg) { attack(d * 3); sfxdamage(target[;] d*3); } else { attack(d); sfxdamage(target[;] d); },,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Nutcracker_downgraded,Do [sword]<d6> damage|Double if enemy is male,2,var namelist = [~Drake~[;]~Wicker Man~[;]~Snowman~[;]~Hothead~[;]~Wolf Puppy~[;]~Bully~[;]~Elf~[;]~Thief~[;]~Warrior~[;]~Buster~[;]~Cactus~[;]~Copycat~[;]~Cornelius~[;]~Cowboy~[;]~Fireman~[;]~Frog~[;]~Gargoyle~[;]~Handyman~[;]~Loud Bird~[;]~Magician~[;]~Pirate~[;]~Rat King~[;]~Rotten Apple~[;]~Rose~[;]~Skeleton~[;]~Sneezy~[;]~Space Marine~[;]~Sterohead~[;]~Sticky Hands~[;]~Vacuum~[;]~Warlock~[;]~Wizard~[;]~Yeti~[;]~Wisp~]; var doubledmg = false; for(name in namelist) { if(target.name == name) { doubledmg = true; break; } } if(doubledmg) { attack(d * 2); sfxdamage(target[;] d*2); } else { attack(d); sfxdamage(target[;] d); },,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
All I Want,Do [sword]3 damage|Per [song]song on self|Lose all song,2,bonus(-10); attack(getstatusself(~Song~)*3); sfxdamage(target[;] getstatusself(~Song~)*3); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,10,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
All I Want_upgraded,Do [sword]3 damage|Per [song]song on self|Lose all song,1,bonus(-10); attack(getstatusself(~Song~)*3); sfxdamage(target[;] getstatusself(~Song~)*3); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
All I Want_downgraded,Do [sword]2 damage|Per [song]song on self|Lose all song,2,attack(getstatusself(~Song~)*2); sfxdamage(target[;] getstatusself(~Song~)*2); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,12,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Sing,Do [weaken]<d6> damage|Gain [song]3 song|On 8[;] gain 2 more,2,bonus(10000); attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~[;] 3); sfx(~_song~); if(d == 8) inflictself(~Song~[;] 2);,,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sing_upgraded,Do [weaken]<d6> damage|Gain [song]5 song|On 8[;] gain 2 more,2,bonus(10000);attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~[;] 5); sfx(~_song~); if(d == 8) inflictself(~Song~[;] 2);,,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sing_downgraded,Do [weaken]<d6> damage|Gain [song]1 song,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~); sfx(~_song~);,,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mic Drop,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mic Drop_upgraded,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mic Drop_downgraded,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,REQUIRE1,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Ornament,Do [sword]<d6> damage|Inflict [fire]1 burn|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(FIRE); sfx(~_fire~);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Snowflake Ornament,Do [sword]<d6> damage|Inflict [ice]1 freeze|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Sharp Ornament,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,NORMAL|FREE2,,RED,change_power,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Sharp Ornament_upgraded,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,NORMAL|FREE4,,RED,,,,,0,NO,YES,decor,,,,,,,,,,,,
Toxic Ornament,Do [sword]<d6> damage|Inflict [poison]2 poison|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(POISON[;]2); sfx(~_poison~);,,NORMAL,,PURPLE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Cursed Ornament,Do [sword]<d6> damage|Inflict [curse]1 curse|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(CURSE); sfx(~_curse~);,,NORMAL,,GREY,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star,Do [sword]7 damage|Inflict [blind]3 blind,1,attack(7); sfxdamage(target[;] 7); inflict(BLIND[;] 3); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star_upgraded,Do [sword]12 damage|Inflict [blind]3 blind,1,attack(12); sfxdamage(target[;] 12); inflict(BLIND[;] 3); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,,,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star_downgraded,Do [sword]7 damage|Inflict [blind]1 blind,1,attack(7); sfxdamage(target[;] 7); inflict(BLIND[;] 1); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,,,,,0,NO,YES,decor,,,,,,,,,,,,
Wind Ornament,Do [sword]<d6> damage|Gain [dodge]1 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE); sfx(~_dodge~);,,NORMAL,,YELLOW,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Heavy Ornament,Do [sword]<d6> damage|Inflict [weaken]1 weaken|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(WEAKEN); sfx(~_weaken~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Electric Ornament,Do [sword]<d6> damage|Inflict [shock]1 shock|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(SHOCK); sfx(~_shock~);,,NORMAL,,YELLOW,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Chain Ornament,Do [sword]<d6> damage|Inflict [lock]1 lock|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(LOCK); sfx(~_lock~);,,NORMAL,,GREY,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Armor Ornament,Do [sword]<d6> damage|Gain [reduce]1 reduce|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(REDUCE); sfx(~_shield~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Barricade Ornament,Do [sword]<d6> damage|Gain [shield]4 shield|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(SHIELD[;] 4); sfx(~_shield~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Boomerang Ornament,Do [sword]<d6> damage|Return the dice|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); givedice(d); sfx(~_metals~);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Mini Christmas Tree,Do [sword]<d6> damage|Gain an Ornament|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false);,,NORMAL,,GREEN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Snowglobe Ornament,Do [sword]<d6> damage|Inflict [shiver]1 slush|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(~Slush~); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Food Ornament,Do [sword]<d6> damage|Heal [heal]3 hp|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); attackself(-3); sfx(~_heal~);,,NORMAL,,GREEN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Repeating Ornament,Do [sword]<d6> damage|Do it again in [jinx]2 turns|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); bonus(d * 20); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d); sfx(~_thinghappens~);,,NORMAL,,PINK,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Slide,Do [sword]<d6> damage|On even[;] freeze a dice,1,attack(d); if(d % 2 == 0) { inflict(ICE); sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slide_upgraded,Do [sword]<d6> damage|On even[;] freeze 2 dice,1,attack(d); if(d % 2 == 0) { inflict(ICE[;]2); sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slide_downgraded,Do [sword]<d6> damage|On even[;] freeze a dice,1,attack(d); if(d % 2 == 0) { inflict(ICE); sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX2|MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Downplayed Ornament,Do [weaken]<d6> damage|Inflict [powerdown]2 power down|[gray](once per battle),1,attack(d[;] WEAKEN); sfxdamage(target[;] d); inflict(~Powerdown~[;] 2); sfx(~_weaken~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Card Reroll,Rerolls all cards,2,sfx(~_thinghappens~); runscript(~christmasspecial/warrior_dotide~[;][self[;]target[;]true]);,,COUNTDOWN,6,,,noeffect,,,0,YES,NO,cannotsteal|skillcard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Palm Christmas Tree,Gain an Ornament,2,sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false);,,COUNTDOWN,10,GREEN,reducesize,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Frozen Claw,Do [ice]<d6> damage|inflict [ice]1 freeze,1,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,MAX3,,BRIGHTCYAN,add2,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Frozen Slash,Do [ice]<d6> damage|inflicts [bleed]1 Bleed,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(~Bleed~); sfx(~_poison~);,,NORMAL,,BRIGHTCYAN,add2,change_power,,,0,NO,NO,,,,,,,,,,,,,
Frozen Slash_downgraded,Do [ice]<d6> damage|inflict [ice]1 Freeze,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Self Consume,Heal [heal]<d6> health|In [jinx]3 turns[;]|take [sword]<d6> damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]3[;]d); sfx(~_thinghappens~);,,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Self Consume_upgraded,Heal [heal]<d6> health|In [jinx]3 turns[;]|take [sword]<d6> damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]3[;]d); sfx(~_thinghappens~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Self Consume_downgraded,Heal [heal]<d6> health|In [jinx]3 turns[;]|take [sword]<d6> + 2 damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]3[;]d + 2); sfx(~_thinghappens~);,,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Gumdrop Throw,Do [fire]6 damage|Inflict [heart]2 Too Sweet,1,attack(6[;] FIRE); sfxdamage(target[;] 6); inflict(~Too Sweet~[;] 2); sfx(~_cure~);,,COUNTDOWN,12,RED,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gumdrop Throw_downgraded,Do [fire]5 damage|Inflict [heart]1 Too Sweet,1,attack(5[;] FIRE); sfxdamage(target[;] 5); inflict(~Too Sweet~); sfx(~_cure~);,,COUNTDOWN,12,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane,Do [sword]6 damage|Returns a dice,2,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice); attack(6); sfxdamage(target[;] 6);,,NORMAL|NORMAL,8,RED,change_power,changetotal12,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane_upgraded,Do [sword]6 damage|Returns a dice,2,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice); attack(6); sfxdamage(target[;] 6);,,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Gift Bag,Gives 3 toys|(cooldown of 1 turn),2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~); e.setvar(~cooldown~|1);,,NORMAL|NORMAL|NORMAL|NORMAL,,RED,change_power,change_power,,,0,YES,NO,shockimmune|curseavoid|cannotreuse|excludefromrandomlists,,e.setvar(~cooldown~|0);,e.setvar(~cooldown~|0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Gift Bag_upgraded,Gives 4 toys|(cooldown of 1 turn),2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~); e.setvar(~cooldown~|1);,,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,YES,NO,shockavoid|curseavoid|cannotreuse|excludefromrandomlists,,e.setvar(~cooldown~|0);,e.setvar(~cooldown~|0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Gift Bag_downgraded,Gives 2 toys|(cooldown of 1 turn),2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~); e.setvar(~cooldown~|1);,,MAX5|MIN2|MIN2|MAX5,,RED,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~cooldown~|0);,e.setvar(~cooldown~|0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Train,Do [sword]<d6> damage|Gain [dodge]1 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE); sfx(~_dodge~);,,NORMAL|NORMAL,,YELLOW,change_power,decreaserange,,,0,NO,YES,toy,,,,,,,,,,,,
Train_upgraded,Do [sword]<d6> damage|Gain [dodge]2 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE[;] 2); sfx(~_dodge~);,,NORMAL|NORMAL,,YELLOW,,,,,0,NO,YES,toy,,,,,,,,,,,,
Wind Up Car,Do [sword]10 damage|[gray](once per battle),1,attack(10); sfxdamage(target[;] 10);,,COUNTDOWN,9,,halfcountdown,change_power,,,0,NO,YES,toy,,,,,,,,,,,,
Wind Up Car_downgraded,Do [sword]5 damage|[gray](once per battle),1,attack(5); sfxdamage(target[;] 5);,,COUNTDOWN,9,,,,,,0,NO,YES,toy,,,,,,,,,,,,
Nerf Gun,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,MAX5|FREE3,,RED,add4,change_power,,,0,NO,YES,toy,,,,,,,,,,,,
Nerf Gun_downgraded,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,MAX5|FREE1,,RED,,,,,0,NO,YES,toy,,,,,,,,,,,,
Candy Stockings,Heal [heal]<double> for [jinx]3 turns,1,for(i in 1...4) { jinx(~Candy Stocking~[;]~heal [heal]~ + (i * 2) + ~ health~[;]~Heal [heal]~ + (i * 2) + ~ health~[;]~attack(-%VAR% * 2); sfx(\~_heal\~);~[;]self[;]self[;]i[;]d); } sfx(~_thinghappens~);,,MAX3,,GREEN,increaserange,decreaserange,,,0,YES,YES,toy,,,,,,,,,,,,
Toy Phone,Do [sword]<d6> damage|in 2 turns[;] do [sword]<double> damage|[gray](once per battle),1,jinx(~Telephone~[;]~take [sword]~ + (d * 2) + ~ damage~[;]~Take [sword]~ + (d * 2) + ~ damage~[;]~attack(%VAR% * 2); sfxdamage(null[;]%VAR% * 2);~[;]target[;]self[;]2[;]d); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,,MAX4,,PINK,increaserange,decreaserange,,,0,NO,YES,toy,,,,,,,,,,,,
Slushie Maker,Do [ice]<d6> damage[;]|freeze 1 dice[;] inflict [shiver]Slush|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(~Slush~); inflict(ICE); sfx(~_ice~);,,NORMAL|FREE4,,BRIGHTCYAN,add5,complicate,,,0,NO,YES,toy,,,,,,,,,,,,
Desk Fan,Heal [heal]<d6> health|Gain [fan]3 fan|[gray](once per battle),1,inflictself(~Fan~[;] 3); sfx(~_ice~); attackself(-d); sfx(~_heal~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,YES,YES,toy,,,,,,,,,,,,
Bag Hit,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] d);,,MAX3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Bag Hit_upgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target[;] d);,,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Thieving Tools@spanner,Combine both dice|Change Tools,2,givedice(d); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL|NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@bump,+1 to dice value|Change Tools on 2nd use|,2,givedice(d+1); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@nudge,-1 to dice value|Change Tools on 2nd use|,2,givedice(d-1); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,MIN2,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@pick,Split dice into 2|Change Tools on 2nd use|,2,givedice(split(d)[;] ~splitdice~); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@dupli,Duplicate dice|Change Tools on 2nd use|,2,givedice([d[;]d]); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@vise,Get 2 of the difference|Change Tools on 2nd use|,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~);,,NORMAL|NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@roll,Reroll this dice|Change Tools on 2nd use|,2,givedice(); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@screw,Do [sword]<d6> damage|Change Tools on 2nd use|,2,attack(d); sfxdamage(target[;] d); trace(e.usesleft); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,MAX5,,GRAY,,,,,2,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Backhand,Do [fire]<d6> damage|Inflict [sting]Sting,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~); inflict(~Sting~);,,MAX3|MIN3,,RED,change_power,changetotal9,,,0,NO,NO,,,,,,,,,,,,,
Backhand_upgraded,Do [fire]<d6> damage|Inflict [sting]Sting,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~); inflict(~Sting~);,,MAX4|MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Segway,Gain [dodge]1 dodge,2,inflictself(DODGE); sfx(~_dodge~);,,COUNTDOWN,12,YELLOW,threequartercountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Climate Change,Inflict enemy's [fire] amount|as [ice][;] and vice versa,2,inflict(ICE[;] getstatus(FIRE)); inflict(FIRE[;] getstatus(ICE)); sfx(~_ice~); sfx(~_fire~);,Blue Flame,COUNTDOWN,6,RED,reducesize,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Contained Blast,Do [fire]2 dmg per [fire] on enemy|Do [ice]2 dmg per [ice] on enemy,2,attack(getstatus(FIRE) * 2[;] FIRE); attack(getstatus(ICE) * 2[;] ICE); sfxdamage(target[;] getstatus(ICE) * 2); sfxdamage(target[;] getstatus(FIRE) * 2);,Blue Flame,EVEN|EVEN,,RED,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Contained Blast_upgraded,Do [fire]3 dmg per [fire] on enemy|Do [ice]3 dmg per [ice] on enemy,2,attack(getstatus(FIRE) * 3[;] FIRE); attack(getstatus(ICE) * 3[;] ICE); sfxdamage(target[;] getstatus(ICE) * 3)); sfxdamage(target[;] getstatus(FIRE) * 3));,Firebomb,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Heavily Wrapped Gift,Contains...|The Best Item in the Game,2,giveequipment(~The Best Item in the Game~[;] true[;] false[;] e); sfx(~_thinghappens~);,,COUNTDOWN,50,YELLOW,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,e.remainingcountdown = self.getvar(~count~);,self.setvar(~count~[;]e.remainingcountdown);,,,,,,,,,
The Best Item in the Game,Drain [heart]<double> health,2,drain(d * 2); sfx(~_drain~);,,NORMAL,,RED,add1,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Present Shotgun,Do [sword]<double> damage|Gain a random item,2,attack(d * 2); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~|~nomidturnsummon~]))[;] -1); sfxdamage(target[;] d * 2);,Emulator,MAX3,,RED,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Present Shotgun_downgraded,Do [sword]<d6> damage|Gain a random item,2,attack(d); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~|~nomidturnsummon~]))[;] -1); sfxdamage(target[;] d);,Emulator,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Combat Bump,Dice value +1|,2,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,,,,,,2,YES,NO,shockavoid|weakenavoid|curseavoid|cannotsteal,,,,,,,,,,,,
Combat Roll@witch,Reroll a dice|[gray](Reuseable),2,givedice();,,NORMAL,,,,,,,2,YES,NO,cannotsteal|excludefromrandomlists|shockavoid|weakenavoid|curseavoid,,,,,,,,,,,,
Peck,Do [sword]1 damage,1,attack(1); sfxdamage(target[;] 1);,Pea Gun,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Peck_upgraded,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] 3);,Pea Gun,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Final Frost[],[blue]frost|Do [ice]2 damage|per [ice] on enemy,2,attack(getstatus(ICE) * 2); sfxdamage(target[;] getstatus(ICE) * 2); sfx(~_ice~);,,,,BLUE,,noeffect,,,0,NO,NO,finale|powercard|excludefromrandomlists,,,,,,,,,,,,
Warm Coat,Do [fire]2 damage,1,attack(2[;] FIRE); sfxdamage(target[;] 2);,,REQUIRE1,,RED,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Warm Coat_upgraded,Do [fire]4 damage,1,attack(4[;] FIRE); sfxdamage(target[;] 4);,,REQUIRE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Christmas Dagger,Do [sword]<d6> damage|Changes color on use|,1,attack(d); sfxdamage(target[;] d);,Pea Gun,MAX3,,RED,change_power,decreaserange,,,-1,NO,NO,,,,self.resetvar(~christmasdaggertemp~);,,,,,,var skill = new elements.Skill(~Against all odds_old~); skill.script = 'var eq = self.getvar(~christmasdaggertemp~); if(eq.equipmentcol == 2) { eq.changecolour(~GREEN~); } else { if(eq.equipmentcol == 3) { eq.changecolour(~RED~); } } self.resetvar(~christmasdaggertemp~);'; self.setvar(~christmasdaggertemp~|e); var tw = new motion.actuators.SimpleActuator(null|1/60|null); tw.onComplete(skill.execute|[self|target]); tw.move(); /*'but buster this could cause unintended behavior if you insert dice at a rate faster than 1 per 1/60th of a second or if you use two christmas daggers simultaneously!!' (latter may be possible with snap but i find it highly unlikely you'd ever reach a situation like that)*/,,,
Christmas Dagger_upgraded,Do [sword]<d6> dmg[;] +[fire]1 burn|Changes effect on use|,1,attack(d); sfxdamage(target[;] d); if(e.equipmentcol == 2) { inflict(~FIRE~); sfx(~_fire~); } else { if(e.equipmentcol == 3) { attackself(-1); sfx(~_heal~); } },Pea Gun,MAX3,,RED,,,,,-1,NO,NO,,,,self.resetvar(~christmasdaggertemp~);,,,,,,var skill = new elements.Skill(~Against all odds_old~); skill.script = 'var redstring = ~+[fire]1 burn~; var greenstring = ~heal [heal]1~; var eq = self.getvar(~christmasdaggertemp~); if(eq.equipmentcol == 2) { eq.changecolour(~GREEN~); eq.fulldescription = eq.fulldescription.split(redstring).join(greenstring); } else { if(eq.equipmentcol == 3) { eq.changecolour(~RED~); eq.fulldescription = eq.fulldescription.split(greenstring).join(redstring); } } self.resetvar(~christmasdaggertemp~);'; self.setvar(~christmasdaggertemp~|e); var tw = new motion.actuators.SimpleActuator(null|1/60|null); tw.onComplete(skill.execute|[self|target]); tw.move();,,,
Time Travel,Switches Ghost types,1,if(!simulation) { var ghost = rand([~Ghost of Future~[;]~Ghost of Present~[;]~Ghost of Past~]); self.name = ghost; sfx(~_thinghappens~); bonus(1000000000000000000000000); if(self.name == ~Ghost of Future~) { self.destroyallequipment(); giveequipment([~Space Food~][;]true[;]false); giveequipment([~Laser Rifle~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); } if(self.name == ~Ghost of Present~) { self.destroyallequipment(); giveequipment([~Global Warming~][;]true[;]false); giveequipment([~Pollution~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); } if(self.name == ~Ghost of Past~) { self.destroyallequipment(); giveequipment([~Tap Dance~][;]true[;]false); giveequipment([~Lead Pipe Hit~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); } },,COUNTDOWN,2,GREEN,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Time Travel,Switches Ghost types,1,if(!simulation) { var ghost = rand([~Ghost of Future~[;]~Ghost of Present~[;]~Ghost of Past~]); self.name = ghost; sfx(~_thinghappens~); bonus(1000000000000000000000000); if(self.name == ~Ghost of Future~) { self.destroyallequipment(); giveequipment([~Space Food~][;]true[;]false); giveequipment([~Laser Rifle~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); sfx(~_thinghappens~); f.symbolparticle(~beartransform~); screenshake(0.2); } if(self.name == ~Ghost of Present~) { self.destroyallequipment(); giveequipment([~Global Warming~][;]true[;]false); giveequipment([~Pollution~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); sfx(~_thinghappens~); f.symbolparticle(~beartransform~); screenshake(0.2); } if(self.name == ~Ghost of Past~) { self.destroyallequipment(); giveequipment([~Tap Dance~][;]true[;]false); giveequipment([~Lead Pipe Hit~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); sfx(~_thinghappens~); f.symbolparticle(~beartransform~); screenshake(0.2); } },,COUNTDOWN,2,GREEN,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lead Pipe Hit,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX4|FREE4,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Lead Pipe Hit_upgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX4|FREE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance,Do [sword]<d6> damage|on 6 or 2[;] gain [dodge],1,attack(d); if(d == 6) inflictself(DODGE); if(d == 6) { sfx(~_dodge~[;]~~[;]0.2); } if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance_upgraded,Do [sword]<d6> damage|on 8 or 2[;] gain [dodge],1,attack(d); if(d == 8) inflictself(DODGE); if(d == 8) { sfx(~_dodge~[;]~~[;]0.2); } if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX5|MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance_downgraded,Do [sword]<d6> damage|on 2[;] gain [dodge],1,attack(d); if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Space Food,Heal [heal]2 health|If excess[;] do [sword]4 damage|,2,attackself(-2); sfx(~_heal~); if(self.hp + 2 > self.maxhp) { attack(4); sfxdamage(target[;]4); },,ODD,,GREEN,change_power,doublerequirements,,,2,YES,NO,,,,,,,,,,if(self.hp + 2 > self.maxhp) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Space Food_upgraded,Heal [heal]4 health|If excess[;] do [sword]6 damage|,2,attackself(-4); sfx(~_heal~); if(self.hp + 2 > self.maxhp) { attack(6); sfxdamage(target[;]6); },,ODD,,GREEN,,,,,2,YES,NO,,,,,,,,,,if(self.hp + 4 > self.maxhp) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Laser Rifle,Do [sword]<d6> damage|,1,attack(d); sfxdamage(target[;] d);,,ODD|FREE1,,RED,change_power,removereusable,,,2,NO,NO,,,,,,,,,,,,,
Laser Rifle_upgraded,Do [sword]<d6> damage|,1,attack(d); sfxdamage(target[;] d);,,EVEN|FREE1,,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Pollution,Inflict [poison]3 poison,2,inflict(POISON[;] 3); sfx(~_poison~);,,MAX2|MAX3,,PURPLE,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Global Warming,Do [fire]<d6> +<timesused> damage|Add 1 for each time used|,1,attack(d[;] FIRE); sfxdamage(target[;] d); attack(e.timesused+1);,,MAX3,,RED,change_power,removereusable,,,2,NO,NO,,,,,,,,,,,,,
Global Warming_upgraded,Do [fire]<d6> +<timesused> damage|Add 1 for each time used|,1,attack(d[;] FIRE); sfxdamage(target[;] d); attack(e.timesused+1);,,MAX4,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Pollution_upgraded,Inflict [poison]5 poison,2,inflict(POISON[;] 5); sfx(~_poison~);,,MAX4|MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
BOOO!,Enemy loses [song]1,1,removestatus(~Song~); sfx(~_song~);,,COUNTDOWN,10,ORANGE,change_power,noeffect,,,0,NO,NO,immunetotide,1,,,,,,,,,,,
BOOO!_upgraded,Enemy loses [song]2,1,removestatus(~Song~[;] 2); sfx(~_song~);,,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,immunetotide,,,,,,,,,,,,
Cycle,Choose another card|,2,,,NORMAL,,GRAY,,,,,-1,YES,NO,cannotsteal|excludefromrandomlists,,self.setvar(~wj-initialized~[;]0); inflictself(~chain~),for(eq in self.equipment) { eq.removetag(~chained~); eq.removetag(~alreadyunchained~); },runscript(~christmasspecial/jester_beforestartturn~[;][self]);,,if(!onlimit) { var eq = self.lastequipmentused; if((!eq.hastag(~immunetochain~)) && (eq.usesleft == 0 # eq == e)) runscript(~christmasspecial/jester_dochaining~[;][self]); },,,,,,
Ice Skates,Gain [dodge]Dodge[;] but get|[ice]Frozen next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Ice Skates~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflict(ICE); sfx(\~_ice\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Ice Skates_upgraded,Gain [dodge]Dodge[;] but get|[ice]Frozen next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Ice Skates~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflict(ICE); sfx(\~_ice\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,EVEN,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Ice Skates_downgraded,Gain [dodge]Dodge[;] but get|[ice]Frozen next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Ice Skates~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflict(ICE); sfx(\~_ice\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,REQUIRE5|REQUIRE5,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Fire Boots,Gain [dodge]Dodge[;] but get|[fire]Burned next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Fire Boots~[;]~receive [fire]1 burn~[;]~Receive [fire]1 burn~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Fire Boots_upgraded,Gain [dodge]Dodge[;] but get|[fire]Burned next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Fire Boots~[;]~receive [fire]1 burn~[;]~Receive [fire]1 burn~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,EVEN,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Fire Boots_downgraded,Gain [dodge]Dodge[;] but get|[fire]Burned next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Fire Boots~[;]~receive [fire]1 burn~[;]~Receive [fire]1 burn~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,REQUIRE6|REQUIRE6,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Shiny Sword,Do [sword]<d6> damage. On start|of turn[;] if active[;] do [sword]3,2,attack(d); sfxdamage(target[;]d);,,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,,,,,if(e.availablethisturn) { e.animate(~flashandshake~); attack(3); sfxdamage(target[;]3); },,,,,,,
Chaingun,Do [sword]3 dmg[;] cycle cards|(ignores cycle),1,attack(3); sfxdamage(target[;]3); runscript(~christmasspecial/jester_dochaining~[;][self]);,,EVEN,,GRAY,simplify,complicate,,,0,NO,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,runscript(~christmasspecial/jester_dochaining~[;][self]);
Chainbump,Dice value +1|(ignores cycle),1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,GRAY,change_power,complicate,,,0,YES,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,
Chainbump_upgraded,Dice +1 (ignores cycle)|,1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,GRAY,,,,,2,YES,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,
Christmas Revolver,Do [sword]<var:6rolls> damage|+3 per 6 rolled,2,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname); attack(arrayname); sfxdamage(target[;] arrayname);,,REQUIRE6,,RED,simplify,doublerequirements,,,0,NO,NO,,,,,,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,,,,,
Christmas Pistol,Do [sword]2 damage. On <var:randomdice>[;]|return dice (changes)|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,5,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6]));,,,,,,,,,,
Christmas Pistol_upgraded,Do [sword]2 damage. On <var:randomdice>[;]|return dice (likely on 6)|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6[;]6[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,5,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6[;]6[;]6[;]6]));,,,,,,,,,,
Christmas Pistol_downgraded,Do [sword]2 damage. On <var:randomdice>[;]|return dice (changes)|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6]));,,,,,,,,,,
Pip Master,Reroll a dice|Do [sword]1 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack(large - small); sfxdamage(target[;] large - small); },,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Pip Master_upgraded,Reroll a dice|Do [sword]2 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack((large - small) * 2); sfxdamage(target[;] (large - small) * 2); },,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Pip Master_downgraded,Reroll a dice|Do [sword]1 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack(large - small); sfxdamage(target[;] large - small); },,MIN4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice();
Doom and Gloom,Do [sword]<d6> damage|[80%]On even inflict [skipturn]Timely_Demise,2,attack(d); if(d % 2 == 0) inflict(~Demise~); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Plasma Gun,NORMAL,,BLACK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Doom and Gloom_upgraded,Do [sword]<d6> damage|[80%]On even inflict [skipturn]2 Timely Demise,2,attack(d); if(d % 2 == 0) inflict(~Demise~[;] 2); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Plasma Gun,NORMAL,,BLACK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
12 Days Of Christmas,Do [sword]3 damage|Inflict [skipturn]3 Timely Demise,1,attack(3); sfxdamage(target[;]3); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 3);,,COUNTDOWN,10,BLACK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
12 Days Of Christmas_upgraded,Do [sword]4 damage|Inflict [skipturn]4 Timely Demise,1,attack(4); sfxdamage(target[;]4); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 4);,,COUNTDOWN,10,BLACK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Roll Tracker,Tracks your rolls,2,,,,,GRAY,change_power,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~rollindex~[;]0); if(self.getvar(~baserolls~).length == null) { trace(~selfvar error!~); e.fulldescription = ~Something went wrong![newline]Please report this!![newline][newline](Clicking calculate will[newline]abruptly crash your game)~; } else { self.setvar(~rolls~[;]self.getvar(~baserolls~)); self.setvar(~updatecounter~[;]0); var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); },,if(self.getvar(~updatecounter~)) { var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); e.animate(~flash~); self.setvar(~updatecounter~[;]0); },,,,,,
Roll Tracker_upgraded,Tracks your rolls|Odd rolls reduce CPU,2,,,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~rollindex~[;]0); if(self.getvar(~baserolls~).length == null) { trace(~selfvar error!~); e.fulldescription = ~Something went wrong![newline]Please report this!![newline][newline](Clicking calculate will[newline]abruptly crash your game)~; } else { self.setvar(~rolls~[;]self.getvar(~baserolls~)); self.setvar(~updatecounter~[;]0); var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); } inflictself(~oddcpureduce~);,,if(self.getvar(~updatecounter~)) { var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join() + ~[newline][newline]Odd rolls reduce CPU[newline]instead of increasing it.~; e.animate(~flash~); self.setvar(~updatecounter~[;]0); },,,,,,
Reset,Reset cpu (testing)|,1,adjustrobotcounter(-self.roll_total);,,NORMAL,,GRAY,,,,none,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Flip,Flip next rolls|,1,,,NORMAL,,ORANGE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,var newrolls = []; for(v in self.getvar(~rolls~)) { newrolls.push(7-v); } newrolls[newrolls.length-1] = 0; trace(newrolls); self.setvar(~rolls~[;]newrolls); self.setvar(~updatecounter~[;]1);,,,
Reverse,Reverse roll order|,1,,,NORMAL,,ORANGE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,var newrolls = self.getvar(~rolls~); newrolls.reverse(); newrolls.push(0); newrolls.shift(); trace(newrolls); self.setvar(~rolls~[;]newrolls); self.setvar(~rollindex~[;]newrolls.length - self.getvar(~rollindex~)); self.setvar(~updatecounter~[;]1);,,,
Freeze,Set rolls to|111111,1,,,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,self.setvar(~rolls~[;][1[;]1[;]1[;]1[;]1[;]1[;]0]); self.setvar(~rollindex~[;]0); self.setvar(~updatecounter~[;]1);,,,
Confetti Popper,Do [sword]<d6> damage|Skip the next dice roll,1,attack(d); sfxdamage(target[;]d);,,MAX5,,YELLOW,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,self.setvar(~rollindex~[;]self.getvar(~rollindex~)+1); if(!self.getvar(~rolls~)[self.getvar(~rollindex~)]) self.setvar(~rollindex~[;]0); self.setvar(~updatecounter~[;]1);,,,
Garbage Collector,Next roll reduces CPU|instead of increasing it,1,inflictself(~reversecpu~);,,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sequence Break,Skip the next <d6> rolls,1,,,MAX3,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,var i = self.getvar(~rollindex~); i+=d; if(i >= self.getvar(~rolls~).length) i-=self.getvar(~rolls~).length; if(!self.getvar(~rolls~)[i]) i = 0; self.setvar(~rollindex~[;]i); self.setvar(~updatecounter~[;]1);,,,
Wrong Answer,Do [sword]1 damage[;] and|heal completely,2,attack(1); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]1);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_upgraded,Do [sword]3 damage[;] and|heal completely,2,attack(3); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]3);,,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_downgraded,Heal completely,2,attackself(-self.maxhp); target.removestatus(ALL);,,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frozen Gloves@robot,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d); sfxdamage(target[;]d); inflictself(~robotfreeze~);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(~robotfreeze~);
Frozen Slash_upgraded,Do [ice]<d6> damage|inflicts [bleed]1 Bleed,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(~Bleed~); sfx(~_poison~);,,NORMAL|FREE3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Head of Krampus,Deal dmg equal to 20%|of enemy's current HP,1,sfxdamage(target[;]target.hp / 5); attack(target.hp / 5);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Head of Krampus_upgraded,Deal dmg equal to 25%|of enemy's current HP,1,sfxdamage(target[;]target.hp / 4); attack(target.hp / 4);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe,Do [sword]<d6> damage. Next|turn[;] do [sword]<d6>/ 2 damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d/2); sfx(~_thinghappens~);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe_upgraded,Do [sword]<d6> damage. Next|turn[;] do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d); sfx(~_thinghappens~);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe_downgraded,Do [sword]<d6> damage. Next|turn[;] take [sword]<d6>/ 2 damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]2[;]d/2); sfx(~_thinghappens~);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Incantation,Roll 2 6's next turn,2,inflictself(~stash~+6[;]2); inflictself(~illuminate~);,,MIN5,,RED,simplify,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Soul Crush,Drain [heart]4 health|Get 2 3's,2,drain(4); sfx(~_drain~); givedice([3[;]3]);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Soul Crush_downgraded,Drain [heart]4 health,2,drain(4); sfx(~_drain~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Dagger,Do [sword]<var:dagger> damage|+[sword]1 each use|,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 1); sfxdamage(target[;] self.getvar(~dagger~) + 1);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,,,,,,,,
Divine Throwing Dagger_downgraded,Do [sword]<var:dagger> damage|+[sword]1 each use,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 1); sfxdamage(target[;] self.getvar(~dagger~) + 1);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,,,,,,,,
Divine Throwing Dagger_upgraded,Do [sword]<var:dagger> damage|+[sword]3 each use|,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 2); sfxdamage(target[;] self.getvar(~dagger~) + 2);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,self.setvar(~dagger~[;] 2);,self.setvar(~dagger~[;] 2);,self.setvar(~dagger~[;] 2);,,,,,,,,
Divine Grip,Return two of the|difference between dice|On doubles[;] get 2 new dice,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) { givedice([(bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~); } else { givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); },,NORMAL|NORMAL,,GREEN,reuseable,changetotal9,,,0,YES,NO,,,,,,,,,,,,,
Divine Zap,Drain [heart]<var:divinezapdrain> health|(40% of enemy health),2,drain(self.getvar(~divinezapdrain~)); sfx(~_drain~);,,EVEN|ODD|REQUIRE3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,self.setvar(~divinezapdrain~[;] target.hp*0.40); e.animate(~flashandshake~);,,,,,,,
Divine Zap_upgraded,Drain [heart]<var:divinezapdrain> health|(40% of enemy health),2,drain(self.getvar(~divinezapdrain~)); sfx(~_drain~);,,EVEN|REQUIRE3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,self.setvar(~divinezapdrain~[;] target.hp*0.40); e.animate(~flashandshake~);,,,,,,,
Divine Microphone,Do [weaken]<d6> damage|Weaken 2 items,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); inflict(WEAKEN[;] 2); sfx(~_weaken~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Microphone_downgraded,Do [weaken]<d6> damage,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snowhammer,Do [ice]<d6> damage|Freeze 2 dice,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE[;] 2); sfx(~_ice~);,,REQUIRE6,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snowhammer_downgraded,Do [ice]<d6> damage,2,attack(d[;] ICE); sfxdamage(target[;] d); sfx(~_ice~);,,REQUIRE6,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Fire Axe,Do [fire]<d6> damage|Burn 2 dice,2,attack(d[;] FIRE); sfxdamage(target[;] d); inflict(FIRE[;] 2); sfx(~_fire~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Fire Axe_downgraded,Do [fire]<d6> damage,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Storm,Inflict [threshold]2_Storm,2,inflict(~Storm~[;] 2); sfx(~_curse~);,,COUNTDOWN,9,,threequartercountdown,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Shiny Nose,Inflict [shock]1 shock. If enemy|has red equipment[;] shock|all red equipment instead,2,if(simulation) { inflict(SHOCK); } if(!simulation) { var red = new elements.Equipment(~Fireball~).equipmentcol; var hasred = false; for(eq in self.equipment) { if(eq.equipmentcol == red) { hasred = true; break; } } if(hasred) inflict(~redshift~); else inflict(SHOCK); sfx(~_shock~); },,ODD,,RED,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Antlers,Gain [thorns]2 thorns,2,inflictself(THORNS[;] 2); sfx(~_thorns~);,,COUNTDOWN,10,GREEN,threequartercountdown,,,,0,NO,NO,,,,,,,,,,,,,
Antlers_downgraded,Gain [thorns]1 thorns,2,inflictself(THORNS[;] 1); sfx(~_thorns~);,,COUNTDOWN,10,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Antlers_weakened,Gain [thorns]1 thorns,2,inflictself(THORNS[;] 1); sfx(~_thorns~);,,COUNTDOWN,7,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Next Volume,Get the second spellbook|Current spellbook: <var:currentspellbook>,1,sfx(~_thinghappens~); var booknum = self.getvar(~currentspellbook~); for(i in 1...7) { if(Spellbook.isempty(i)) { self.setvar(~spellbook~+booknum+~slot~+i[;]~Empty slot~); } else { self.setvar(~spellbook~+booknum+~slot~+i[;]Spellbook.spellname(i)); } } for(eq in self.equipment){ if(eq.name == e.name){ eq.animate(~flashandshake~); } } self.setvar(~currentspellbook~[;]self.getvar(~currentspellbook~) + 1); if(self.getvar(~currentspellbook~) == 4) { self.setvar(~currentspellbook~[;]1); } booknum = self.getvar(~currentspellbook~); for(q in 1...7) { if(self.getvar(~spellbook~+booknum+~slot~+q) != ~Empty slot~) { Spellbook.changespellflash(q[;]self.getvar(~spellbook~+booknum+~slot~+q)); } else { Spellbook.erase(q); } },Time Stop,NORMAL,,GRAY,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|weakenavoid|curseavoid|altpoisonavoid|shockavoid|cannotsteal,1,inflictself(~silencenextvolume~);,,if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.hasstatus(SILENCE)) { e.availablethisturn = false; e.unavailabletext = ~Unavailable~; e.unavailabledetails = [~Break silence to unlock~]; }if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },,,,,,
Stolen Heart,-1 dice to enemy this fight[comma]|never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~); if(!simulation) { target.extradice--; if(target.dice + target.extradice < 1) { target.extradice = 1- target.dice; } },,REQUIRE5|REQUIRE5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stolen Heart_downgraded,Never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~);,,REQUIRE5|REQUIRE5,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Stolen Heart_upgraded,-1 dice to enemy this fight[comma]|never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~); if(!simulation) { target.extradice--; if(target.dice + target.extradice < 1) { target.extradice = 1- target.dice; } },,REQUIRE5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Last Word,Survive next fatal blow[comma]|never roll 2,1,inflictself(SURVIVE); sfx(~_survive~); inflictself(~never2~);,,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Last Word_downgraded,Never roll 2,1,inflictself(~never2~); sfx(~magic_gaindice~);,,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Last Word_upgraded,Survive next fatal blow[comma]|never roll 2,1,inflictself(SURVIVE); sfx(~_survive~); inflictself(~never2~);,,MAX2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light,Get immunity to freeze[comma]|never roll 1,1,self.innate.push(~immunefreeze~); sfx(~useitem~); inflictself(~never1~);,,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light_downgraded,Never roll 1,1,inflictself(~never1~); sfx(~magic_gaindice~);,,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light_upgraded,Get immunity to freeze[comma]|never roll 1,1,self.innate.push(~immunefreeze~); sfx(~useitem~); inflictself(~never1~);,,MAX2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall,Add [shield]6 shield[comma]|never roll 4,1,inflictself(SHIELD[;]6); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4|REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall_downgraded,Add [shield]3 shield[comma]|never roll 4,1,inflictself(SHIELD[;]3); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4|REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall_upgraded,Add [shield]6 shield[comma]|never roll 4,1,inflictself(SHIELD[;]6); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Weird Glare,Add [poison]5 poison[comma]|never roll 3,1,inflict(POISON[;]5); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Glare_downgraded,Add [poison]3 poison[comma]|never roll 3,1,inflict(POISON[;]3); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Glare_upgraded,Add [poison]6 poison[comma]|never roll 3,1,inflict(POISON[;]6); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stalemate,Do [sword]12 damage[comma]|Inflict [threshold]2 threshold,1,attack(12); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]12);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Stalemate_upgraded,Do [sword]14 damage[comma]|Inflict [threshold]2 threshold,1,attack(14); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]14);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Stalemate_downgraded,Do [sword]8 damage[comma]|Inflict [threshold]2 threshold,1,attack(8); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]8);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Ram,Do [sword]2 damage for|each [jinx]Jinx on enemy,2,attack(getjinx(target) + getjinx(target)); sfxdamage(target[;]getjinx(target) + getjinx(target)); if(getjinx(target) + getjinx(target) <= 0) { bonus(-1000); },Plasma Gun,COUNTDOWN,16,PINK,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ram_downgraded,Do [sword]1 damage for|each [jinx]Jinx on enemy,2,attack(getjinx(target)); sfxdamage(target[;]getjinx(target)); if(getjinx(target) <= 0) { bonus(-1000); },Plasma Gun,COUNTDOWN,16,PINK,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stomp,Do [shock]<d6> dmg +[shock]Shock[;]|repeat for next [jinx]2 turns,1,jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]2[;]d); jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]3[;]d); attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.1); inflict(SHOCK);,Static Shock,MAX3,,PINK,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Acceleration Kick,Every third turn[;] reduce all|jinx on the enemy by [jinx]1,1,,Time Stop,,,PINK,,,,,0,NO,NO,excludefromrandomlists|weakenavoid|weakenimmune|shockavoid,,,,,if(turn % 3 == 0) { boostjinxcountdowns(target[;] 1); sfx(~useitem~); e.animate(~flashandshake~); },,,,,,,
Stomp_downgraded,Do [shock]<d6> dmg +[shock]Shock[;]|repeat in [jinx]2 turns,1,jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]3[;]d); attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.1);,Static Shock,MAX3,,PINK,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
A Tool,Each turn[;] guarantee|an [quote]on 6[quote] item|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Tool_upgraded,Each turn[;] guarantee|an [quote]on 6[quote] item|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Star,Each turn[;] guarantee|a [sword]<double>-with-downside|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Star_upgraded,Each turn[;] guarantee|a [sword]<double>-with-downside|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Gun,Each turn[;] guarantee|a multiuse countdown|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Gun_upgraded,Each turn[;] guarantee|a multiuse countdown|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Maneuver,Each turn[;] guarantee|a dice modifier|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Maneuver_upgraded,Each turn[;] guarantee|a dice modifier|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Super Maneuver,Each turn[;] guarantee|a dice modifier|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Super Maneuver_upgraded,Each turn[;] guarantee|a dice modifier|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Pole,Each turn[;] guarantee|a countdown weapon|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Pole_upgraded,Each turn[;] guarantee|a countdown weapon|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Red,Each turn[;] guarantee|something red,1,,,,,RED,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Red_upgraded,Each turn[;] guarantee|something red|(will be upgraded),1,,,,,RED,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Blue,Each turn[;] guarantee|something blue,1,/* considered doing 'something old; something new; something borrowed; something blue' where something old would be something vanilla; something new would be something made for christmasspecial; and something borrowed would be something taken from a mod but. nah*/,,,,BRIGHTCYAN,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Blue_upgraded,Each turn[;] guarantee|something blue|(will be upgraded),1,,,,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Purple,Each turn[;] guarantee|something purple,1,,,,,PURPLE,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Purple_upgraded,Each turn[;] guarantee|something purple|(will be upgraded),1,,,,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Orange,Each turn[;] guarantee|something orange,1,,,,,ORANGE,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Orange_upgraded,Each turn[;] guarantee|something orange|(will be upgraded),1,,,,,ORANGE,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Yellow,Each turn[;] guarantee|something yellow,1,,,,,YELLOW,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Yellow_upgraded,Each turn[;] guarantee|something yellow|(will be upgraded),1,,,,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Green,Each turn[;] guarantee|something green,1,,,,,GREEN,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Green_upgraded,Each turn[;] guarantee|something green|(will be upgraded),1,,,,,GREEN,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Pink,Each turn[;] guarantee|something pink,1,,,,,PINK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Pink_upgraded,Each turn[;] guarantee|something pink|(will be upgraded),1,,,,,PINK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Gray,Each turn[;] guarantee|something gray,1,,,,,GRAY,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Gray_upgraded,Each turn[;] guarantee|something gray|(will be upgraded),1,,,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Weapon,Each turn[;] guarantee|a damaging item|of any size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Weapon_upgraded,Each turn[;] guarantee|a damaging item|of any size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Winter Wings,Cost [mana]5: gain [dodge]2 dodge|(Start of turn: gain [mana]1),1,if(getstatusself(MANA) >= 5) { removestatusself(MANA[;]5); inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~No effect!~); },Quick Thinking,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,,2,,,,inflictself(MANA); sfx(~_mana~); e.animate(~flashandshake~);,,,,,,,
Winter Wings_upgraded,Cost [mana]4: gain [dodge]2 dodge|(Start of turn: gain [mana]1),1,if(getstatusself(MANA) >= 4) { removestatusself(MANA[;]4); inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~No effect!~); },Quick Thinking,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,inflictself(MANA); sfx(~_mana~); e.animate(~flashandshake~);,,,,,,,
Winter Wings_downgraded,Cost [mana]7: gain [dodge]2 dodge|(Start of turn: gain [mana]1),1,if(getstatusself(MANA) >= 7) { removestatusself(MANA[;]7); inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~No effect!~); },Quick Thinking,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,inflictself(MANA); sfx(~_mana~); e.animate(~flashandshake~);,,,,,,,
Endless Winter,In three turns[;] enemy gains|[ice]1 freeze each turn,1,jinx(~Endless Winter~[;]~gain [ice]1 freeze each turn~[;]~Gain [ice]1 freeze each turn~[;]~inflict(\~endlesswinterfreeze\~[;]%VAR%);~[;]target[;]self[;]3[;]1); sfx(~_thinghappens~);,Arctic Storm,ODD,,BLUE,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Endless Winter_upgraded,In two turns[;] enemy gains|[ice]1 freeze each turn,1,jinx(~Endless Winter+~[;]~gain [ice]1 freeze each turn~[;]~Gain [ice]1 freeze each turn~[;]~inflict(\~endlesswinterfreeze\~[;]%VAR%);~[;]target[;]self[;]2[;]1); sfx(~_thinghappens~);,Arctic Storm,ODD,,BLUE,,,,,0,NO,NO,,,,,,,,,,,,,
Equipment That Does Nothing,Equipment That Does Nothing,1,self.equipmentused--; self.equipmenthistory.pop();,Broken Gadget,NORMAL,,,,,,,0,YES,NO,excludefromrandomlists|cannotsteal|weakenavoid|shockavoid|altpoisonavoid|curseavoid|internal,,,,,,,,,,e.maintainfury = true; e.preventdefault = true;,,
A Flower,Each turn[;] guarantee|a mana generator|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Flower_upgraded,Each turn[;] guarantee|a mana generator|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Blade,Each turn[;] guarantee|a normal-slot weapon|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Blade_upgraded,Each turn[;] guarantee|a normal-slot weapon|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Wheel Of Fortune,Half enemy's max hp|Can't use limit break,2,var max = target.maxhp; target.maxhp -=target.maxhp/2; attack(max/2); sfx(~_magic~);,Catapult,REQUIRE6|REQUIRE6|REQUIRE6,,RED,change_power,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflictself(SILENCE); sfx(~_silence~);,,,,,,,
Wheel Of Fortune_upgraded,Half enemy's max hp|Can't use limit break,2,var max = target.maxhp; target.maxhp -=target.maxhp/2; attack(max); sfx(~_magic~);,Catapult,REQUIRE6|REQUIRE6,,RED,change_power,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflictself(SILENCE); sfx(~_silence~);,,,,,,,
Divine Ooze,Inflict [poison]1 poison|[gray](Reuseable),2,inflict(POISON); sfx(~_poison~);,Poison Arrow,COUNTDOWN,3,PURPLE,halfcountdown,removereusable,,,5,NO,NO,,,,,,,,,,,,,
Cape Deflect,Gain [shield]5 shield|On <var:number> gain [reduce]1 reduce|[80%]Slots change from EVEN & ODD,2,inflictself(SHIELD[;] 5); sfx(~_shield~); if(d == self.getvar(~number~)) { inflictself(REDUCE); },,NORMAL,,ORANGE,change_power,doublerequirements,,,0,YES,NO,,,,,,var oe = rand([~ODD~[;]~EVEN~]); e.changeslots([oe]); e.animate(~flashandshake~); if(oe == ~ODD~) { self.setvar(~number~[;]5); } else { self.setvar(~number~[;]6); },,,,,,,
Cape Deflect_upgraded,Gain [shield]5 shield|Gain [reduce]1 reduce|[80%]Slots change from EVEN & ODD,1,inflictself(SHIELD[;] 5); inflictself(REDUCE); sfx(~_shield~);,,NORMAL,,ORANGE,change_power,doublerequirements,,,0,YES,NO,,,,,,var oe = rand([~ODD~[;]~EVEN~]); e.changeslots([oe]); e.animate(~flashandshake~);,,,,,,,
A Bat,Each turn[;] guarantee|a [sword]<d6>+N-with-downside|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Bat_upgraded,Each turn[;] guarantee|a [sword]<d6>+N-with-downside|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Bonus,Each turn[;] guarantee|a passive item|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Bonus_upgraded,Each turn[;] guarantee|a passive item|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Priceless Heirloom,Do [sword]<d6>[;] untradeable|[gray](Reuseable),1,attack(d);,Steal,MAX3,,GRAY,increaserange,complicate,,,-1,NO,NO,excludefromrandomlists|cannotsteal|nonnegotiable,,,,,,,,,,,,
A Merry Christmas,Each turn[;] guarantee|a red or green item|of this size,2,,,,,BLACK,change_power,,,,,,,excludefromrandomlists|themecard,,,,,,,,,,,,
A Merry Christmas_upgraded,Each turn[;] guarantee|a red or green item|of this size|(will be upgraded),2,,,,,BLACK,,,,,,,,excludefromrandomlists|themecard,,,,,,,,,,,,
Dapper Snapper,Snap 2 items,2,inflictself(~ncr_snap~[;] 2); sfx(~_ladysnap~);,Time Stop,REQUIRE6,,RED,simplify,doublerequirements,,none,0,YES,NO,,,,,,,,,,,,,
Vacuum,Do [sword]<d6> damage[;]|[90%]On 3[;] drain [heart]4 health instead,1,if (d == 3) { drain(4); sfx(~_drain~); } else { attack(d); sfxdamage(target[;] d); },Blood Sip,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Vacuum_upgraded,Do [sword]<d6> damage[;]|[90%]On 4[;] drain [heart]5 health instead,1,if (d == 4) { drain(5); sfx(~_drain~); } else { attack(d); sfxdamage(target[;] d); },Blood Sip,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Vacuum_downgraded,Do [sword]<d6> damage[;]|[90%]On 2[;] drain [heart]3 health instead,1,if (d == 2) { drain(3); sfx(~_drain~); } else { attack(d); sfxdamage(target[;] d); },Blood Sip,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Goggles,Every turn gain [reduce]2 reduce,2,,Laser Eyes,,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(REDUCE[;] 2); sfx(~_shield~);,,,,,,,
Goggles_upgraded,Every turn gain [reduce]3 reduce,2,,Laser Eyes,,,ORANGE,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(REDUCE[;] 3); sfx(~_shield~);,,,,,,,
Goggles_downgraded,No effect|[80%][gray]''The goggles do nothing!''[],2,,Laser Eyes,,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Study,Gain 3 dice next turn|Lose 2 dice the turn after|1 turn cooldown,1,jinx(~Read Gain~[;]~Gain %VAR% dice~[;]~gain %VAR% dice~[;]~target.bonusdice+= 3; ~[;]self[;]self[;]1[;](3)); jinx(~Read Lose~[;]~Lose %VAR% dice~[;]~lose %VAR% dice~[;]~target.bonusdice-= 2; ~[;]self[;]self[;]2[;](2)); sfx(~_thinghappens~); e.availablenextturn = false;,Plexiglass,COUNTDOWN,12,PINK,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Rusty Wrench,Do [sword]<double> damage on odd|Do [sword]<d6> damage on even,2,if(d % 2 == 0) { attack(d); sfxdamage(target[;] d); } else ( attack(d * 2); sfxdamage(target[;] d * 2); },,MAX5,,,reducesize,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Bunker Buster,Do [sword]3[;] take [sword]1|Immune to errrors|[gray](Reuseable),1,attack(3); attackself(1); sfxdamage(target[;] 3); sfxdamage(self[;] 1);,,COUNTDOWN,4,,change_power,change_power,,,-1,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Bunker Buster_upgraded,Do [sword]5[;] take [sword]1|Immune to errrors|[gray](Reuseable),1,attack(5); attackself(1); sfxdamage(target[;] 3); sfxdamage(self[;] 1);,,COUNTDOWN,4,,,,,,-1,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Bunker Buster_downgraded,Do [sword]3[;] take [sword]3|Immune to errrors|[gray](Reuseable),1,attack(3); attackself(1); sfxdamage(target[;] 3); sfxdamage(self[;] 1);,,COUNTDOWN,4,,,,,,-1,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Encryption,Do [sword]<d6> damage|On 2[;] 12[;] 9[;] or 7[;] lock a dice,2,if(d == 2) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else if(d == 7) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else if(d == 9) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else if(d == 12) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else { attack(d); sfxdamage(target[;] d); },,NORMAL|NORMAL,,YELLOW,reducesize,complicate,,,0,NO,NO,,,,,,,,,,,,,
Dice Printer,Do [sword]<d6> dmg[;] return dice|Immune to errors,2,attack(d); sfxdamage(target[;] d); givedice(d);,,MAX5,,,reducesize,complicate,,,0,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Back Up Drive,On error[;] deal [sword]3 dmg,1,,,,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_error == true){ attack(4); sfxdamage(target[;] 4); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Back Up Drive_upgraded,On error[;] deal [sword]5 dmg,1,,,,,,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_error == true){ attack(6); sfxdamage(target[;] 6); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Back Up Drive_downgraded,On error[;] take [sword]3 dmg,1,,,,,,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_error == true){ attackself(4); sfxdamage(self[;] 4); e.doequipmentaction(self[;]self[;]1[;][][;]0[;]true); },,,,,,
Risky Bet,On jackpot[;] deal [sword]7 dmg|On error[;] take [sword]4 dmg,1,,,,,YELLOW,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_jackpot > 0){ attack(7); sfxdamage(target[;] 7); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); } else if (self.roll_error == true){ attackself(4); sfxdamage(target[;] 4); e.castdirection = -1; e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Risky Bet_upgraded,On jackpot[;] deal [sword]9 dmg|On error[;] take [sword]5 dmg,1,,,,,YELLOW,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_jackpot > 0){ attack(9); sfxdamage(target[;] 9); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); } else if (self.roll_error == true){ attackself(5); sfxdamage(target[;] 5); e.castdirection = -1; e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Risky Bet_downgraded,On jackpot[;] deal [sword]4 dmg|On error[;] take [sword]7 dmg,1,,,,,YELLOW,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_jackpot > 0){ attack(4); sfxdamage(target[;] 4); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); } else if (self.roll_error == true){ attackself(7); sfxdamage(target[;] 7); e.castdirection = -1; e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Antivirus,Do [sword]<d6> damage[;]|on 6[;] set CPU to 3,2,if(d == 6) { self.roll_total = 3; }  attack(d); sfxdamage(target[;] d);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,robotonly,,,,,,,,,,,,
Antivirus_upgraded,Do [sword]<d6> damage[;]|on even[;] set CPU to 3,2,if(d % 2 == 0) { self.roll_total = 3; }  attack(d); sfxdamage(target[;] d);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Antivirus_downgraded,Do [sword]<d6> damage[;]|on 3[;] set CPU to 3,2,if(d == 3) { self.roll_total = 3; }  attack(d); sfxdamage(target[;] d);,,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Copy Machine,Duplicate a dice|30% chance to error an item,1,if(chance(30)) { inflictself(~ncr_error~); } givedice([d[;]d]);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Copy Machine_upgraded,Triplicate a dice|30% chance to error an item,1,if(chance(30)) { inflictself(~ncr_error~); } givedice([d[;]d[;]d]);,,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Copy Machine_downgraded,Duplicate a dice|60% chance to error an item,1,if(chance(60)) { inflictself(~ncr_error~); } givedice([d[;]d]);,,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
The Deal Offer,On jackpot: Do [sword]<double> dmg|On error: Heal [heal]<d6> hp|On neither: Do [sword]<d6> dmg,2,if (self.roll_jackpot > 0){ attack(d * 2); sfxdamage(target[;] d * 2); } else if (self.roll_error == true){ attackself(-d); sfx(~_heal~); } else { attack(d); sfxdamage(target[;] d); },,MAX5,,RED,simplify,complicate,,,0,NO,NO,errorimmune|robotonly,,,,e.changecolour(~RED~); e.castdirection = 1;,,if (self.roll_jackpot > 0){ e.changecolour(~YELLOW~); } else if (self.roll_error == true){ e.changecolour(~GRAY~); e.castdirection = -1; },,,,,,
Cooling Dagger,Do [sword]<d6> damage CPU -1|[gray](Reuseable),1,attack(d); sfxdamage(target[;] d); adjustrobotcounter(-1);,,MAX3,,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,robotonly,,,,,,,,,,,,
Cooling Dagger_upgraded,Do [sword]<d6> damage CPU -2|[gray](Reuseable),1,attack(d); sfxdamage(target[;] d); adjustrobotcounter(-2);,,MAX3,,BRIGHTCYAN,,,,,-1,NO,NO,robotonly,,,,,,,,,,,,
Cooling Dagger_downgraded,Do [sword]<d6> damage CPU -1,1,attack(d); sfxdamage(target[;] d); adjustrobotcounter(-1);,,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Binary Code,Do [sword]10 damage,2,attack(10); sfxdamage(target[;] 10);,,COMBINATION,,RED,change_power,noeffect,,,0,NO,NO,combination:htht|excludefromrandomlists,,,,,,,,,,,,
Binary Code_upgraded,Do [sword]10 damage,2,attack(10); sfxdamage(target[;] 10);,,COMBINATION,,RED,,,,,0,NO,NO,combination:777|excludefromrandomlists,,,,,,,,,,,,
Password,Do [sword]7[;] + rand status|[gray](Reuseable),1,attack(7); sfxdamage(target[;] 7); inflict(rand(loadtext(~christmasspecial/roborandomeffects~))); sfx(~_thinghappens~);,,COMBINATION,,RED,change_power,noeffect,,,-1,NO,NO,combination:123,,,,,,,,,,,,
Password_upgraded,Do [sword]7[;] + 2 rand statuses|[gray](Reuseable),1,attack(7); sfxdamage(target[;] 7); inflict(rand(loadtext(~christmasspecial/roborandomeffects~))); inflict(rand(loadtext(~christmasspecial/roborandomeffects~))); sfx(~_thinghappens~);,,COMBINATION,,RED,,,,,-1,NO,NO,combination:123,,,,,,,,,,,,
Scrap Ooze,Inflict [poison]1 poison|(Always offered as scrap),1,inflict(POISON); sfx(~_poison~);,Anthrax,NORMAL,,,change_power,complicate,,,2,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Ooze_upgraded,Inflict [poison]3 poison|(Always offered as scrap),1,inflict(POISON[;] 3); sfx(~_poison~);,Anthrax,NORMAL,,,change_power,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Heater,Weaken all enemy [ice] items|(Always offered as scrap),1,inflict(~heater~); sfx(~_ice~); sfx(~_weaken~);,Heat,NORMAL,,,change_power,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Heater_upgraded,[90%]Weaken all enemy [blue]cyan items|(Always offered as scrap),1,inflict(~heater+~); sfx(~_ice~); sfx(~_weaken~);,Heat,NORMAL,,,,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Sleet,Inflict [shiver]2 slush|(Always offered as scrap),1,inflict(~Slush~|2); sfx(~_ice~);,Slushie,ODD,,,simplify,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Booby Trap,If enemy has this item|[85%]they take 5 dmg until discarded,1,,Pea Gun,,,GREEN,change_power,noeffect,,,0,NO,NO,weakenavoid|weakenimmune|excludefromrandomlists,,,,,if(self.isplayer) { e.changecolour(~GREEN~); } else { e.changecolour(~RED~); e.animate(~flashandshake~); attackself(5); sfxdamage(self[;] 5); },,,,,,,
Booby Trap_upgraded,If enemy has this item|[85%]they take 7 dmg until discarded,1,,,,,GREEN,,,,,0,NO,NO,weakenavoid|weakenimmune|excludefromrandomlists,,,,,if(self.isplayer) { e.changecolour(~GREEN~); } else { e.changecolour(~RED~); e.animate(~flashandshake~); attackself(7); sfxdamage(self[;] 7); },,,,,,,
Booby Trap_downgraded,If player has this item|[85%]they take 5 dmg until discarded,1,,Pea Gun,,,GREEN,change_power,change_power,,,0,NO,NO,weakenavoid|weakenimmune|excludefromrandomlists,,,,,if(self.isplayer) { e.changecolour(~RED~); e.animate(~flashandshake~); attackself(5); sfxdamage(self[;] 5); } else { e.changecolour(~GREEN~); },,,,,,,
Mouse Trap,Do [sword]<double> damage|No effect for enemy,1,if(self.isplayer) {  attack(d * 2); sfxdamage(target[;] d * 2); } else {  self.textparticle(~No effect!~); },,MAX3,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,if(self.isplayer) {  e.changecolour(~RED~);  e.changeslots([~MAX3~]);  } else {  e.changecolour(~GRAY~);  e.animate(~flashandshake~);  e.changeslots([]);  },,,,,,,
Mouse Trap_upgraded,Do [sword]<double> damage|[90%]On enemy they take [sword]<d6> dmg,1,if(self.isplayer) {  attack(d * 2); sfxdamage(target[;] d * 2); } else { bonus(d * 200); /*based on the metric of enemy gaining 100 points per damage dealt*/ attackself(d); sfxdamage(self[;] d); },,MAX3,,RED,,,,,0,NO,NO,,,,,,if(self.isplayer) {  e.changecolour(~RED~);  e.changeslots([~MAX3~]);  } else {  e.changecolour(~GRAY~);  e.animate(~flashandshake~);  e.castdirection = -1; },,,,,,,
Mouse Trap_downgraded,Do [sword]<d6> damage|[90%]On enemy they take [sword]<d6> dmg,1,if(self.isplayer) {  attack(d); sfxdamage(target[;] d); } else {  attackself(d); sfxdamage(self[;] d); },,MAX3,,RED,,,,,0,NO,NO,,,,,,if(self.isplayer) {  e.changecolour(~RED~);  e.changeslots([~MAX3~]);  } else {  e.changecolour(~GRAY~);  e.animate(~flashandshake~);  e.castdirection = -1; },,,,,,,
Tennis Racket,Do [sword]<d6> dmg[;] on 6[;]|reverse next enemy move,2,attack(d); if(d == 6) { inflict(~reversenexttarget~); } sfxdamage(target[;] d);,Disorient,NORMAL,,YELLOW,reducesize,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tennis Racket_downgraded,Do [sword]<d6> dmg[;] on 3[;]|reverse next enemy move,2,attack(d); if(d == 3) { inflict(~reversenexttarget~); } sfxdamage(target[;] d);,,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Tennis Racket_weakened,Do [sword]<d6> dmg[;] on 3[;]|reverse next enemy move,2,attack(d); if(d == 3) { inflict(~reversenexttarget~); } sfxdamage(target[;] d);,,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Greedy Crowbar,Reduce countdowns by <d6>|Enemy can't steal this,1,boostcountdowns(d);,Accelerate,NORMAL,,YELLOW,change_power,complicate,,,0,YES,NO,cannotsteal|excludefromrandomlists,1,,,,,,,,,,,
Greedy Crowbar_upgraded,Reduce countdowns by <d6>|Enemy can't steal this|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,NORMAL,,YELLOW,,,,,2,YES,NO,cannotsteal|excludefromrandomlists,,,,,,,,,,,,
A Spell,Each turn[;] guarantee|a valid Witch spell|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Spell_upgraded,Each turn[;] guarantee|a valid Witch spell|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Warm,Each turn[;] guarantee|something red[;]|orange[;] or yellow|of this size,1,,,,,RED,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Warm_upgraded,Each turn[;] guarantee|something red[;]|orange[;] or yellow|(will be upgraded),1,,,,,RED,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Cold,Each turn[;] guarantee|something blue[;]|purple[;] or green|of this size,1,,,,,BRIGHTCYAN,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Cold_upgraded,Each turn[;] guarantee|something blue[;]|purple[;] or green|of this size|(will be upgraded),1,,,,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Large,Each turn[;] guarantee an|item with 2 or more slots|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Large_upgraded,Each turn[;] guarantee an|item with 2 or more slots|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Finale,Each turn[;] guarantee|a Finale card|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Finale_upgraded,Each turn[;] guarantee|a Finale card|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Scrap,Each turn[;] guarantee|a scrap item|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Scrap_upgraded,Each turn[;] guarantee|a scrap item|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Shield,Each turn[;] guarantee|a shielding item|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Shield_upgraded,Each turn[;] guarantee|a shielding item|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Gadget Smash,Break a gadget|Do [sword]9 damage|[gray](Errors after 2nd turn),1,Gadget.changegadget(self[;] Gadget.getcurrentgadget(self)[;] ~Broken Gadget[][]~); attack(9); sfxdamage(target[;] 9); screenshake(); sfx(~jester_delete~);,Perfect Cut,COUNTDOWN,14,PINK,halfcountdown,noeffect,,,0,NO,YES,cannotsteal|excludefromrandomlists,,,,,if(turn > 2){ roboterror(self[;][e]); };,,,,,,,
Sticker,Combine dice|[gray](Reuseable),1,givedice((d)|~combinedice~);,Magic Spanner,MAX2|MAX2,,RED,increaserange,removereusable,,,3,YES,NO,,,,,,,,,,,,,
Earth Shield,Add [shield]<d6> shield[comma]|[weaken]Weakens enemy on 3,1,if(d == 3){ inflict(WEAKEN); sfx(~_weaken~|~~|0.2); } inflictself(SHIELD| d); sfx(~_shield~|~~|0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(d == 3){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Earth Shield_upgraded,Add [shield]<d6> shield[comma]|[weaken]Weakens enemy on 4,1,if(d == 4){ inflict(WEAKEN); sfx(~_weaken~|~~|0.2); } inflictself(SHIELD| d); sfx(~_shield~|~~|0.2);,Protection,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,if(d == 4){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Earth Shield_downgraded,Add [shield]<d6> shield,1,inflictself(SHIELD| d); sfx(~_shield~|~~|0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Thorn Blockade,Add [shield]<d6> shield[comma]|gain [thorns]1 thorn,1,inflictself(THORNS); sfx(~_thorns~|~~|0.2); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2);,Protection,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,,,,,,,,,,,,
Thorn Blockade_downgraded,Add [shield]<d6> shield,1, inflictself(SHIELD| d); sfx(~_shield~|~~|0.2);,Protection,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,,,,,,,,,,,,
Small Helmet,Add [shield]<d6> shield[comma]|on 1[comma] reduce [reduce]1 instead,1,if(d == 1){ inflictself(REDUCE); } else {inflictself(SHIELD| d); }sfx(~_shield~|~~|0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Small Helmet_upgraded,Add [shield]<d6> shield[comma]|on 2 or less[comma] reduce [reduce]1 instead,1,if(d <= 2){ inflictself(REDUCE); } else {inflictself(SHIELD| d); }sfx(~_shield~|~~|0.2);,Protection,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Small Helmet_downgraded,Add [shield]<d6> shield,1,inflictself(SHIELD| d);sfx(~_shield~|~~|0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Syringe,Take [sword]<d6> damage[comma]|then restore [heal]<double> health,1,attackself(d);attackself(-d*2);sfxdamage(self|d);sfx(~_heal~|~~|0.2);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Syringe_upgraded,Do [sword]<d6> to everyone[comma]|then restore [heal]<double> health,1,attackself(d);attackself(-d*2);sfxdamage(target|d);sfxdamage(self|d);sfx(~_heal~|~~|0.2);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Syringe_downgraded,Take [sword]<d6> damage[comma]|then restore [heal]<d6> health,1,attackself(d);attackself(-d);sfxdamage(self|d);sfx(~_heal~|~~|0.2);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Forefront,Lose [heart]<d6> health[comma]|add [shield]<double> shield,1,pierceattackself(d);inflictself(SHIELD|d*2);sfx(~_shield~|~~|0.2);sfx(~_heal~|~~|0.2);,Regenerate,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Forefront_downgraded,Lose [heart]<d6> health[comma]|add [shield]<d6> shield,1,pierceattackself(d);inflictself(SHIELD|d);sfx(~_shield~|~~|0.2);sfx(~_heal~|~~|0.2);,Regenerate,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,,,,,,,,,,,,
Skewer,Add [thorns]1 thorn[comma]|flip a dice on its side,1,inflictself(THORNS);sfx(~_thorns~|~~|0.2);var returnval = [1|2|3|4|5|6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval));,Random Roll,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,,1,,,,,,,,,,,
Skewer_upgraded,Add [thorns]1[comma] flip on its side|[gray](Reuseable),1,inflictself(THORNS);sfx(~_thorns~|~~|0.2);var returnval = [1|2|3|4|5|6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval));,Random Roll,NORMAL,,GREEN,change_power,change_function,,,2,YES,NO,,,,,,,,,,,,,
Skewer_downgraded,Flip a dice on its side,1,var returnval = [1|2|3|4|5|6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval));,Random Roll,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,,,,,,,,,,,,,
Sand Cauldron,Burn [fire]1 dice[comma]|roll a two,1,inflict(FIRE);sfx(~_fire~|~~|0.2);givedice(2);,Ember,NORMAL,,RED,change_power,change_function,,,0,NO,NO,,1,,,,,,,,,,,
Sand Cauldron_upgraded,Burn [fire]1 dice[comma] roll a two|[gray](Reuseable),1,inflict(FIRE);sfx(~_fire~|~~|0.2);givedice(2);,Ember,NORMAL,,RED,change_power,change_function,,,2,NO,NO,,,,,,,,,,,,,
Sand Cauldron_downgraded,Burn [fire]1 dice,1,inflict(FIRE);sfx(~_fire~|~~|0.2);,Ember,NORMAL,,RED,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Fiasco,Inflict [poison] poison[comma]|[lock] lock and [weaken] weaken,1,sfx(~_magic~|~~|0);inflict(POISON);inflict(LOCK);inflict(WEAKEN);,Overload,COUNTDOWN,7,PURPLE,change_power,change_function,,,0,NO,NO,,1,,,,,,,,,,,
Fiasco_upgraded,Inflict [poison]2 poison[comma]|[lock]2 lock and [weaken]2 weaken,1,inflict(POISON|2);inflict(LOCK|2);inflict(WEAKEN|2);,Overload,COUNTDOWN,7,PURPLE,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Fiasco_downgraded,Inflict [poison] poison[comma]|[lock] lock or [weaken] weaken,1,inflict(rand([POISON|LOCK|WEAKEN]));sfx(~_magic~|~~|0);,Overload,COUNTDOWN,7,PURPLE,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Weird Flame,6-4: [vanish]1 fade|3-1: [fire]1 burn,1,if(d >= 4){ inflict(~fade~| 1); sfx(~_vanish~|~~|0.2); } else {inflict(FIRE| 1); sfx(~_fire~|~~|0.2);},Hellfire,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Weird Flame_upgraded,6-4: [vanish]2 fade|3-1: [fire]2 burn,1,if(d >= 4){ inflict(~fade~| 2); sfx(~_vanish~|~~|0.2); } else {inflict(FIRE| 2); sfx(~_fire~|~~|0.2);},Hellfire,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Flame_downgraded,4: [vanish]1 fade|3: [fire]1 burn,1,if(d == 4){ inflict(~fade~| 1); sfx(~_vanish~|~~|0.2); } else {inflict(FIRE| 1); sfx(~_fire~|~~|0.2);},Hellfire,RANGE34,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Magic Axe,Do [sword]8 damage,1,sfx(~_magic~);attack(8);sfxdamage(target|8);,Overload,COUNTDOWN,8,PINK,change_power,change_function,,,0,NO,NO,,1,,,,,,,,,,,
Magic Axe_upgraded,Do [sword]8 damage[comma]|reduce countdowns by 4,1,sfx(~_magic~);attack(8);sfxdamage(target|4);boostcountdowns(4);,Overload,COUNTDOWN,8,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Magic Axe_downgraded,Do [sword]4 damage,1,sfx(~_magic~);attack(4);sfxdamage(target|4);,Overload,COUNTDOWN,8,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Sheer Wall,Inflict [vanish]Vanish,1,sfx(~_magic~);inflict(VANISH);sfx(~_blind~|~~|0.2);,Overload,REQUIRE6,,PINK,simplify,doublerequirements,,,0,NO,NO,,2,,,,,,,,,,,
Half Moon Cauldron,Set a random dice to 6,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 6){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(6| self.screenposition()); sfx(~diceroll~);} },Reversal,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,fd,1,,,,,,,,,,,
Heater,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_upgraded,Weaken all equipment|that are cyan,1,inflict(~heater+~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_downgraded,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,REQUIRE3|REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sponge@sizesmall,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Sponge~[;] true[;] false[;] e);,,,,,,,,,
Sponge,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_upgraded,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Sponge+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_upgraded,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_weakened,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Sponge+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_weakened,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tableful,At the start of the second|turn[;] everyone heals [heart]4 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-4); attack(-4); sfx(~_heal~); },,,,,,,
Tableful_upgraded,At the start of the second|turn[;] everyone heals [heart]6 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-6); attack(-6); sfx(~_heal~); },,,,,,,
Tableful_downgraded,At the start of the second|turn[;] everyone heals [heart]2 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-2); attack(-2); sfx(~_heal~); },,,,,,,
Christmas Bell,-1 to dice value|(Cost [mana]1[]: roll a one),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BLUE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Christmas Bell_downgraded,-1 to dice value,1,givedice(d - 1);,Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Christmas Bell_upgraded,-1 to dice value|(Cost [mana]1[]: also duplicate),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]d - 1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Coffee Pot,Do [sword]1 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(1); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,1,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_upgraded,Do [sword]2 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(2); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_downgraded,Do [sword]1 damage[comma]|roll a new dice,1,attack(1); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,,,,,,,,,,,,
Petri Dish,Do [sword]3 damage[;] copy|Petri Dish after the battle,1,attack(3); sfxdamage(target[;]3);,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_upgraded,Do [sword]3 damage[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,attack(3); sfxdamage(target[;]3);,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Petri Dish_downgraded,No effect[;] copy|Petri Dish after the battle,1,,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_weakened,No effect[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Creative Crisis,[95%]Create no gadgets this fight[newline][95%]Current gadgets still break,1,if(!simulation){ inflictself(~creativecrisis~); screenshake(); sfx(~upgradeequipment~); e.destroydice(); } /*e.changeslots([]); e.fulldescription = ~[95%]Create no gadgets this fight[newline][95%]Current gadgets still break[newline][gray](activated)~; }*/ /*var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } }*/,Randomizer,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,YES,combination:hhhh|cannotsteal|excludefromrandomlists|cannotreuse,,Rules.inventor_inspiration = true;,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Creative Crisis_downgraded,No effect,1,,Randomizer,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:hhhh|cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Consumerism,[95%]Create an additional gadget|[95%]after this fight (stacks),1,inflictself(~consumerism~); screenshake(); sfx(~upgradeequipment~); self.setvar(~consumerismused~|2 + getstatusself(~consumerism~)); self.setvar(~consumerismusedever~|true);,Perfect Cut,COMBINATION,,PINK,change_power,noeffect,,,0,YES,NO,combination:ttt|cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Consumerism_upgraded,[95%]Create an additional gadget|[95%]after this fight (stacks),1,inflictself(~consumerism~); screenshake(); sfx(~upgradeequipment~); self.setvar(~consumerismused~|2 + getstatusself(~consumerism~)); self.setvar(~consumerismusedever~|true);,Perfect Cut,COMBINATION,,PINK,change_power,noeffect,,,0,YES,NO,combination:tt|cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Creative Crisis_upgraded,[95%]Create no gadgets this fight[newline][95%]Current gadgets still break,1,if(!simulation){ inflictself(~creativecrisis~); screenshake(); sfx(~upgradeequipment~); e.destroydice(); } /*e.changeslots([]); e.fulldescription = ~[95%]Create no gadgets this fight[newline][95%]Current gadgets still break[newline][gray](activated)~; }*/ /*var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } }*/,Randomizer,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,YES,combination:hhh|cannotsteal|excludefromrandomlists|cannotreuse,,Rules.inventor_inspiration = true;,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Renunciation,You can't roll <d6>|this fight,1,var totalamount  = 0; for(a in 1...7) { if(getstatusself(~never~ +a) > 0) { totalamount += 1; } } if(totalamount < 6) { inflictself(~never~ +d); sfx(~magic_gaindice~[;]~~[;]0.2); } else { self.textparticle(~No effect!~); },Infinity Mirror,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
broken upgrade tester,don't mind me,1,/*by diane*/,,,,,,,,,,,,excludefromrandomlists,,,,var alleqever = getequipmentlist(null| []| []); shuffle(alleqever); while(alleqever.length > 0) { var testeq = new elements.Equipment(alleqever.pop()); var testeqname = testeq.name; trace(testeqname); if(testeq.upgradetype != ~~) { testeq = new elements.Equipment(testeq.name + ~+~); } if(testeq == null) { trace(~==========found a null upgrade: ~  + testeqname +  ~===========~); } } /*in practice the 'found a null upgrade!' trace part does nothing because the game crashes before this upon trying to create the invalid equipment*/,,,,,,,,
broken downgrade tester,don't mind me,1,/*by diane - this one actually came first (and is probably the one that actually works); and was most relevant as warrior; who can get any equipment not marked excludefromrandomlists or fooonly*/,,,,,,,,,,,,excludefromrandomlists,,,,var alleqever = getequipmentlist(null| []| []); shuffle(alleqever); while(alleqever.length > 0) { var testeq = new elements.Equipment(alleqever.pop()); var testeqname = testeq.name; trace(testeqname); if(testeq.weakentype != ~~) { testeq = new elements.Equipment(testeq.name + ~-~); } if(testeq == null) { trace(~==========found a null downgrade: ~  + testeqname +  ~===========~); } },,,,,,,,
Diary Burning,Consume spell in slot <slotdoubles>|to do [fire]16 damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(16|FIRE);sfxdamage(target|16);sfx(~_fire~|~~|0.2); Spellbook.erase(d); },,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|witchonly,1,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Diary Burning_upgraded,Consume spell in slot <d6>|to do [fire]16 damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(16|FIRE);sfxdamage(target|16);sfx(~_fire~|~~|0.2); Spellbook.erase(d); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Diary Burning_downgraded,Consume spell in slot <slotdoubles>|to do [sword]12 damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(12);sfxdamage(target|12); Spellbook.erase(d); },,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Shadow Clone,Duplicate all dice[comma]|lose [heart]1 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){pierceattackself(dicelist.length);sfx(~_curse~);sfx(~diceroll~);givedice(dicelist);},Clone Device,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:ththth,2,,,,,,,,,,,
Shadow Clone_upgraded,Duplicate all dice[comma]|lose [heart]1 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){pierceattackself(dicelist.length);sfx(~_curse~);sfx(~diceroll~);givedice(dicelist);},Clone Device,COMBINATION,,PURPLE,,,,,0,YES,NO,combination:thth,,,,,,,,,,,,
Shadow Clone_downgraded,Duplicate all dice[comma]|lose [heart]2 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){pierceattackself(dicelist.length * 2);sfx(~_curse~);sfx(~diceroll~);givedice(dicelist);},Clone Device,COMBINATION,,PURPLE,,,,,0,YES,NO,combination:ththth,,,,,,,,,,,,
Shadow Clone_weakened,Duplicate all dice[comma]|lose [heart]2 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){pierceattackself(dicelist.length * 2);sfx(~_curse~);sfx(~diceroll~);givedice(dicelist);},Clone Device,COMBINATION,,PURPLE,,,,,0,YES,NO,combination:thth,,,,,,,,,,,,
Blighted Zap@LL,Do [sword]<d6> Damage|Inflict [vanish][purple]Blighted|[gray](Reuseable),2,attack(d); sfxdamage(target[;] d); sfx(~_vanish~); inflict(~Blighted~);,Oh No!,EVEN,,PURPLE,simplify,complicate,,,2,NO,NO,,,,,,,,,,,,,
Wheel Spin,Do [sword]9 damage|25% chance to do [sword]25 dmg,2,if (chance(25)) { attack(25); sfxdamage(target[;] 25); } else { attack(9); sfxdamage(target[;] 9); },,REQUIRE6|REQUIRE6,,RED,simplify,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Lie,Do [sword]3 damage|40% chance to lock a dice,1,attack(3); sfxdamage(target[;] 3); if(chance(40)) { inflict(LOCK); sfx(~_lock~); },,COUNTDOWN,3,,halfcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Lie_downgraded,Do [sword]2 damage|20% chance to lock a dice,1,attack(2); sfxdamage(target[;] 2); if(chance(20)) { inflict(LOCK); sfx(~_lock~); },,COUNTDOWN,3,,,,,,0,NO,NO,,,,,,,,,,,,,
Another Song,Removes all red notes|Gain [rednote]2 red notes,1,removestatusself(~rednote~[;] ALL); inflictself(~rednote~[;] 2); sfx(~_thinghappens~);,,EVEN,,RED,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Healthy Song,Removes all green notes|Gain [greennote]2 green notes,1,removestatusself(~greennote~[;] ALL); inflictself(~greennote~[;] 2); sfx(~_thinghappens~);,,ODD,,GREEN,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Christmas Jingle,Removes all red[;] green[;] |and reen notes|Gain [reennote][red]2 [green]Reen[red] Notes,2,removestatusself(~rednote~[;] ALL); removestatusself(~greennote~[;] ALL); removestatusself(~reennote~[;] ALL); inflictself(~reennote~[;] 2); sfx(~_thinghappens~);,,COUNTDOWN,10,RED,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Rainbow Inclusion,Remove all [red]Ra[green]in[black]bo[orange]w_N[blue]ot[yellow]es|Gain [bownote]2 [red]Ra[green]in[black]bo[orange]w_N[blue]ot[yellow]es,2,removestatusself(~bownote~[;] ALL); inflictself(~bownote~[;] 2); sfx(~_thinghappens~);,,EVEN|ODD,,PINK,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Dark Song,Remove all black notes|Gain [blacknote]2 Black_Notes,1,removestatusself(~blacknote~[;] ALL); inflictself(~blacknote~[;] 2); sfx(~_thinghappens~);,,MAX4,,,increaserange,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Mic Check,Requires 1 2 or 3 randomly|[85%]Remove all of a random note|Gain a random note,2,var remove = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); removestatusself(remove[;] ALL); sfx(~_thinghappens~);,,REQUIRE1,,,change_power,change_power,,,0,YES,NO,,,,,e.changecolour(~gray~);,var blah = rand([~REQUIRE1~[;]~REQUIRE2~[;]~REQUIRE3~]); e.changeslots([blah]); e.animate(~flashandshake~);,,,,var note = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); inflictself(note); if (note == ~rednote~){ e.changecolour(~red~); } else if (note == ~greennote~){ e.changecolour(~green~); }else if (note == ~reenote~){ e.changecolour(~red~); } else if (note == ~bluenote~){ e.changecolour(~cyan~); } else if (note == ~yellownote~){ e.changecolour(~yellow~); } else if (note == ~orangenote~){ e.changecolour(~orange~); } else if (note == ~bownote~){ e.changecolour(~pink~); } else if (note == ~purpnote~){ e.changecolour(~purple~); } else if (note == ~blacknote~){ e.changecolour(~black~); },,,
Autotone,Automatically get a random|note every 5 item uses|(items used: <var:itemuses>),2,,,,,,,,,,0,NO,NO,,,self.setvar(~itemuses~[;]0);,self.setvar(~itemuses~[;]0);,e.changecolour(~gray~);,self.setvar(~itemuses~[;]0);,if(!onlimit) { /*kludge so if you have more than one autohook the recorded equipment use count isn't inflated*/ var alleq = [for(eq in self.equipment) if(eq.name == ~Autotone~) eq]; if(alleq[0] == e) self.setvar(~itemuses~[;]self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 5 == 0) { var note = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); sfx(~_thinghappens~); e.animate(~flashandshake~); inflictself(note); if (note == ~rednote~){ e.changecolour(~red~); } else if (note == ~greennote~){ e.changecolour(~green~); }else if (note == ~reenote~){ e.changecolour(~red~); } else if (note == ~bluenote~){ e.changecolour(~cyan~); } else if (note == ~yellownote~){ e.changecolour(~yellow~); } else if (note == ~orangenote~){ e.changecolour(~orange~); } else if (note == ~bownote~){ e.changecolour(~pink~); } else if (note == ~purpnote~){ e.changecolour(~purple~); } else if (note == ~blacknote~){ e.changecolour(~black~); }  } },,,,,,
Mic Check_upgraded,[85%]Requires even or odd randomly|[85%]Remove 1 of a random note|Gain a random note,2,var note = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); var remove = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); removestatusself(remove[;] ALL); inflictself(note); sfx(~_thinghappens~); if (note == ~rednote~){ e.changecolour(~red~); } else if (note == ~greennote~){ e.changecolour(~green~); }else if (note == ~reenote~){ e.changecolour(~red~); } else if (note == ~bluenote~){ e.changecolour(~cyan~); } else if (note == ~yellownote~){ e.changecolour(~yellow~); } else if (note == ~orangenote~){ e.changecolour(~orange~); } else if (note == ~bownote~){ e.changecolour(~pink~); } else if (note == ~purpnote~){ e.changecolour(~purple~); } else if (note == ~blacknote~){ e.changecolour(~black~); },,REQUIRE1,,,,,,,0,YES,NO,,,,,e.changecolour(~gray~);,var blah = rand([~ODD~[;]~EVEN~]); e.changeslots([blah]); e.animate(~flashandshake~);,,,,,,,
Mic Check_downgraded,Requires 1 2 or 3 randomly|[85%]Remove all of a random note,2,var remove = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); removestatusself(remove[;] ALL); sfx(~_thinghappens~);,,REQUIRE1,,,,,,,0,YES,NO,,,,,e.changecolour(~gray~);,var blah = rand([~REQUIRE1~[;]~REQUIRE2~[;]~REQUIRE3~]); e.changeslots([blah]); e.animate(~flashandshake~);,,,,,,,
Frozen Touch,Do [ice]<d6> damage,2,attack(d[;] ICE); sfxdamage(target[;] d);,,ODD,,BRIGHTCYAN,add2,complicate,,,0,NO,NO,,,,,,,,,,,,,
White Christmas,Freeze a dice|[gray](Reuseable),1,inflict(ICE); sfx(~_ice~);,,MAX4,,BRIGHTCYAN,simplify,complicate,,,2,NO,NO,,,,,,,,,,,,,
Swap Out,Switch to another Miser,1,if(!simulation) { bonus(1000000000); if(self.name == ~Snow Miser~){ reunion_transform(self[;]~Heat Miser~[;]true); } else if(self.name == ~Heat Miser~){ reunion_transform(self[;]~Snow Miser~[;]true); } },,COUNTDOWN,4,PINK,halfcountdown,noeffect,,,0,YES,NO,cannotsteal,,,,,,,,,,,,
Scorching Blast,Do [fire]8 damage,2,attack(8[;] FIRE); sfxdamage(target[;] 8);,,REQUIRE6,,RED,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Scorching Blast_upgraded,Do [fire]8 damage,2,attack(8[;] FIRE); sfxdamage(target[;] 8);,,MIN5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Hot Headed,[90%]Do [fire]<d6> damage[;] Burn a dice|[gray](Reuseable),1,attack(d[;] FIRE); sfxdamage(target[;] d); inflict(FIRE);,,MAX3,,RED,increaserange,decreaserange,,,2,NO,NO,,,,,,,,,,,,,
Fairy Lights,Get 3x[dice]1s next turn,1,inflictself(~stash1~[;]3); inflictself(~illuminate~); sfx(~_thinghappens~);,Very Unlucky Roll,MIN4,,YELLOW,increaserange,complicate,,,0,YES,NO,,1,,,,,,,,,,,
