Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
[BEGIN REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Gatling Pea,Do [sword]2 damage[;] roll a 1|,1,attack(2); sfxdamage(target[;]2); givedice(1);,Pea Gun,COUNTDOWN,3,RED,change_power,change_power,,,-1,NO,NO,rs,,,,,,,,,,,,
Gatling Pea_upgraded,[sword]2 damage[;] return excess|,1,var dice = self.getvar(~dice~); attack(2); sfxdamage(target[;]2); if(dice > 0) { givedice(dice); };,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,self.setvar(~dice~[;]e.dicehistory[e.dicehistory.length-1].basevalue - e.remainingcountdown); trace(~excess: ~ + self.getvar(~dice~) + ~ cd: ~ + e.remainingcountdown);,,,,,
Gatling Pea_downgraded,Do [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,,,,,,
Bloody Drill,Do [sword]<d6> damage[;] drain|[heart]1 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_upgraded,Do [sword]<d6> damage[;] drain|[heart]2 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Blood Sip,NORMAL,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu,Inflict [ice]2 freeze|On double 3: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d == 3) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Frosty Bufu_upgraded,Inflict [ice]2 freeze|On double odd: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d % 2 == 1) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu_downgraded,Do [ice]6 damage,1,attack(6[;]ICE); sfxdamage(target[;]6);,Arctic Storm,REQUIRE3|REQUIRE3,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi,Inflict [fire]2 burn|On double 3: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d == 3) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Burning Agi_upgraded,Inflict [fire]2 burn|On double odd: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d % 2 == 1) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi_downgraded,Do [fire]6 damage,1,attack(6[;]FIRE); sfxdamage(target[;]6);,Hellfire,REQUIRE3|REQUIRE3,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 3[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 3) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_upgraded,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 5[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 5) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX5,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_downgraded,Do [weaken]<d6> damage[;]|inflict [weaken]1 weaken,1,attack(d[;]WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Quake Sigma,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX3|MAX3,,PURPLE,change_power,decreaserange,,,0,NO,NO,rs,1,,,,,,,,,,,
Quake Sigma_upgraded,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX4|MAX4,,PURPLE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler,Inflict [shock]<d6> shock[;]|reroll the dice,2,inflict(SHOCK[;]d); sfx(~_shock~); givedice(rand([1[;]2[;]3[;]4[;]5[;]6]));,Zap,MAX3,,YELLOW,change_power,decreaserange,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler_upgraded,Inflict [shock]<d6> shock[;]|reroll with higher value,2,inflict(SHOCK[;]d); sfx(~_shock~); var finalv = []; for(dicev in (d+1)...7) { finalv.push(dicev); }; givedice(rand(finalv));,Zap,MAX3,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade,Do [sword]<d6> damage[;]|on 1 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 5 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX4|FREE1,,ORANGE,change_power,change_power,weaken,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_upgraded,Do [sword]<d6> damage[;]|on 1 or 6[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 7 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_downgraded,Do [sword]<d6> damage[;]|on 2 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 2 # d == 4) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX2|MAX2,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch,Do [sword]2 damage 3-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_upgraded,Do [sword]2 damage 5-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_downgraded,Do [sword]2 damage 3-6 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch,Do [sword]7 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(14); sfxdamage(target[;]14); self.textparticle(~Success!~); } else { attack(7); sfxdamage(target[;]7); };,Power Up,NORMAL|NORMAL,7,PINK,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Lucky Punch_upgraded,Do [sword]9 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(18); sfxdamage(target[;]18); self.textparticle(~Success!~); } else { attack(9); sfxdamage(target[;]9); };,Power Up,NORMAL|NORMAL,9,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch_downgraded,Do [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele,Do [shock]<d6> damage[;]|on 5[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 5) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_downgraded,Do [shock]<d6> damage|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_upgraded,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 6) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Worm Scarf,At the start of each turn[;]|gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_magic~);,Protection,,,PURPLE,change_power,change_power,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,1,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Worm Scarf_upgraded,At the start of each turn[;]|gain [reduce]1 reduce[;] [thorns]1 thorn,1,inflictself(REDUCE); inflictself(THORNS); sfx(~_magic~);,Protection,,,PURPLE,,,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Worm Scarf_downgraded,No effect,1,,Protection,,,PURPLE,,,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,,,,,,,,,,,,
Melon Cauldron,Do [sword]3 damage[;]|get two new dice,1,attack(3); sfxdamage(target[;]3); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);,Random Roll,REQUIRE6,,GREEN,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);
Melon Cauldron_upgraded,Do [ice]3 dmg[;] +[ice]1 freeze[;]|get two new dice,1,attack(3[;] ICE); inflict(ICE); sfxdamage(target[;]3); sfx(~_ice~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);,Random Roll,REQUIRE6,,GREEN,,,,,0,NO,NO,rs,,,,,,,,,,,,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);
Melon Cauldron_downgraded,Do [sword]3 damage[;]|get a new dice,1,attack(3); sfxdamage(target[;]3); givedice();,Random Roll,REQUIRE6,,GREEN,,,,,0,NO,NO,rs,,,,,,,,,,,,givedice();
Eternity Cannon,Do [sword]5 damage now[;] and|at the start of each turn|[gray](once per battle),1,attack(5); sfxdamage(target[;] 5); inflictself(~eternitycannon~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,change_power,change_power,,,0,NO,YES,rs,2,,,,,,,,,,,
Eternity Cannon_upgraded,Do [sword]5 damage now[;] and|at the start of each turn,1,attack(5); sfxdamage(target[;]5); inflictself(~eternitycannon~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Eternity Cannon_downgraded,Do [sword]3 damage now[;] and|at the start of each turn|[gray](once per battle),1,attack(3); sfxdamage(target[;]3); inflictself(~eternitycannondowngraded~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,,,,,0,NO,YES,rs,,,,,,,,,,,,
Enchanted Missile,Do [sword]<evar:enchantedmissiledmg> dmg on start turn|Use to add [sword]3,1,e.setvar(~enchantedmissiledmg~[;]e.getvar(~enchantedmissiledmg~)+3); sfx(~_mana~);,Plasma Gun,EVEN|EVEN,,YELLOW,simplify,change_power,,,0,YES,NO,excludefromrandomlists|rs,1,e.resetvar(~enchantedmissiledmg~);,e.resetvar(~enchantedmissiledmg~);,,var enchdmg = e.getvar(~enchantedmissiledmg~); if(enchdmg > 0) { attack(enchdmg); sfxdamage(target[;]enchdmg); e.animate(~flashandshake~); },,,,,,,
Enchanted Missile_downgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target[;]5);,Plasma Gun,EVEN|EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|rs,,e.resetvar(~enchantedmissiledmg~);,e.resetvar(~enchantedmissiledmg~);,,,,,,,,,
Chain Knife,Do [sword]<d6> damage[;]|reduce countdowns by 2|,1,attack(d); boostcountdowns(2); sfxdamage(target[;]d);,Plasma Gun,MAX2,,RED,change_power,change_power,,,3,NO,NO,,1,,,,,,,,,,,boostcountdowns(2);
Chain Knife_upgraded,Do [sword]<d6> damage[;]|reduce countdowns by <double>|,1,attack(d); boostcountdowns(d*2); sfxdamage(target[;]d);,Plasma Gun,MAX2,,RED,,,,,3,NO,NO,,,,,,,,,,,,,boostcountdowns(d*2);
Chain Knife_downgraded,Do [sword]<d6> damage[;]|reduce countdowns by 2,1,attack(d); boostcountdowns(2); sfxdamage(target[;]d);,Plasma Gun,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Cloak and Dagger,Gain [shield]<d6> shield[;]|replace this with Shiv,1,inflictself(SHIELD[;]d); sfx(~_shield~); giveequipment(~Shiv~[;]true[;]false[;]e);,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,cannotreuse,1,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Cloak and Dagger_upgraded,Gain [shield]<d6> shield[;]|replace this with Shiv+,1,inflictself(SHIELD[;]d); sfx(~_shield~); giveequipment(~Shiv+~[;]true[;]false[;]e);,Barricade,MAX5,,ORANGE,,,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Cloak and Dagger_downgraded,Gain [shield]1 shield[;]|replace this with Shiv,1,inflictself(SHIELD[;]1); sfx(~_shield~); giveequipment(~Shiv~[;]true[;]false[;]e);,Barricade,REQUIRE1,,ORANGE,,,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Cloak and Dagger_weakened,Gain [shield]1 shield[;]|replace this with Shiv+,1,inflictself(SHIELD[;]1); sfx(~_shield~); giveequipment(~Shiv+~[;]true[;]false[;]e);,Barricade,REQUIRE1,,ORANGE,,,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Shiv,At the start of your turn[;] do|[sword]2 damage and replace this|with Cloak and Dagger,1,attack(2); sfxdamage(target[;]2); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e);,Pea Gun,,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Shiv_upgraded,At the start of your turn[;] do|[sword]3 damage and replace this|with Cloak and Dagger+,1,attack(3); sfxdamage(target[;]3); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e);,Pea Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Shiv_downgraded,At the start of your turn[;] do|[sword]1 damage and replace this|with Cloak and Dagger,1,attack(1); sfxdamage(target[;]1); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e);,Pea Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Shiv_weakened,At the start of your turn[;] do|[sword]1 damage and replace this|with Cloak and Dagger+,1,attack(1); sfxdamage(target[;]1); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e);,Pea Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Adamant Rail,Do [sword]3 damage[;]|33% chance to repeat|,2,attack(3); sfxdamage(target[;]3);,Lucky Shot,COUNTDOWN,3,RED,threequartercountdown,change_power,,,4,NO,NO,,,,,,,,,,var odds = 33; if(getstatusself(~luck~) > 0){ odds += 33; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) inflictself(FURY);,,,
Adamant Rail_downgraded,Do [sword]3 damage|,2,attack(3); sfxdamage(target[;]3);,Lucky Shot,COUNTDOWN,3,RED,,,,,4,NO,NO,,,,,,,,,,,,,
Old Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Old Nail@1~[;]true[;]false[;]e);,Pea Gun,MAX2,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Old Nail@1~[;]true[;]false[;]e);
Old Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Old Nail@1+~[;]true[;]false[;]e);,Pea Gun,MAX2|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Old Nail@1+~[;]true[;]false[;]e);
Old Nail@2_downgraded,No effect|Use this twice to|permanently upgrade,1,if(e.originallyupgraded == true) { giveequipment(~Old Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Old Nail@1~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,YES,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Old Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);,Pea Gun,MAX2,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Old Nail@2~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);
Old Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);,Pea Gun,MAX2|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Old Nail@2+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);
Old Nail@1_downgraded,No effect|Use this once to|permanently upgrade,1,if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,YES,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Sharpened Nail@3,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e);,Pea Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e);
Sharpened Nail@3_upgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e);,Pea Gun,MAX3|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e);
Sharpened Nail@3_downgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e); };
Sharpened Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e);,Pea Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e);
Sharpened Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e);,Pea Gun,MAX3|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e);
Sharpened Nail@2_downgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e); };
Sharpened Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,Pea Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);
Sharpened Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,Pea Gun,MAX3|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);
Sharpened Nail@1_downgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@4~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@4~[;]true[;]false[;]e); };
Channelled Nail@4,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@3~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@3~[;]true[;]false[;]e);
Channelled Nail@4_upgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e);
Channelled Nail@4_downgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@3~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@3~[;]true[;]false[;]e); };
Channelled Nail@3,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@2~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@2~[;]true[;]false[;]e);
Channelled Nail@3_upgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e);
Channelled Nail@3_downgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@2~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@2~[;]true[;]false[;]e); };
Channelled Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@1~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@1~[;]true[;]false[;]e);
Channelled Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e);
Channelled Nail@2_downgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@1~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@1~[;]true[;]false[;]e); };
Channelled Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);
Channelled Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);
Channelled Nail@1_downgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@6~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@6~[;]true[;]false[;]e); };
Coiled Nail@6,Do [sword]<d6> damage|Use this six times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@5~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@5~[;]true[;]false[;]e);
Coiled Nail@6_upgraded,Do [sword]<d6> damage|Use this six times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e);
Coiled Nail@6_downgraded,Do [sword]<d6> damage|Use this six times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@5~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@5~[;]true[;]false[;]e); };
Coiled Nail@5,Do [sword]<d6> damage|Use this five times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@4~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@4~[;]true[;]false[;]e);
Coiled Nail@5_upgraded,Do [sword]<d6> damage|Use this five times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e);
Coiled Nail@5_downgraded,Do [sword]<d6> damage|Use this five times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@4~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@4~[;]true[;]false[;]e); };
Coiled Nail@4,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@3~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@3~[;]true[;]false[;]e);
Coiled Nail@4_upgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e);
Coiled Nail@4_downgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@3~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@3~[;]true[;]false[;]e); };
Coiled Nail@3,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@2~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@2~[;]true[;]false[;]e);
Coiled Nail@3_upgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e);
Coiled Nail@3_downgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@2~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@2~[;]true[;]false[;]e); };
Coiled Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@1~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@1~[;]true[;]false[;]e);
Coiled Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e);
Coiled Nail@2_downgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@1~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@1~[;]true[;]false[;]e); };
Coiled Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Pure Nail~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Pure Nail~[;]true[;]false[;]e);
Coiled Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Pure Nail+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Pure Nail+~[;]true[;]false[;]e);
Coiled Nail@1_downgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Pure Nail+~[;]true[;]false[;]e); } else { giveequipment(~Pure Nail~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Pure Nail+~[;]true[;]false[;]e); } else { giveequipment(~Pure Nail~[;]true[;]false[;]e); };
Pure Nail,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,change_power,decreaserange,,,2,NO,NO,,,,,,,,,,,,,
Pure Nail_upgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL|FREE1,,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Tyrant's Glare,In [jinx]<d6> turns[;]|inflict [lock]<d6> lock,2,jinx(~Tyrant's Glare~[;]~gain [lock]%VAR% lock~[;]~Gain [lock]%VAR% lock~[;]~inflict(LOCK[;]%VAR%); sfx(\~_lock\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Padlock,MIN3,,PINK,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Brimstone,In three turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]3[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL,,RED,change_power,change_power,,,0,NO,NO,notblade,,,,,,,,,,,,
Brimstone_upgraded,In three turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]3[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL|FREE1,,RED,,,,,0,NO,NO,notblade,,,,,,,,,,,,
Brimstone_downgraded,In four turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]4[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL,,RED,,,,,0,NO,NO,notblade,,,,,,,,,,,,
Brimstone_weakened,In four turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]4[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL|FREE1,,RED,,,,,0,NO,NO,notblade,,,,,,,,,,,,
Storm Reactor,Fully charge your limit break,2,self.limitvalue = self.limitmax; sfx(~_shock~); screenshake();,Jackhammer,MIN4|MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Storm Reactor_upgraded,Fully charge your limit break,2,self.limitvalue = self.limitmax; sfx(~_shock~); screenshake();,Jackhammer,MIN3|MIN3,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Storm Reactor_downgraded,Fully charge your limit break,2,self.limitvalue = self.limitmax; sfx(~_shock~); screenshake();,Jackhammer,MIN5|MIN5,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Stygian Blade,[sword]<d6> dmg[;] on double 1[;]|gain [reduce]3 reduce and make|this unavailable next turn,2,attack(d); if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; } sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; }
Stygian Blade_upgraded,[sword]<d6> dmg[;] on doubles[;]|gain [reduce]3 reduce and make|this unavailable next turn,2,attack(d); if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; } sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; }
Stygian Blade_downgraded,[sword]<d6> dmg[;] on double 1[;]|gain [shield]3 shield and make|this unavailable next turn,2,attack(d); if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(SHIELD[;]3); sfx(~_shield~); e.availablenextturn = false; } sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(SHIELD[;]3); sfx(~_shield~); e.availablenextturn = false; }
Devilsknife,Do [fire]<d6> damage[;] +[fire]1 burn|,2,attack(d[;]FIRE); inflict(FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Devilsknife_upgraded,Do [fire]<d6> damage[;] +[fire]1 burn|,2,attack(d[;]FIRE); inflict(FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Devilsknife_downgraded,Do [fire]<d6> damage|,2,attack(d[;]FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,,,,,3,NO,NO,,,,,,,,,,,,,
Devilsknife_weakened,Do [fire]<d6> damage|,2,attack(d[;]FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Permapick,Split the dice in two[;]|return the dice,2,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,MIN2,,GREEN,reducesize,change_power,,,0,YES,NO,,,,,,,,,,,,,
Permapick_downgraded,Split the dice in two[;]|return the dice,2,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,REQUIRE3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Permapick_weakened,Split the dice in two[;]|return the dice,1,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,REQUIRE3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Permapick_deckupgrade,Split the dice in two[;]|return the dice,2,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Deva Form,+1 dice this fight[;]|roll 2 extra dice next turn,2,self.extradice++; for(x in 0...2) { inflictself(~illuminate~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~);,Clone Device,COUNTDOWN,15,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Deva Form_upgraded,+1 dice this fight[;]|roll 3 extra dice next turn,2,self.extradice++; for(x in 0...3) { inflictself(~illuminate~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~);,Clone Device,COUNTDOWN,15,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Deva Form_downgraded,Roll 2 extra dice next turn,2,for(x in 0...2) { inflictself(~illuminate~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~);,Clone Device,COUNTDOWN,15,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Sand Hawk,Do [weaken]6 damage[;]|inflict [weaken]3 weaken|[80%][gray]In. Not unlike Errol.,2,attack(6[;]WEAKEN); inflict(WEAKEN[;]3); sfxdamage(target[;]6); sfx(~_weaken~);,Plasma Gun,NORMAL|NORMAL,9,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sand Hawk_upgraded,Do [weaken]8 damage[;]|inflict [weaken]3 weaken|[80%][gray]In. Not unlike Errol.,2,attack(8[;]WEAKEN); inflict(WEAKEN[;]3); sfxdamage(target[;]6); sfx(~_weaken~);,Plasma Gun,NORMAL|NORMAL,9,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Sand Hawk_downgraded,Do [weaken]6 damage[;]|inflict [weaken]3 weaken|[80%][gray]In. Not unlike Errol.,2,attack(6[;]WEAKEN); inflict(WEAKEN[;]3); sfxdamage(target[;]6); sfx(~_weaken~);,Plasma Gun,NORMAL|NORMAL,11,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Pigstep,Pay [gold]2 to gain [dodge]2 dodge|You have [gold]<gold> gold,1,if(self.gold >= 2) { self.gold -= 2; inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~Not enough gold!~); },Quick Thinking,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Pigstep_upgraded,Pay [gold]2 to gain [dodge]3 dodge|You have [gold]<gold> gold,1,if(self.gold >= 2) { self.gold -= 2; inflictself(DODGE[;]3); sfx(~_dodge~); } else { self.textparticle(~Not enough gold!~); },Quick Thinking,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Pigstep_downgraded,Pay [gold]2 to gain [shield]6 shield|You have [gold]<gold> gold,1,if(self.gold >= 2) { self.gold -= 2; inflictself(SHIELD[;]6); sfx(~_shield~); } else { self.textparticle(~Not enough gold!~); },Quick Thinking,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
[END REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Brace,Gain [shield]2 shield[;]|on 4[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d==4){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,change_requirements,change_power,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_upgraded,Gain [shield]2 shield[;]|on even[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d%2 == 0){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_downgraded,Gain [shield]2 shield,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Electric Arc,[shock]2 damage to everyone|Return the dice,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_upgraded,[shock]2 damage to everyone|Dice value +1,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d+1);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_downgraded,[shock]1 damage to everyone|Return the dice,1,attack(1[;]SHOCK); attackself(1[;]SHOCK); sfxdamage(target[;]1); sfxdamage(self[;]1); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Matchbook,Burn [fire]<d6> dice,1,inflict(FIRE[;]d); sfx(~_fire~);,Hellfire,MAX3,,RED,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Matchbook_upgraded,Burn [fire]<d6> dice|Do [fire]2 damage,1,inflict(FIRE[;]d); sfx(~_fire~); attack(2[;]FIRE); sfxdamage(target[;]d);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Matchbook_downgraded,Burn a dice,1,inflict(FIRE); sfx(~_fire~);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Ice Tray,Freeze [ice]<d6> dice,1,inflict(ICE[;]d); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,change_power,change_power,ice,none,0,NO,NO,gb,1,,,,,,,,,,,
Ice Tray_upgraded,Freeze [ice]<d6> dice|Do [ice]2 damage,1,inflict(ICE[;]d); sfx(~_ice~); attack(2[;]ICE); sfxdamage(target[;]2);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Ice Tray_downgraded,Freeze a dice,1,inflict(ICE); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Wide Spatula,Flip this dice and|another random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } givedice(7-d); if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Wide Spatula_upgraded,Flip this dice and your|lowest remaining dice,1,var poss = []; var low = 7; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue < low){ poss.push(mydice); low = mydice.basevalue; } } givedice(7-d); if(poss.length > 0){ var rdice = poss[poss.length - 1]; rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Wide Spatula_downgraded,Flip a random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron,Gain [thorns]1 thorn[;]|get a new dice,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Cactus Cauldron_upgraded,Gain [thorns]1 thorn[;] reroll dice|,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron_downgraded,Get a new dice,1,givedice();,Needle,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
False Swipe,Do [sword]10 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(10); sfxdamage(target[;]10);,Blood Sip,COUNTDOWN,8,GREEN,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_upgraded,Do [sword]12 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(12); sfxdamage(target[;]12);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_downgraded,Do [sword]5 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(5); sfxdamage(target[;]5);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting,Do [sword]<d6> damage[;]|25% chance to add [poison]2,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_upgraded,Do [sword]<d6> damage[;]|75% chance to add [poison]2,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver,Do [sword]<d6> damage[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL,,PURPLE,reducesize,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_deckupgrade,Do [sword]<d6> dmg[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL|FREE1,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_weakened,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Pin Missile,Do [sword]1 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,change_power,change_power,,none,2,NO,NO,gb,1,,,,,,,,,,,
Pin Missile_upgraded,Do [sword]2 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(2); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,2,NO,NO,gb,,,,,,,,,,,,
Pin Missile_downgraded,Do [sword]1 damage 2-5 times,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Wave,Do [sword]<d6> damage[;]|Inflict [poison]2 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,change_power,complicate,,none,0,NO,NO,gb,1,,,,,,,,,,,
Sludge Wave_upgraded,Do [sword]<d6> damage[;]|Inflict [poison]3 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]3); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Caustic Cauldron,Inflict [poison]1 poison[;]|get a new dice,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,,,,,givedice();
Caustic Cauldron_upgraded,Inflict [poison]1[;] reroll dice|,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,2,NO,NO,gb,,,,,,,,,,,,givedice();
Caustic Cauldron_downgraded,Inflict [poison]1 poison,1,inflict(POISON); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sealing Stamp,Do [sword]4 damage|(At end of turn: do [sword]2),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,if(target.hp > 0){ attack(2); sfxdamage(target[;]2); },,,,
Sealing Stamp_upgraded,Do [sword]4 damage|(At end of turn: do [sword]3),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,if(target.hp > 0){ attack(3); sfxdamage(target[;]3); },,,,
Sealing Stamp_downgraded,Do [sword]4 damage,1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Decantation,Both dice values -1[;]|roll a 2,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Decantation_upgraded,Both values -1[;] roll a 2|,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Decantation_downgraded,Both dice values -1,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror,In [jinx]2 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Fogged Mirror_upgraded,In [jinx]2 turns[;] +1 dice|,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror_downgraded,In [jinx]3 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]3[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Sludge Spear,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~[;]~~[;]0.2); sfx(~_magic~);,Poison Arrow,REQUIRE6,,PURPLE,change_power,doublerequirements,,none,0,NO,NO,gb,1,,,,,,,,,,,
Sludge Spear_upgraded,Inflict [poison]5 poison,1,inflict(POISON[;]5); sfx(~_poison~[;]~~[;]0.2); sfx(~_magic~);,Poison Arrow,REQUIRE6,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Spear_downgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,REQUIRE6|REQUIRE6,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Transporter,Duplicate part of a dice,1,var parts = split(d); givedice([d[;]parts[0]]);,Clone Device,MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Transporter_upgraded,Duplicate the most|part of a dice,1,var parts = split(d); if(parts[0] > parts[1]){ givedice([d[;]parts[0]]); } else{ givedice([d[;]parts[0]]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Transporter_downgraded,Duplicate a small|part of a dice,1,var parts = split(d); if(parts[0] < parts[1]){ givedice([d[;]parts[0]]); } else{ givedice([d[;]parts[0]]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Pocket Pistil,[sword]1 dmg[;] gain [thorns]1 thorn|[gray](Reuseable),1,inflictself(THORNS); attack(1); sfxdamage(target[;]1); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,change_power,change_power,thorns,none,-1,NO,NO,gb,,,,,,,,,,,,inflictself(THORNS); sfx(~_thorns~[;]~~[;]0.2);
Pocket Pistil_upgraded,[sword]2 dmg[;] gain [thorns]1 thorn|[gray](Reuseable),1,inflictself(THORNS); attack(2); sfxdamage(target[;]2); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,NO,NO,gb,,,,,,,,,,,,inflictself(THORNS); sfx(~_thorns~[;]~~[;]0.2);
Pocket Pistil_downgraded,Gain [thorns]1 thorn|[gray](Reuseable),1,inflictself(THORNS); sfx(~_thorns~);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,YES,NO,gb,,,,,,,,,,,,
Pocket Pistil?,Gain [thorns]1 thorn[;] [sword]1 dmg|,1,inflictself(THORNS); attack(1); sfxdamage(target[;]1); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,change_power,change_power,,none,-1,NO,NO,alternateversion|gb,,,,,,,,,,,,
Pocket Pistil?_upgraded,Gain [thorns]1 thorn[;] [sword]2 dmg|,1,inflictself(THORNS); attack(2); sfxdamage(target[;]2); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,NO,NO,alternateversion|gb,,,,,,,,,,,,
Pocket Pistil?_downgraded,Gain [thorns]1 thorn|,1,inflictself(THORNS); sfx(~_thorns~);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,YES,NO,alternateversion|gb,,,,,,,,,,,,
Flea Shooter,Drain [heart]1 health or add [poison]1|[gray](Reuseable),1,if(chance(50)){ drain(1); sfx(~_drain~); } else{ inflict(POISON); sfx(~_poison~); },Blood Sip,COUNTDOWN,5,RED,change_power,change_power,,none,-1,NO,NO,,,,,,,,,,,,,
Flea Shooter_upgraded,Drain [heart]1 health[;] add [poison]1|[gray](Reuseable),1,drain(1); sfx(~_drain~); inflict(POISON); sfx(~_poison~[;]~~[;]0.2);,Blood Sip,COUNTDOWN,5,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Flea Shooter_downgraded,Drain [heart]1 health|[gray](Reuseable),1,drain(1); sfx(~_drain~);,Blood Sip,COUNTDOWN,5,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Washcloth,Unblind a dice,1,givedice(d); self.dicepool[self.dicepool.length-1].blind = false;,Hook,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Washcloth_upgraded,Unblind a dice|,1,givedice(d); self.dicepool[self.dicepool.length-1].blind = false;,Hook,NORMAL,,GREEN,,,,none,3,YES,NO,,,,,,,,,,,,,
Washcloth_downgraded,Return the dice,1,givedice(d);,Hook,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Create Opening,Do [sword]<double> damage[;]|until next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~restore~[;]d*2);,Burrower,MAX3,,ORANGE,increaserange,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Create Opening_downgraded,Do [sword]<d6> damage[;]|until next turn,1,attack(d); sfxdamage(target[;]d); inflict(~restore~[;]d);,Burrower,MAX3,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Sharpie,Roll a blind dice|with a higher value,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); } self.dicepool[self.dicepool.length-1].blind = true; sfx(~_blind~);,Reroll,MAX4,,PURPLE,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Sharpie_upgraded,Roll a blind dice|with a higher value,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); } self.dicepool[self.dicepool.length-1].blind = true; sfx(~_blind~);,Reroll,MAX5,,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Sharpie_downgraded,Roll a blind dice|with a higher value,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); } self.dicepool[self.dicepool.length-1].blind = true; sfx(~_blind~);,Reroll,MAX2,,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Safety Scissors,Do [sword]3 damage[;]|split the dice in two,1,attack(3); sfxdamage(target[;]3); givedice(split(d));,Magic Lockpick,MIN4,,GREEN,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,givedice(split(d));
Safety Scissors_upgraded,Do [sword]4 damage[;]|split the dice in two,1,attack(4); sfxdamage(target[;]4); givedice(split(d));,Magic Lockpick,MIN4,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,givedice(split(d));
Safety Scissors_downgraded,Do [sword]3 damage[;]|split value in two,1,attack(3); sfxdamage(target[;]3); givedice(d/2);,Magic Lockpick,MIN4,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,givedice(split(d));
Rising Dagger,Do [sword]<d6> damage[;] triple|on the final use|,2,if(e.usesleft == 0){ attack(d*3); sfxdamage(target[;]d*3); } else{ attack(d); sfxdamage(target[;]d); },Steal,MAX3,,RED,change_power,change_power,,none,4,NO,NO,,,,,,,,,,,,,
Rising Dagger_upgraded,Do [sword]<d6> damage[;] triple|on the final use|,2,if(e.usesleft == 0){ attack(d*3); sfxdamage(target[;]d*3); } else{ attack(d); sfxdamage(target[;]d); },Steal,MAX3,,RED,,,,none,3,NO,NO,,,,,,,,,,,,,
Rising Dagger_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Steal,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Burst Beam,Do damage equal to limit|charge ([sword]<var:burstbeamdamage>); reduce it by 5,1,attack(self.limitvalue); sfxdamage(target[;]self.limitvalue); self.limitvalue -= 5; if(self.limitvalue < 0) self.limitvalue = 0;,Focus,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,inflictself(~watchburstbeam~);,,,,,,,,self.limitvalue -= 5; if(self.limitvalue < 0) self.limitvalue = 0;
Burst Beam_upgraded,Do damage equal to|your limit charge ([sword]<var:burstbeamdamage>),1,attack(self.limitvalue); sfxdamage(target[;]self.limitvalue);,Focus,DOUBLES|DOUBLES,,YELLOW,,,,none,0,NO,NO,,,,,inflictself(~watchburstbeam~);,,,,,,,,
Burst Beam_downgraded,Do damage equal to limit|charge ([sword]<var:burstbeamdamage>)[;] but deplete it,1,attack(self.limitvalue); sfxdamage(target[;]self.limitvalue); self.limitvalue = 0;,Focus,DOUBLES|DOUBLES,,YELLOW,,,,none,0,NO,NO,,,,,inflictself(~watchburstbeam~);,,,,,,,,self.limitvalue = 0;
Dice Pump,Odd: roll a higher odd dice|Even: roll a higher even dice,1,if(d==1){ givedice(rand([3[;]5])); } else if(d==2){ givedice(rand([4[;]6])); } else if(d==3 # d==5){ givedice(5); } else if(d==4 # d==6){ givedice(6); } else{ givedice(d); },Megabump,MAX4,,GREEN,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Dice Pump_upgraded,Odd: roll a 5|Even: roll a 6,1,if(d%2 == 0){ givedice(6); } else{ givedice(5); },Megabump,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Dice Pump_downgraded,Dice value +1,1,givedice(d+1);,Megabump,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Supersonic,Reverse the target of|the enemy's next action,1,inflict(~reversenexttarget~); sfx(~_cure~);,Disorient,DOUBLES|DOUBLES,,GRAY,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Supersonic_upgraded,Reverse the target of|the enemy's next action,1,inflict(~reversenexttarget~); sfx(~_cure~);,Disorient,EVEN,,GRAY,,,,none,0,NO,NO,,,,,,,,,,,,,
Supersonic_downgraded,Reverse the target of|the enemy's next action,1,inflict(~reversenexttarget~); sfx(~_cure~);,Disorient,REQUIRE6|REQUIRE6,,GRAY,,,,none,0,NO,NO,,,,,,,,,,,,,
Zeus Dagger,Do [shock]<d6> damage[;] shock this|,1,attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~);,Static Shock,NORMAL,,YELLOW,change_power,change_power,,none,-1,NO,NO,,1,var shocks = ~shock~; var dummy = new elements.Fighter(~Frog~); dummy.addstatus(~shock~[;]1); for(stat in dummy.status){ if(stat.type == ~alternate_shock~){ shocks = ~alternate_shock~; } } self.setvar(~shocktype~[;]shocks); dummy.dispose();,,,,,,,e.animate(self.getvar(~shocktype~));,,,
Zeus Dagger_upgraded,[shock]<d6> damage[;] shock this|,1,attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~);,Static Shock,NORMAL|FREE1,,YELLOW,,,,none,-1,NO,NO,,,var shocks = ~shock~; var dummy = new elements.Fighter(~Frog~); dummy.addstatus(~shock~[;]1); for(stat in dummy.status){ if(stat.type == ~alternate_shock~){ shocks = ~alternate_shock~; } } self.setvar(~shocktype~[;]shocks); dummy.dispose();,,,,,,,e.animate(self.getvar(~shocktype~));,,,
Zeus Dagger_downgraded,Do [shock]<d6> damage[;] shock this|,1,attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~);,Static Shock,MAX3,,YELLOW,,,,none,-1,NO,NO,,,var shocks = ~shock~; var dummy = new elements.Fighter(~Frog~); dummy.addstatus(~shock~[;]1); for(stat in dummy.status){ if(stat.type == ~alternate_shock~){ shocks = ~alternate_shock~; } } self.setvar(~shocktype~[;]shocks); dummy.dispose();,,,,,,,e.animate(self.getvar(~shocktype~));,,,
God's Pick,Flip a dice and split it[;]|then flip the results,1,var f = split(7-d); givedice([7-f[0][;]7-f[1]][;]~splitdice~);,Megaflip,MAX3,,GREEN,change_requirements,change_power,,none,0,YES,NO,,,,,,,,,,,,,
God's Pick_upgraded,Flip a dice and split it[;]|then flip the results,1,var f = split(7-d); givedice([7-f[0][;]7-f[1]][;]~splitdice~);,Megaflip,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
God's Pick_downgraded,Flip a dice and split it[;]|then flip the results,1,var f = split(7-d); givedice([7-f[0][;]7-f[1]][;]~splitdice~);,Megaflip,MAX2,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Ubersaw,Do [sword]<d6> damage[;]|charge limit break by 3,2,attack(d); sfxdamage(target[;]d); self.limitvalue += 3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);,Limit Charge,MAX4,,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,self.limitvalue += 3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);
Ubersaw_upgraded,Do [sword]<d6> damage[;]|charge limit break by 4,2,attack(d); sfxdamage(target[;]d); self.limitvalue += 4; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);,Limit Charge,MAX4,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,self.limitvalue += 4; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);
Ubersaw_downgraded,Do [sword]<d6> damage[;]|charge limit break by 1,2,attack(d); sfxdamage(target[;]d); self.limitvalue += 1; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);,Limit Charge,MAX3,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,self.limitvalue += 1; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);
Pocket Sand,Blind [blind]1 dice,1,inflict(BLIND); sfx(~_blind~);,Flash,COUNTDOWN,2,PURPLE,change_power,change_power,blind,none,0,NO,NO,,,,,,,,,,,,,
Pocket Sand_upgraded,Blind [blind]2 dice,1,inflict(BLIND[;]2); sfx(~_blind~);,Flash,COUNTDOWN,2,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Pocket Sand_downgraded,No effect,1,,Flash,COUNTDOWN,2,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Chain Link,Reduce countdowns by 4,1,boostcountdowns(4); sfx(~useitem~);,Ignition,COUNTDOWN,5,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Chain Link_upgraded,Reduce countdowns by 5,1,boostcountdowns(5); sfx(~useitem~);,Ignition,COUNTDOWN,5,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Chain Link_downgraded,Reduce countdowns by 1,1,boostcountdowns(1); sfx(~useitem~);,Ignition,COUNTDOWN,5,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Spirit Shield,Gain [shield]1 shield for each|unused dice ([shield]<unassigneddice> total),1,var t = 1; for(d in self.dicepool){ if(d.available()) t++; } inflictself(SHIELD[;]t); sfx(~_shield~);,Barricade,ODD,,ORANGE,change_requirements,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Spirit Shield_upgraded,[shield]1 per unused dice ([shield]<unassigneddice>[])|[gray](2 uses this turn),1,var t = 1; for(d in self.dicepool){ if(d.available()) t++; } inflictself(SHIELD[;]t); sfx(~_shield~);,Barricade,ODD,,ORANGE,,,,none,2,YES,NO,,,,,,,,,,,,,
Spirit Shield_downgraded,Gain [shield]1 shield for each|unused dice ([shield]<unassigneddice> total),1,var t = 1; for(d in self.dicepool){ if(d.available()) t++; } inflictself(SHIELD[;]t); sfx(~_shield~);,Barricade,REQUIRE5,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Endless Pond,[]+1 dice this fight,1,self.extradice++; sfx(~magic_gaindice~);,Infinity Mirror,NORMAL|NORMAL,6,PURPLE,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Endless Pond_upgraded,[]+1 dice[;] return first dice,1,self.extradice++; sfx(~magic_gaindice~); givedice(actualdice[0].basevalue);,Infinity Mirror,NORMAL|NORMAL,6,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Endless Pond_downgraded,[]+1 dice this fight,1,self.extradice++; sfx(~magic_gaindice~);,Infinity Mirror,MAX3|MAX3,6,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Betelgeuse,Do [sword]20 damage[;]|add 2x random status,1,var rstatus = rand([FIRE[;]ICE[;]LOCK[;]POISON[;]SHOCK[;]WEAKEN[;]CURSE]); attack(20); sfxdamage(target[;]20); inflict(rstatus[;]2); sfx(~_~ + rstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,21,PINK,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Betelgeuse_upgraded,Do [sword]25 damage[;]|add 3x random status,1,var rstatus = rand([FIRE[;]ICE[;]LOCK[;]POISON[;]SHOCK[;]WEAKEN[;]CURSE]); attack(25); sfxdamage(target[;]25); inflict(rstatus[;]3); sfx(~_~ + rstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,21,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Betelgeuse_downgraded,Do [sword]10 damage[;]|add a random status,1,var rstatus = rand([FIRE[;]ICE[;]LOCK[;]POISON[;]SHOCK[;]WEAKEN[;]CURSE]); attack(10); sfxdamage(target[;]10); inflict(rstatus[;]1); sfx(~_~ + rstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,21,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Halfula,Flip one dice[;]|return the other,1,var one = 0; var other = 0; one = actualdice[rand([0[;]1])].basevalue; if(one == actualdice[0].basevalue){ other = actualdice[1].basevalue; } else{ other = actualdice[0].basevalue; } givedice([7 - one[;]other]); sfx(~useitem~);,Megaflip,NORMAL|NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Halfula_upgraded,Flip one[;] return the other|[gray](3 uses this turn),1,var one = 0; var other = 0; one = actualdice[rand([0[;]1])].basevalue; if(one == actualdice[0].basevalue){ other = actualdice[1].basevalue; } else{ other = actualdice[0].basevalue; } givedice([7 - one[;]other]); sfx(~useitem~);,Megaflip,NORMAL|NORMAL,,GREEN,,,,none,3,YES,NO,,,,,,,,,,,,,
Halfula_downgraded,Flip one dice[;]|return the other,1,var one = 0; var other = 0; one = actualdice[rand([0[;]1])].basevalue; if(one == actualdice[0].basevalue){ other = actualdice[1].basevalue; } else{ other = actualdice[0].basevalue; } givedice([7 - one[;]other]); sfx(~useitem~);,Megaflip,MIN4|MIN4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Giga Drain,Drain [heart]<d6> health|[gray](once per battle),1,drain(d); sfx(~_drain~);,Blood Sip,NORMAL,,RED,change_power,change_power,,none,0,NO,YES,,,,,,,,,,,,,
Giga Drain_upgraded,Drain [heart]<d6> health|[gray](once per battle),1,drain(d); sfx(~_drain~);,Blood Sip,NORMAL|FREE2,,RED,,,,none,0,NO,YES,,,,,,,,,,,,,
Giga Drain_downgraded,Drain [heart]<d6> health|[gray](once per battle),1,drain(d); sfx(~_drain~);,Blood Sip,MAX4,,RED,,,,none,0,NO,YES,,,,,,,,,,,,,
Bubble Burster,Do [sword]<d6> damage[;] +[sword]3|if enemy has a blessing,1,if(getstatus(SHIELD)>0 # getstatus(REEQUIPNEXT)>0 # getstatus(FURY)>0 # getstatus(REDUCE)>0 # getstatus(THORNS)>0 # getstatus(DODGE)>0 # getstatus(VAMPIRE)>0){ attack(d+3); sfxdamage(target[;]d+3); } else{ attack(d); sfxdamage(target[;]d); },Power Up,MAX5,,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,donothing();,
Bubble Burster_upgraded,Do [sword]<d6> damage[;] +[sword]3|if enemy has a blessing,1,if(getstatus(SHIELD)>0 # getstatus(REEQUIPNEXT)>0 # getstatus(FURY)>0 # getstatus(REDUCE)>0 # getstatus(THORNS)>0 # getstatus(DODGE)>0 # getstatus(VAMPIRE)>0){ attack(d+3); sfxdamage(target[;]d+3); } else{ attack(d); sfxdamage(target[;]d); },Power Up,NORMAL,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,donothing();,
Bubble Burster_downgraded,Do [sword]<d6> damage[;] +[sword]3|if enemy has a blessing,1,if(getstatus(SHIELD)>0 # getstatus(REEQUIPNEXT)>0 # getstatus(FURY)>0 # getstatus(REDUCE)>0 # getstatus(THORNS)>0 # getstatus(DODGE)>0 # getstatus(VAMPIRE)>0){ attack(d+3); sfxdamage(target[;]d+3); } else{ attack(d); sfxdamage(target[;]d); },Power Up,MAX3,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,donothing();,
Stink Bomb,Inflict [poison]1 poison for|each dice used on this,1,if(simulation) { inflict(POISON[;]2); } else { var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){ inflict(POISON[;]a); sfx(~_poison~); e.setvar(~furyvalue~[;]a); } else{ inflict(POISON[;]e.getvar(~furyvalue~)); sfx(~_poison~); } e.dicehistory = []; },Toxic,COUNTDOWN,6,PURPLE,change_power,change_power,,none,0,NO,NO,,,e.dicehistory = []; e.setvar(~furyvalue~[;]0);,,,e.setvar(~furyvalue~[;]0);,,,,,,,var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){ e.setvar(~furyvalue~[;]a); }
Stink Bomb_upgraded,Inflict [poison]1 for each dice|used on this[;] plus [poison]1,1,if(simulation) { inflict(POISON[;]3); } else { var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){ inflict(POISON[;]a + 1); sfx(~_poison~); e.setvar(~furyvalue~[;]a); } else{ inflict(POISON[;]e.getvar(~furyvalue~)+1); sfx(~_poison~); } e.dicehistory = []; },Toxic,COUNTDOWN,6,PURPLE,,,,none,0,NO,NO,,,e.dicehistory = []; e.setvar(~furyvalue~[;]0);,,,e.setvar(~furyvalue~[;]0);,,,,,,,var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){ e.setvar(~furyvalue~[;]a); }
Stink Bomb_downgraded,Inflict [poison]1 poison|(Dice history erased),1,inflict(POISON); sfx(~_poison~);,Toxic,COUNTDOWN,6,PURPLE,,,,none,0,NO,NO,,,e.dicehistory = []; e.setvar(~furyvalue~[;]0);,,,,,,,,,,
Mirror Spatula,Flip a dice[;] on 6|get +1 dice this fight,1,givedice(7-d); if(d == 6){ self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN3,,PURPLE,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Mirror Spatula_upgraded,Flip a dice[;] on even|get +1 dice this fight,1,givedice(7-d); if(d %2  == 0){ self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN3,,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Mirror Spatula_downgraded,Flip a dice[;] on 6|get +1 dice this fight,1,givedice(7-d); if(d == 6){ self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN4,,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Reagent,Activate all poison on|enemy until none is left,2,if(simulation){ bonus(500*getstatus(POISON)); } else{ function ceil(n) { var round = n - n%1; if (n != round) { return round + 1; } else { return round; } } if(getstatus(POISON) > 0){ var total = 0; for(i in 0...getstatus(POISON)+1){ if(target.innate.indexOf(~strongpoison~) > -1){ total += ceil(i/2); } else if(target.innate.indexOf(~weakpoison~) > -1){ total += 2*i; } else{ total += i; } } target.symbolparticle(POISON); pierceattack(total); sfx(~take_damage_from_poison_status~); removestatus(POISON[;]ALL); } else{ self.textparticle(~No effect!~); } },Toxic,COUNTDOWN,30,PURPLE,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Reagent_upgraded,Activate all poison on|enemy until none is left,1,if(simulation){ bonus(500*getstatus(POISON)); } else{ function ceil(n) { var round = n - n%1; if (n != round) { return round + 1; } else { return round; } } if(getstatus(POISON) > 0){ var total = 0; for(i in 0...getstatus(POISON)+1){ if(target.innate.indexOf(~strongpoison~) > -1){ total += ceil(i/2); } else if(target.innate.indexOf(~weakpoison~) > -1){ total += 2*i; } else{ total += i; } } target.symbolparticle(POISON); pierceattack(total); sfx(~take_damage_from_poison_status~); removestatus(POISON[;]ALL); } else{ self.textparticle(~No effect!~); } },Toxic,COUNTDOWN,30,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Reagent_downgraded,Do [sword]1 damage for|every [poison]1 on enemy,2,attack(getstatus(POISON)); sfxdamage(target[;]getstatus(POISON));,Toxic,COUNTDOWN,30,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Reagent_weakened,Do [sword]1 damage for|every [poison]1 on enemy,1,attack(getstatus(POISON)); sfxdamage(target[;]getstatus(POISON));,Toxic,COUNTDOWN,30,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Chew the Scenery,Do [sword]<double> damage[;]|lose a dice,2,attack(d*2); sfxdamage(target[;]d*2); self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Bear Smash,MAX5,,ORANGE,change_power,change_power,,none,0,NO,NO,finale,,,,,,,,,,,,self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;
Chew the Scenery_upgraded,Do [sword]<double> damage[;]|lose a dice,2,attack(d*2); sfxdamage(target[;]d*2); self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Bear Smash,NORMAL,,ORANGE,,,,none,0,NO,NO,finale,,,,,,,,,,,,self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;
Chew the Scenery_downgraded,Do [sword]<d6> damage[;]|lose a dice,2,attack(d); sfxdamage(target[;]d); self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Bear Smash,MAX5,,ORANGE,,,,none,0,NO,NO,finale,,,,,,,,,,,,self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;
Star Cauldron,Inflict a random status[;]|get a new dice,1,var rstatus = rand([FIRE[;]FIRE[;]ICE[;]ICE[;]LOCK[;]POISON[;]POISON[;]SHOCK[;]SHOCK[;]WEAKEN[;]CURSE[;]~fade~]); inflict(rstatus[;]1); givedice(); if(rstatus != ~fade~) { sfx(~_~ + rstatus.toLowerCase()); } else { sfx(~_vanish~); } /*status probability revised a little by diane; also threw in fade because why not*/,Stardust,ODD,,PINK,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,givedice();
Star Cauldron_upgraded,Add a status[;] reroll dice|,1,var rstatus = rand([FIRE[;]FIRE[;]ICE[;]ICE[;]LOCK[;]POISON[;]POISON[;]SHOCK[;]SHOCK[;]WEAKEN[;]CURSE[;]~fade~]); inflict(rstatus[;]1); givedice(); if(rstatus != ~fade~) { sfx(~_~ + rstatus.toLowerCase()); } else { sfx(~_vanish~); },Stardust,ODD,,PINK,,,,none,2,NO,NO,,,,,,,,,,,,,givedice();
Star Cauldron_downgraded,Get a new dice,1,givedice();,Stardust,ODD,,PINK,,,,none,0,YES,NO,,,,,,,,,,,,,
[END GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Protien Shake,Your workout becomes|easier to play,1,function lookup(st){var simpslots = [[ ~NORMAL~|~NORMAL~]|[ ~EVEN~|~NORMAL~]|[ ~ODD~|~NORMAL~]|[ ~MAX5~|~NORMAL~]|[ ~MAX4~|~MAX5~]|[ ~MAX3~|~MAX4~]|[ ~MAX2~|~MAX4~]|[ ~MIN2~|~NORMAL~]|[ ~MIN3~|~MIN2~]|[ ~MIN4~|~MIN3~]|[ ~MIN5~|~MIN3~]|[ ~REQUIRE1~|~MAX2~]|[ ~REQUIRE2~|~MAX2~]|[ ~REQUIRE3~|~MAX3~]|[ ~REQUIRE4~|~MIN4~]|[ ~REQUIRE5~|~MIN5~]|[ ~REQUIRE6~|~MIN5~]]; for(sl in simpslots){if(st == sl[0]){return(sl[1]);};}; return st;}; var s = self.stolencard; if(self.hasstolencard && s.ready){if(s.countdown > 0){s.remainingcountdown = s.remainingcountdown*2/3; }else if(s.needsdoubles){s.needsdoubles = false; s.changeslots([~NORMAL~|~NORMAL~]);}else if(s.needstotal > 0){s.needstotal = 0;}else{var news = []; for(sl in s.getslots()){news.push(lookup(sl)); }; s.changeslots(news); }; s.animate(~flashandshake~); sfx(~_magic~);};,,COUNTDOWN,3,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Protien Shake_upgraded,Your workout becomes|much easier to play,1,function lookup(st){var simpslots = [[ ~NORMAL~|~NORMAL~]|[ ~EVEN~|~NORMAL~]|[ ~ODD~|~NORMAL~]|[ ~MAX5~|~NORMAL~]|[ ~MAX4~|~NORMAL~]|[ ~MAX3~|~NORMAL~]|[ ~MAX2~|~MAX4~]|[ ~MIN2~|~NORMAL~]|[ ~MIN3~|~NORMAL~]|[ ~MIN4~|~NORMAL~]|[ ~MIN5~|~MIN2~]|[ ~REQUIRE1~|~MAX3~]|[ ~REQUIRE2~|~MAX3~]|[ ~REQUIRE3~|~MAX3~]|[ ~REQUIRE4~|~MIN4~]|[ ~REQUIRE5~|~MIN4~]|[ ~REQUIRE6~|~MIN4~]]; for(sl in simpslots){if(st == sl[0]){return(sl[1]);};}; return st;}; var s = self.stolencard; if(self.hasstolencard && s.ready){if(s.countdown > 0){s.remainingcountdown = s.remainingcountdown/2; }else if(s.needsdoubles){s.needsdoubles = false; s.changeslots([~NORMAL~]);}else if(s.needstotal > 0){s.needstotal = 0; s.changeslots([~NORMAL~|~NORMAL~]);}else{var news = []; for(sl in s.getslots()){news.push(lookup(sl)); }; s.changeslots(news); }; s.animate(~flashandshake~); sfx(~_magic~);};,,COUNTDOWN,3,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Protien Shake_downgraded,Your workout becomes|slightly easier to play,1,function lookup(st){var simpslots = [[ ~NORMAL~|~NORMAL~]|[ ~EVEN~|~MIN2~]|[ ~ODD~|~MAX5~]|[ ~MAX5~|~NORMAL~]|[ ~MAX4~|~MAX5~]|[ ~MAX3~|~MAX4~]|[ ~MAX2~|~MAX3~]|[ ~MIN2~|~NORMAL~]|[ ~MIN3~|~MIN2~]|[ ~MIN4~|~MIN3~]|[ ~MIN5~|~MIN4~]|[ ~REQUIRE1~|~MAX2~]|[ ~REQUIRE2~|~MAX2~]|[ ~REQUIRE3~|~MAX3~]|[ ~REQUIRE4~|~MIN4~]|[ ~REQUIRE5~|~MIN5~]|[ ~REQUIRE6~|~MIN5~]]; for(sl in simpslots){if(st == sl[0]){return(sl[1]);};}; return st;}; var s = self.stolencard; if(self.hasstolencard && s.ready){if(s.countdown > 0){s.remainingcountdown = s.remainingcountdown*3/4; }else if(s.needsdoubles){s.needsdoubles = false; s.changeslots([~NORMAL~|~NORMAL~]);}else if(s.needstotal > 0){if(s.needstotal > 7){s.needstotal-=1;}else if(s.needstotal < 7){s.needstotal += 1;};}else{var news = []; for(sl in s.getslots()){news.push(lookup(sl)); }; s.changeslots(news); }; s.animate(~flashandshake~); sfx(~_magic~);};,,COUNTDOWN,3,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Primal Punch,If <d6> is a prime number[;]|deal [sword]<d6> damage,1,var flag = true; if(d == 1){ flag = false; target.textparticle(~1 is not a prime!~); }; if(d > 2){for(x in 2...d){ if(d%x == 0){ flag = false; }; };}; if(d == 2){ flag = true; }; if(flag){ attack(d); sfxdamage(target[;]d); }else{ target.textparticle(~No effect!~); sfx(~_dodge~); };,Fury,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Primal Punch_upgraded,If <d6> is a prime number[;]|deal [sword]<d6> damage,1,var flag = true; if(d == 1){ flag = false; target.textparticle(~1 is not a prime!~); }; if(d > 2){for(x in 2...d){ if(d%x == 0){ flag = false; }; };}; if(d == 2){ flag = true; }; if(flag){ attack(d); sfxdamage(target[;]d); }else{ target.textparticle(~No effect!~); sfx(~_dodge~); };,Fury,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Primal Punch_downgraded,If <d6> is a prime number[;]|deal [sword]<d6> damage,1,var flag = true; if(d == 1){ flag = false; target.textparticle(~1 is not a prime!~); }; if(d > 2){for(x in 2...d){ if(d%x == 0){ flag = false; }; };}; if(d == 2){ flag = true; }; if(flag){ attack(d); sfxdamage(target[;]d); }else{ target.textparticle(~No effect!~); sfx(~_dodge~); };,Fury,MIN5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Nine Iron,Deal [sword]<d6> damage|On 6[;] deal [sword]3 more,2,if(d == 6){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_upgraded,Deal [sword]<d6> damage|On even[;] deal [sword]3 more,2,if(d % 2 == 0){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shrug,Gain [shield]4 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]4); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_upgraded,Gain [shield]6 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]6); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_downgraded,Gain [shield]3 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Budge,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Budge_upgraded,Odd: value +1[;] Even: value -1|[grey](3 uses this turn),1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,,,,,3,YES,NO,mf,,,,,,,,,,,,
Budge_downgraded,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Asklepios,Deal [sword]6 damage|Restore [heal]3 health,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_upgraded,Deal [sword]8 damage|Restore [heal]3 health,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_downgraded,Deal [sword]3 damage|Restore [heal]3 health,2,attack(3); sfxdamage(target[;]3); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_upgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_downgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_upgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_downgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Rock Crusher,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,change_power,change_power,,,2,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_upgraded,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,4,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_downgraded,Dice value -1[;]|then split it in two,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Flame Lance,Burn [fire]all dice,1,inflict(FIRE[;]ALL); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_upgraded,Burn [fire]all dice[;] deal [fire]1|damage per dice burned,1,inflict(FIRE[;]ALL); sfx(~_fire~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]FIRE); sfxdamage(target[;]s);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_downgraded,Burn [fire]2 dice,1,inflict(FIRE[;]2); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance,Freeze [ice]all dice,1,inflict(ICE[;]ALL); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_upgraded,Freeze [ice]all dice[;] deal [ice]1|damage per dice frozen,1,inflict(ICE[;]ALL); sfx(~_ice~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]ICE); sfxdamage(target[;]s);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_downgraded,Freeze [ice]2 dice,1,inflict(ICE[;]2); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Minigun,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,change_power,change_power,,none,1,NO,NO,mf,,,,e.usesleft = turn; e.updatereuseabledescription();,,,,,,,,
Minigun_upgraded,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,,,,none,2,NO,NO,mf,,,,e.usesleft = turn+1; e.updatereuseabledescription();,,,,,,,,
Minigun_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Whelm,MAX4,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shielding Potion,Gain [shield]12 shield|[gray](once per battle),2,inflictself(SHIELD[;]12); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_upgraded,Gain [shield]15 shield|[gray](once per battle),2,inflictself(SHIELD[;]15); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_downgraded,Gain [shield]8 shield|[gray](once per battle),2,inflictself(SHIELD[;]8); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Cherry Bomb,Start of turn: deal [sword]5 dmg|[gray](once per battle),1,attack(5); sfxdamage(target[;]5);,Throwing Knife,,,RED,change_power,change_power,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,1,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Cherry Bomb_upgraded,Start of turn: deal [sword]8 dmg|[gray](once per battle),1,attack(8); sfxdamage(target[;]8);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Cherry Bomb_downgraded,Start of turn: deal [sword]1 dmg|[gray](once per battle),1,attack(1); sfxdamage(target[;]1);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Sacridice,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN3,,RED,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Sacridice_upgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN2,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Sacridice_downgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN5,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Precognition,Gain a random blessing|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]self[;]1[;]d); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,change_power,noeffect,,,0,YES,NO,mf,1,,,,,,,,,,donothing();,
Precognition_upgraded,Gain 2 random blessings|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; for(x in [0[;]0]){ var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]target[;]1[;]d); }; sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,mf,,,,,,,,,,,donothing();,
Mass Grimoire,Activate equipment that|can take a single <slotdoubles>,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,2,,,,,,,,,,,
Mass Grimoire_upgraded,Activate items that take <slotdoubles>|,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Mass Grimoire_downgraded,No effect,1,sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Magnum Opus,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Magnum Opus_upgraded,Deal [sword]<d6> damage|Gain [shield]4 shield,1,attack(d); inflictself(SHIELD[;]4); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]4); sfx(~_shield~);
Magnum Opus_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Blood Pact,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Blood Pact_upgraded,Lose [heart]3 health[;] then|drain [heart]<d6> health,1,pierceattackself(3); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4|FREE1,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(3); sfx(~_drain~);
Blood Pact_downgraded,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Push Knife,[sword]2[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(2); sfxdamage(target[;]2); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,change_power,change_power,,,-1,NO,NO,mf,1,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_upgraded,[sword]3[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(3); sfxdamage(target[;]3); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,,,,,-1,NO,NO,mf,,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_downgraded,Deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Megabump,MIN2,,RED,,,,none,-1,NO,NO,mf,,,,,,,,,,,,
Philosopher's Stone,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_upgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX2,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Molten Core,Deal [sword]20 damage|Gain [shield]10 shield,1,attack(20); sfxdamage(target[;]20); sfx(~_magic~); inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,change_power,change_power,,,0,NO,NO,mf,2,,,,,,,,,,,inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);
Molten Core_upgraded,Deal [sword]25 damage|Gain [shield]15 shield,1,attack(25); sfxdamage(target[;]25); sfx(~_magic~); inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);
Molten Core_downgraded,Deal [sword]10 damage|Gain [shield]5 shield,1,attack(10); sfxdamage(target[;]10); sfx(~_magic~); inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);
Magma Storm,[fire]2 dmg to you and enemy|[gray](Reusable),1,attack(2[;]FIRE); sfx(~_fire~); boomerang(2[;]FIRE);,Boom!,COUNTDOWN,2,RED,change_power,change_power,,,-1,NO,NO,mf,1,,,,,,,,,,,
Magma Storm_upgraded,[fire]4 dmg to you and enemy|[gray](Reusable),1,attack(4[;]FIRE); sfx(~_fire~); boomerang(4[;]FIRE);,Boom!,COUNTDOWN,2,RED,,,,,-1,NO,NO,mf,,,,,,,,,,,,
Magma Storm_downgraded,[fire]2 dmg to yourself|[gray](Reusable),1,attackself(2[;]FIRE); sfx(~_fire~);,Boom!,COUNTDOWN,2,RED,,,,,-1,YES,NO,mf,,,,,,,,,,,,
Canesword,Deal [sword]<d6> dmg. On 6[;] next|item has +1 use this turn,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,EVEN,,GREEN,change_power,change_power,reequipnext,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };
Canesword_upgraded,Deal [sword]<d6> dmg. On 6[;] next|item has +1 use this turn,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };
Canesword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Efficiency,EVEN,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Starsword,Deal [sword]<d6> damage. On 6[;]|inflict a random status,2,attack(d); sfxdamage(target[;]d); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Starsword_upgraded,Deal [sword]<d6> damage. On 6[;]|inflict 2x a random status,2,attack(d); sfxdamage(target[;]d); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starsword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Stardust,NORMAL,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Come On And Slam,Deal [sword]<d6> damage[;] on 6[;]|reroll your remaining dice,2,attack(d); sfxdamage(target[;]d); if(d == 6){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };,Clone Device,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };
Come On And Slam_upgraded,Deal [sword]<d6> damage[;] on even[;]|reroll your remaining dice,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };,Clone Device,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,if(d %2 == 0){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };
Come On And Slam_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Clone Device,NORMAL,,BRIGHTCYAN,,,,none,0,NO,NO,,,,,,,,,,,,,
Orb of Discord,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,MAX4,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Orb of Discord_upgraded,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Orb of Discord_downgraded,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,MAX2,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Prestidigitate,Deal [sword]<d6> damage|Roll an extra dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,MIN4,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Prestidigitate_upgraded,Deal [sword]<d6> damage|Roll an extra dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Prestidigitate_downgraded,Deal [sword]<d6> damage|Roll an extra dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,REQUIRE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Keytar,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target[;]d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2);,Zapthwack,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Keytar_upgraded,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target[;]d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2);,Zapthwack,MAX4|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Keytar_downgraded,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target[;]d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2);,Zapthwack,MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Baseball Bat,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,MAX5,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Baseball Bat_upgraded,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Baseball Bat_downgraded,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Revoke,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,MAX5,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Revoke_upgraded,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Revoke_downgraded,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,MAX3,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Starburst,Deal [sword]3 damage for each|unique status on enemy,1,var amount = 3; var total = 0; for(x in target.status){ if(!x.invisible){ total+=amount; } }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,EVEN,,PINK,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Starburst_upgraded,Deal [sword]3 damage for each|unique status on enemy,1,var amount = 3; var total = 0; for(x in target.status){ if(!x.invisible){ total+=amount; } }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,NORMAL,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Starburst_downgraded,Deal [sword]2 damage for each|unique status on enemy,1,var amount = 2; var total = 0; for(x in target.status){ if(!x.invisible){ total+=amount; } }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,EVEN,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Staple Gun,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Staple Gun_upgraded,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Staple Gun_downgraded,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Starstaff,Deal [sword]6 damage|Inflict a random status,2,attack(6); sfxdamage(target[;]6); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,8,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Starstaff_upgraded,Deal [sword]6 damage|Inflict 2x random status,2,attack(6); sfxdamage(target[;]6); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,8,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starstaff_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6);,Stardust,COUNTDOWN,8,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Sour Note,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){ inflict(WEAKEN); sfx(~_weaken~); }; givedice(d);,Magic Spanner,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sour Note_upgraded,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){ inflict(WEAKEN); sfx(~_weaken~); }; givedice(d);,Magic Spanner,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Sour Note_downgraded,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){ inflict(WEAKEN); sfx(~_weaken~); }; givedice(d);,Magic Spanner,MAX3|MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Steamstaff,Even turn: [sword]6 dmg + [fire]1|Odd turn: [sword]6 dmg + [ice]1,2,if(turn % 2 == 0){ attack(6); inflict(FIRE); sfx(~_fire~); }else{ attack(6); sfx(~_ice~); inflict(ICE); }; sfxdamage(target[;]6);,Ember,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,if(turn % 2 == 0){ e.changecolour(~RED~); }else{ e.changecolour(~BLUE~); };,,,,,,,,
Steamstaff_upgraded,Even turn: [sword]8 dmg + [fire]1|Odd turn: [sword]8 dmg + [ice]1,2,if(turn % 2 == 0){ attack(8); inflict(FIRE); sfx(~_fire~); }else{ attack(8); sfx(~_ice~); inflict(ICE); }; sfxdamage(target[;]8);,Ember,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,if(turn % 2 == 0){ e.changecolour(~RED~); }else{ e.changecolour(~BLUE~); };,,,,,,,,
Steamstaff_downgraded,Even turn: [sword]3 dmg + [fire]1|Odd turn: [sword]3 dmg + [ice]1,2,if(turn % 2 == 0){ attack(3); inflict(FIRE); sfx(~_fire~); }else{ attack(3); sfx(~_ice~); inflict(ICE); }; sfxdamage(target[;]3);,Ember,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,if(turn % 2 == 0){ e.changecolour(~RED~); }else{ e.changecolour(~BLUE~); };,,,,,,,,
Umbrella,Gain [reduce]1 reduce|Return the dice,1,inflictself(REDUCE); sfx(~_shield~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Pillow Fort,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Umbrella_upgraded,Gain [reduce]1 reduce|Return the dice,1,inflictself(REDUCE); sfx(~_shield~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Pillow Fort,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Umbrella_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,DOUBLES|DOUBLES,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; }; sfx(~_magic~);,Unlimited Limit,MAX3,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal_upgraded,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; }; sfx(~_magic~);,Unlimited Limit,MAX4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal_downgraded,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; }; sfx(~_magic~);,Unlimited Limit,MAX2,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Waltzer,Deal [sword]3 damage|Repeat this every 3 turns,1,attack(3); sfxdamage(target[;]3); if(simulation) { attack(3); } else { var s = new elements.Skill(~Waltzer Quine~); s.execute(self[;]target); },Whacksies,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Waltzer_upgraded,Deal [sword]3 damage|Repeat this every 2 turns,1,attack(3); sfxdamage(target[;]3); if(simulation) { attack(3); } else { var s = new elements.Skill(~Waltzer Quine Upgraded~); s.execute(self[;]target); },Whacksies,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Waltzer_downgraded,Deal [sword]3 damage|Repeat this every 4 turns,1,attack(3); sfxdamage(target[;]3); if(simulation) { attack(3); } else { var s = new elements.Skill(~Waltzer Quine Downgraded~); s.execute(self[;]target); },Whacksies,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Natural Charm,Roll two dice that|add up to 7,1,givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]]));,Magic Dice,COUNTDOWN,7,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Natural Charm_upgraded,Roll two dice that|add up to 7|[gray](2 uses this turn),1,givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]]));,Magic Dice,COUNTDOWN,7,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Natural Charm_downgraded,Roll a new dice,1,givedice();,Magic Dice,COUNTDOWN,7,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Glue Pact,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,MAX2|MAX2,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Glue Pact_upgraded,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Glue Pact_downgraded,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,REQUIRE2|REQUIRE2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Repast Rapier,Deal [sword]<d6> damage. On 6[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));,Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));
Repast Rapier_upgraded,Deal [sword]<d6> damage. On even[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); };,Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));
Repast Rapier_downgraded,Deal [sword]<d6> damage. On 6[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); };,Regenerate,MIN4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));
Hand Sanitiser,Heal [heal]1[;] and [heal]1 next turn|,1,attackself(-1); sfx(~_heal~); inflictself(~mf_healnextturn~);,Revitalize,COUNTDOWN,3,GREEN,change_power,change_power,,,2,YES,NO,,1,,,,,,,,,,,
Hand Sanitiser_upgraded,Heal [heal]1[;] and [heal]1 next turn|,1,attackself(-1); sfx(~_heal~); inflictself(~mf_healnextturn~);,Revitalize,COUNTDOWN,3,GREEN,,,,,5,YES,NO,,,,,,,,,,,,,
Hand Sanitiser_downgraded,Heal [heal]1[;] and [heal]1 next turn,1,attackself(-1); sfx(~_heal~); inflictself(~mf_healnextturn~);,Revitalize,COUNTDOWN,3,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Plug Socket,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); givedice();,Static Shock,NORMAL,,YELLOW,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Plug Socket_upgraded,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); var da = []; for(x in [0[;]0]){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Static Shock,NORMAL|NORMAL,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Plug Socket_downgraded,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); givedice();,Static Shock,MIN4,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Metal Crusher,Combine dice[;] split|excess into 1s,2,if(d > 6){ var da = [6]; while(d > 6){ da.push(1); d-=1; }; givedice(da); }else{ givedice(d); },Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_upgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){ var da = [6]; while(d > 6){ da.push(1); d-=1; }; givedice(da); }else{ givedice(d); },Magic Spanner,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_downgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){ var da = [6]; while(d > 6){ da.push(1); d-=1; }; givedice(da); }else{ givedice(d); },Magic Spanner,MAX4|MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Wispy Kaboom Smash,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Snake Eyes,,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,,,,,,
Wispy Kaboom Smash_upgraded,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Snake Eyes,,,PURPLE,,,,,-1,NO,NO,,,,,,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,,,,,,
Wispy Kaboom Smash_downgraded,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Snake Eyes,,,PURPLE,,,,,2,NO,NO,,,,,,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,,,,,,
Pinball Machine,Roll a high dice (4-6)[;]|and deal that much damage,1,var r = rand([4[;]5[;]6]); givedice(r); attack(r); sfxdamage(target[;]r);,Magic Dice,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4[;]5[;]6]); givedice(r);
Pinball Machine_upgraded,Roll a high dice (4-6)[;]|and deal [sword]6 damage,1,var r = rand([4[;]5[;]6]); givedice(r); attack(6); sfxdamage(target[;]6);,Magic Dice,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4[;]5[;]6]); givedice(r);
Pinball Machine_downgraded,Roll a high dice (4-6)[;]|and deal [sword]3 damage,1,var r = rand([4[;]5[;]6]); givedice(r); attack(3); sfxdamage(target[;]r);,Magic Dice,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4[;]5[;]6]); givedice(r);
Stop Sign,Deal [sword]6 damage|Lock [lock]1 dice,2,attack(6); sfxdamage(target[;]6); inflict(LOCK); sfx(~_lock~[;]~~[;]0.2);,Padlock,NORMAL|NORMAL,8,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stop Sign_upgraded,Deal [sword]<d6> damage|Lock [lock]1 dice,2,attack(d); sfxdamage(target[;]d); inflict(LOCK); sfx(~_lock~[;]~~[;]0.2);,Padlock,NORMAL|NORMAL,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Stop Sign_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6);,Padlock,NORMAL|NORMAL,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Popcorn,Get two higher|dice next turn,1,var poss = []; for(ad in actualdice){ poss = []; var x = ad.basevalue+1; while(x <= 6){ poss.push(x); x+=1; }; inflictself(~stash~+rand(poss)); inflictself(~illuminate~); }; sfx(~magic_gaindice~);,Magic Dice,MAX5|MAX5,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Popcorn_upgraded,Get two higher|dice next turn|,1,var poss = []; for(ad in actualdice){ poss = []; var x = ad.basevalue+1; while(x <= 6){ poss.push(x); x+=1; }; inflictself(~stash~+rand(poss)); inflictself(~illuminate~); }; sfx(~magic_gaindice~);,Magic Dice,MAX5|MAX5,,YELLOW,,,,,2,YES,NO,,,,,,,,,,,,,
Popcorn_downgraded,Get a higher|dice next turn,1,var poss = []; for(ad in actualdice){ poss = []; var x = ad.basevalue+1; while(x <= 6){ poss.push(x); x+=1; }; inflictself(~stash~+rand(poss)); inflictself(~illuminate~); }; sfx(~magic_gaindice~);,Magic Dice,MAX5,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Sneksword,Deal [sword]<d6> damage|On 6[;] roll two ones,2,attack(d); sfxdamage(target[;]d); if(d == 6){ givedice([1[;]1]); };,Magic Lockpick,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ givedice([1[;]1]); };
Sneksword_upgraded,Deal [sword]<d6> damage|On even[;] roll two ones,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ givedice([1[;]1]); };,Magic Lockpick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){ givedice([1[;]1]); };
Sneksword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Magic Lockpick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Janky Spanner,Roll a 6,1,givedice(6);,Magic Six,MIN2|MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Janky Spanner_upgraded,Roll a 6,1,givedice(6);,Magic Six,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Janky Spanner_downgraded,Combine dice[;] discard excess,1,if(d >= 6){ givedice(6); }else{ givedice(d); };,Magic Six,MIN2|MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Incapacitate,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target[;]4); inflict(~mf_stun~); sfx(~_shock~);,Jackhammer,NORMAL|NORMAL,8,YELLOW,change_power,change_power,stun,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate_upgraded,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target[;]4); inflict(~mf_stun~); sfx(~_shock~);,Jackhammer,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate_downgraded,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target[;]4); inflict(~mf_stun~); sfx(~_shock~);,Jackhammer,REQUIRE4|REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Booster Pack,Roll an extra dice for|every 6 you have,1,var ret = []; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ ret.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; }; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Booster Pack_upgraded,Roll an extra dice for|every 5 or 6 you have,1,var ret = []; for(mydice in self.dicepool){ if(mydice.available() && (mydice.basevalue == 6 # mydice.basevalue == 5)){ ret.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; }; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,,,,none,0,YES,NO,,,,,,,,,,,,,
Booster Pack_downgraded,Roll an extra dice|if you have a 6,1,var ret = []; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ ret = rand([1[;]2[;]3[;]4[;]5[;]6]); }; }; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,,,,none,0,YES,NO,,,,,,,,,,,,,
Poison Thread,Inflict [poison]1 poison|[gray](3 uses this turn),1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN3,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Poison Thread_upgraded,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN3,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Poison Thread_downgraded,Inflict [poison]1 poison,1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Mitosis,Get 3 copies of a dice,1,givedice([d[;]d[;]d]);,Replicate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Mitosis_upgraded,Get 4 copies of a dice,1,givedice([d[;]d[;]d[;]d]);,Replicate,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Mitosis_downgraded,Get 3 copies of a dice,1,givedice([d[;]d[;]d]);,Replicate,REQUIRE1|REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Fruit Loot,Restore half of your|missing health ([heal]<var:halfmissinghealth>[]),1,attackself(-self.getvar(~halfmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,change_power,change_power,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Fruit Loot_upgraded,Restore 3/4 of your|missing health ([heal]<var:tqmissinghealth>[]),1,attackself(-self.getvar(~tqmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Fruit Loot_downgraded,Restore 1/4 of your|missing health ([heal]<var:qmissinghealth>[]),1,attackself(-self.getvar(~qmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Locktrick,Dice value +1[;] then|split it in two,1,if(d == 6){ givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]])); }else{ givedice(split(d+1)); };,Magic Lockpick,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Locktrick_upgraded,Dice value +1[;] then|split it in two,1,if(d == 6){ givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]])); }else{ givedice(split(d+1)); };,Magic Lockpick,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Locktrick_downgraded,Split a dice in two,1,givedice(split(d));,Magic Lockpick,ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rockfall,Roll two dice that are|lower than <d6>,1,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice([rand(t)[;]rand(t)]); };,Magic Dice,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rockfall_upgraded,Roll three dice that are|lower than <d6>,1,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice([rand(t)[;]rand(t)[;]rand(t)]); };,Magic Dice,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rockfall_downgraded,Roll a dice that is|lower than <d6>,1,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };,Magic Dice,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Plague Stave,Deal [sword]6 damage|Inflict [poison]2 poison,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Plague Stave_upgraded,Deal [sword]8 damage|Inflict [poison]2 poison,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Plague Stave_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Demote,Dice value -3,1,givedice(d-3);,Magic Dice,MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Demote_upgraded,1-3: Dice value +3|4-6: Dice value -3,1,if(d>3){ givedice(d-3); }else{ givedice(d+3); };,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Demote_downgraded,Dice value -3,1,givedice(d-3);,Magic Dice,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Iron Fist,Deal [sword]<d6> damage|Gain [shield]<d6> shield,2,sfx(~_shield~); attack(d[;]SHIELD); inflictself(SHIELD[;]d); sfxdamage(target[;]d);,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD[;]d); sfx(~_shield~);
Iron Fist_upgraded,Deal [sword]<d6> damage|Gain [shield]<d6> shield,2,sfx(~_shield~); attack(d[;]SHIELD); inflictself(SHIELD[;]d); sfxdamage(target[;]d);,Barricade,MAX3|FREE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD[;]d); sfx(~_shield~);
Iron Fist_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Barricade,MAX3,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Rusty Shield,Gain [shield]<d6> shield[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rusty Shield_upgraded,Gain [shield]<d6> shield[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Barricade,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Rusty Shield_downgraded,Gain [shield]<d6> shield,2,inflictself(SHIELD[;]d); sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Drumkit,[sword]5 damage + [weaken]1 weaken|,1,attack(5); sfxdamage(target[;]5); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Drumkit_upgraded,[sword]7 damage + [weaken]1 weaken|,1,attack(7); sfxdamage(target[;]7); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Drumkit_downgraded,[sword]3 damage + [weaken]1 weaken|,1,attack(3); sfxdamage(target[;]3); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Burner Phone,Roll 3 new dice|[gray](once per battle),1,var da = []; for(x in 0...3){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,,
Burner Phone_upgraded,Roll 4 new dice|[gray](once per battle),1,var da = []; for(x in 0...4){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,YES,,,,,,,,,,,,,
Burner Phone_downgraded,Roll 2 new dice|[gray](once per battle),1,var da = []; for(x in 0...2){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,YES,,,,,,,,,,,,,
Energy Drink,Roll 3 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...3){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Energy Drink_upgraded,Roll 4 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...4){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Energy Drink_downgraded,Roll 2 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...2){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Blastdice Potion,Deal [fire]10 dmg + [fire]1 burn|Lose a dice this fight,1,attack(10[;]FIRE); sfxdamage(target[;]10); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Blastdice Potion_upgraded,Deal [fire]13 dmg + [fire]1 burn|Lose a dice this fight,1,attack(13[;]FIRE); sfxdamage(target[;]13); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Blastdice Potion_downgraded,Deal [fire]7 dmg + [fire]1 burn|Lose a dice this fight,1,attack(7[;]FIRE); sfxdamage(target[;]7); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Gavel,Deal [shock]<d6> damage|Shock [shock]2 items,1,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gavel_upgraded,[shock]<d6> damage[;] shock [shock]2|,1,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,,,,,2,NO,NO,,,,,,,,,,,,,
Gavel_downgraded,Shock [shock]2 items,1,inflict(SHOCK[;]2); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Inspiring Tune,Restore [heal]5 health,2,attackself(-5); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,finale,,,,,,,,,,,,
Inspiring Tune_upgraded,Restore [heal]8 health,2,attackself(-8); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Inspiring Tune_downgraded,Restore [heal]2 health,2,attackself(-2); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Have a Ball,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4|MAX4|MAX4,,ORANGE,change_power,change_power,,none,2,NO,NO,finale,,,,,,,,,,,,
Have a Ball_upgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4,,ORANGE,,,,none,8,NO,NO,finale,,,,,,,,,,,,
Have a Ball_downgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4|MAX4|MAX4,,ORANGE,,,,none,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,REQUIRE1,,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck_upgraded,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,ODD,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck_downgraded,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,REQUIRE1|REQUIRE1,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Star of the Show,Inflict a random status|[gray](Reuseable),2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,change_power,change_power,,,-1,NO,NO,finale,,,,,,,,,,,,
Star of the Show_upgraded,Inflict 2x a random status|[gray](Reuseable),2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Star of the Show_downgraded,Inflict a random status,2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Emergency Barricade,Gain [shield]1 shield|[gray](Reuseable),2,inflictself(SHIELD); sfx(~_shield~);,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,-1,NO,NO,finale,,,,,,,,,,,,
Emergency Barricade_upgraded,Gain [shield]1[;] heal [heal]1|[gray](Reuseable),2,inflictself(SHIELD); attackself(-1); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.3);,Magic Dice,NORMAL,,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Emergency Barricade_downgraded,Gain [shield]1 shield|[gray](Reuseable),2,inflictself(SHIELD); sfx(~_shield~);,Magic Dice,EVEN,,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Battle Sax,Deal [weaken]<double> damage|Weaken [weaken]1 item,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~); inflict(WEAKEN);,Burrower,MAX3,,ORANGE,change_power,change_power,weaken,,0,NO,NO,finale,,,,,,,,,,,,
Battle Sax_upgraded,Deal [weaken]<double> damage|Weaken [weaken]2 items,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~); inflict(WEAKEN[;]2);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Battle Sax_downgraded,Deal [weaken]<double> damage,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Nanobots,Gain [shield]<d6> shield|Gain 1 more if at [shield]0 shield,1,if(getstatusself(SHIELD) == 0){ inflictself(SHIELD[;]d + 1); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Nanobots_upgraded,Gain [shield]<d6> shield|Gain double if at [shield]0 shield,1,if(getstatusself(SHIELD) == 0){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Nanobots_downgraded,Gain [shield]<d6> shield,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Exoskeleton,Gain [shield]2 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,removestatusself(SHIELD[;]getstatusself(~shielddown~)); removestatusself(~shielddown~[;]ALL);,,,,if(target.hp > 0){ inflictself(SHIELD[;]2); sfx(~_shield~); inflictself(~shielddown~[;]2); };,,,,
Exoskeleton_upgraded,Gain [shield]3 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,,,,,0,NO,NO,,,,,removestatusself(SHIELD[;]getstatusself(~shielddown~)); removestatusself(~shielddown~[;]ALL);,,,,if(target.hp > 0){ inflictself(SHIELD[;]3); sfx(~_shield~); inflictself(~shielddown~[;]3); };,,,,
Exoskeleton_downgraded,Gain [shield]1 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,,,,,0,NO,NO,,,,,removestatusself(SHIELD[;]getstatusself(~shielddown~)); removestatusself(~shielddown~[;]ALL);,,,,if(target.hp > 0){ inflictself(SHIELD[;]1); sfx(~_shield~); inflictself(~shielddown~[;]1); };,,,,
Starstream,Each attack of [sword]4 or more|also inflicts a random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,change_power,change_power,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 3 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Starstream_upgraded,Each attack of [sword]4 or more|also inflicts 2x random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,,,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 3 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Starstream_downgraded,Each attack of [sword]8 or more|also inflicts a random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,,,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 7 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Auto Turret,Deal [sword]3 damage at the|start of each turn,1,attack(3); sfxdamage(target[;]3);,Bubble Gun,,,RED,change_power,change_power,,none,0,NO,NO,nomidturnsummon,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Auto Turret_upgraded,Deal [sword]4 damage at the|start of each turn,1,attack(4); sfxdamage(target[;]4);,Bubble Gun,,,RED,,,,none,0,NO,NO,nomidturnsummon,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Auto Turret_downgraded,Deal [sword]2 damage at the|start of each turn,1,attack(2); sfxdamage(target[;]2);,Bubble Gun,,,RED,,,,none,0,NO,NO,nomidturnsummon,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Pea Pod,Gain [mana]1 mana|[gray](Reusable),1,inflictself(MANA[;]1); sfx(~_mana~);,,COUNTDOWN,5,GREEN,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Pea Pod_upgraded,Gain [mana]2 mana|[gray](Reusable),1,inflictself(MANA[;]2); sfx(~_mana~);,,COUNTDOWN,5,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Pea Pod_downgraded,Gain [mana]1 mana|[gray](Reusable),1,inflictself(MANA); sfx(~_mana~);,,COUNTDOWN,5,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Bloodroot,Drain [heart]2 health. If above|half health[;] gain [mana]1 mana,1,drain(2); sfx(~_drain~); if(self.hp >= self.maxhp/2){ inflictself(MANA); sfx(~_mana~); };,,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(self.hp >= self.maxhp/2){ inflictself(MANA); sfx(~_mana~); };
Bloodroot_upgraded,Drain [heart]2 health|Gain [mana]1 mana,1,drain(2); sfx(~_drain~); inflictself(MANA); sfx(~_mana~);,,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(MANA); sfx(~_mana~);
Bloodroot_downgraded,Drain [heart]2 health,1,drain(2); sfx(~_drain~);,,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Coffee Bean,Gain [mana]1 mana|Roll a new dice,1,inflictself(MANA); givedice(); sfx(~_mana~);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Coffee Bean_upgraded,Gain [mana]2 mana|Roll a new dice,1,inflictself(MANA[;]2); givedice(); sfx(~_mana~);,,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Coffee Bean_downgraded,Roll a new dice,1,givedice();,,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Pear Spear,Restore [heal]4 health|Gain [mana]1 mana,1,pierceattackself(-4); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE6,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Pear Spear_upgraded,Restore [heal]6 health|Gain [mana]1 mana,1,pierceattackself(-6); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pear Spear_downgraded,Restore [heal]2 health|Gain [mana]1 mana,1,pierceattackself(-2); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Carnation,Cost [mana]3: [sword]<triple> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,,MAX4,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Carnation_upgraded,Cost [mana]3: [sword]<triple> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Carnation_downgraded,Cost [mana]3: [sword]<d6> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Swingset,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<d6> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d);,,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d); sfx(~_thinghappens~[;]~~[;]0.2);
Swingset_upgraded,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<double> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d*2);,,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d*2); sfx(~_thinghappens~[;]~~[;]0.2);
Swingset_downgraded,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<d6> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d);,,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d); sfx(~_thinghappens~[;]~~[;]0.2);
[END FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Power Glove,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX4,,ORANGE,change_requirements,change_function,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_upgraded,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_downgraded,Do [sword]<d6> damage|[80%][gray]''It's so bad!''[],1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Innovate,Get a dice you don't have,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,ncr,2,,,,,,,,,,,
Innovate_upgraded,Get a dice you don't have|,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Innovate_downgraded,Get a 4[;] if you don't have one,1,var flag = true; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue == 4) { flag = false; } } if (flag == false) { givedice(d); self.textparticle(~You've got a 4!~); } else { givedice(4); },Reroll,NORMAL,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector,Gain [shield]2 shield|[gray](single usen't),1,inflictself(SHIELD[;]2); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,change_power,change_power,,,4,YES,NO,ncr,1,,,,,,,,,,,
Pocket Protector_upgraded,Gain [shield]3 shield|[gray](single usen't),1,inflictself(SHIELD[;]3); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector_downgraded,Gain [shield]1 shield|[gray](single usen't),1,inflictself(SHIELD[;]1); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Dime,Roll 2 sixes,2,givedice([6[;]6]); /* 'dime a dozen' */,Rollout,EVEN|EVEN,,GREEN,change_power,change_power,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_downgraded,Roll 2 sixes,2,givedice([6[;]6]);,Rollout,REQUIRE6|EVEN,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_upgraded,Roll 2 sixes|,2,givedice([6[;]6]);,Rollout,EVEN|EVEN,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Sickle,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]1 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,reducesize,change_power,,none,0,NO,NO,ncr|excludefromrandomlists,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Sickle_downgraded,Do [shock]<d6> damage,2,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr|excludefromrandomlists,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_weakened,Do [shock]<d6> damage,1,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr|excludefromrandomlists,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_deckupgrade,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]2 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK[;]2); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr|excludefromrandomlists,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Lightreaver,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Lightreaver_upgraded,Deal [sword]<d6> damage. On even[;]|copy a dice for next turn,1,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Lightreaver_downgraded,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,REQUIRE4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket,Get a new dice[;]|inflict [lock]Lock,1,givedice(); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Locket_upgraded,Get a new dice[;] do [sword]2[;]|inflict [lock]Lock,1,givedice(); attack(2); sfxdamage(target[;]2); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket_downgraded,Inflict [lock]Lock,1,inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Biohazard,Inflict [poison]<d6> poison|[gray](once per battle),2,inflict(POISON[;]d); sfx(~_poison~);,Anthrax,NORMAL,,PURPLE,change_power,complicate,,,0,NO,YES,ncr,,,,,,,,,,,,
Biohazard_upgraded,Inflict [poison]<d6> poison|[gray](cooldown of 3 turns),2,inflict(POISON[;]d); e.setvar(~biocooldown~[;]3); sfx(~_poison~);,Anthrax,NORMAL,,PURPLE,,,,,0,NO,NO,ncr,,e.setvar(~biocooldown~[;]0);,e.setvar(~biocooldown~[;]0);,if(e.getvar(~biocooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = ~On cooldown~; e.unavailabledetails = [~Available in ~ + e.getvar(~biocooldown~) + ~turns.~]; e.setvar(~biocooldown~[;]e.getvar(~biocooldown~) - 1); },,,,,,,,
Silver Sword,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target[;]d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { inflict(VAMPIRE); target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } },,,,,,,,,,
Silver Sword_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target[;]d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { inflict(VAMPIRE); target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } },,,,,,,,,,
Silver Sword_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target[;]d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { inflict(VAMPIRE); target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } },,,,,,,,,,
Technology,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A little overbearing sometimes''[],1,attack(d); sfxdamage(target[;]d);,Emulator,MAX4,,YELLOW,change_power,change_function,,,0,NO,NO,ncr,1,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,if(target.hp > 0) { var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } } },,,,
Technology_upgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A modern quasi-religion''[],1,attack(d); sfxdamage(target[;]d);,Emulator,NORMAL,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,if(target.hp > 0) { var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } } },,,,
Technology_downgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''Technology works.''[],1,attack(d); sfxdamage(target[;]d);,Emulator,MAX4,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,if(target.hp > 0) { var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } } },,,,
Smoke Signal,Stash dice for next|turn[;] then return it,1,inflictself(~stash~+d[;]1); inflictself(~illuminate~); givedice(d);,Light Switch,MIN4,,RED,simplify,complicate,,,0,YES,NO,ncr,1,,,,,,,,,,,
Loud Yelling,Weaken [weaken]2 equipment,1,inflict(WEAKEN[;]2);,Scream,REQUIRE5,,ORANGE,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Yelling_downgraded,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Scream,REQUIRE5,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Loud Brostep,Shock [shock]2 equipment,1,inflict(SHOCK[;]2);,Electrify,REQUIRE5,,YELLOW,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Brostep_downgraded,Shock [shock]1 equipment,1,inflict(SHOCK);,Electrify,REQUIRE5,,YELLOW,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Raw Energy,Do [vanish]<d6> damage[;]|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); /*inferno*/,Delude,NORMAL|NORMAL,,PINK,change_power,complicate,,,0,NO,NO,ncr,1,,,,,,,,,,,
Raw Energy_upgraded,Do [vanish]<d6> damage[;]|Inflict [vanish]2 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]2);,Delude,NORMAL|NORMAL,,PINK,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sheer Will,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); bonus(1000); /*burning light*/,Delude,MIN4,,PINK,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Sheer Will_downgraded,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~);,Delude,MAX3,,PINK,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop,Do [sword]3 damage. On 6[;]|drain [heart]2 health instead,1,if(d == 6) { drain(2); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); } /*originally 'on snap; drain 2 health instead' but you will not believe how difficult it is to *replace* the effect of a card on snap rather than adding to it: github.com/TerryCavanagh/diceydungeons.com/issues/1889*/,Rejuvenate,MIN3,,PINK,change_power,change_power,,none,0,NO,NO,ncr,1,,,,,,,,,,,
Bop Bop_upgraded,Do [sword]3 damage. On 6[;]|drain [heart]3 health instead,1,if(d == 6) { drain(3); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop_downgraded,Do [sword]3 damage. On 6[;]|heal [heart]2 health instead,1,if(d == 6) { attackself(-2); sfx(~_heal~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,if(d == 6) { e.castdirection = -1; } else { e.castdirection = 1; },,,if(d == 6) { attackself(-2); sfx(~_heal~); }
Ephemeral Axe,Do [sword]<double> damage|[gray](once per battle),1,attack(d / 0.5); sfxdamage(target[;]d / 0.5); /*every day it becomes stranger and stranger that i've never touched drugs in my life*/,Fury,MAX5,,PURPLE,simplify,complicate,,,0,NO,YES,ncr,1,,,,,,,,,,,
Boiling Cauldron,Take [fire]2 damage[;]|get 2 new dice,1,attackself(2[;]FIRE); sfxdamage(self[;]2); sfx(~_fire~); givedice([for(i in 0...2) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,change_power,change_power,,,0,YES,NO,ncr,1,,,,,,,,,,,
Boiling Cauldron_upgraded,Take [fire]3 damage[;]|get 3 new dice,1,attackself(3[;]FIRE); sfxdamage(self[;]3); sfx(~_fire~); givedice([for(i in 0...3) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Boiling Cauldron_downgraded,Take [fire]1 damage[;]|get a new dice,1,attackself(1[;]FIRE); sfxdamage(self[;]1); sfx(~_fire~); givedice();,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Polarized Cauldron,Do [sword]1 damage|Get a dice of different parity,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_upgraded,Do [sword]1 damage|Get a dice of different parity|,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Pulsing Cauldron,Do [sword]1 damage|On low (1-3)[;] get a high dice|On high (4-6)[;] get a low dice,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_upgraded,Do [sword]1 damage|On 1-3[;] get 4-6. On 4-6[;] get 1-3|,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sparkthrower,Do [sword]2 damage|[shock]<timesused> shock[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(SHOCK[;]e.timesused + 1);,Electrify,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,ncr|excludefromrandomlists,1,,,,,,,,,,,
Sparkthrower_downgraded,Do [sword]1 damage|[shock]<timesused> shock[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(SHOCK[;]e.timesused + 1);,Electrify,NORMAL,,GREEN,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Sparkthrower_upgraded,Do [sword]3 damage|[shock]<timesused> shock[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(SHOCK[;]e.timesused + 1);,Electrify,NORMAL,,GREEN,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Earsplitter,Do [sword]2 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(WEAKEN[;]e.timesused + 1);,Scream,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,ncr|excludefromrandomlists,1,,,,,,,,,,,
Earsplitter_downgraded,Do [sword]1 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(WEAKEN[;]e.timesused + 1);,Scream,NORMAL,,PURPLE,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Earsplitter_upgraded,Do [sword]3 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(WEAKEN[;]e.timesused + 1);,Scream,NORMAL,,PURPLE,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Silver Sword@witch,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,witchonly|ncr,2,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword?@witch,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,ODD|FREE5,,GRAY,change_power,change_power,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,2,,,,,,,,,,,
Silver Sword?@witch_downgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,REQUIRE5|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
Silver Sword?@witch_upgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,FREE5|ODD|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
Glue Gun,[lock]Counter a random dice|that's not countered yet|,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,COUNTDOWN,5,PURPLE,change_power,change_power,,none,3,NO,NO,ncr,,,,,,,,,,,,
Glue Gun_upgraded,[lock]Counter a random dice|that's not countered yet|,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,COUNTDOWN,5,PURPLE,,,,none,6,NO,NO,ncr,,,,,,,,,,,,
Glue Gun_downgraded,[lock]Counter a random dice|that's not countered yet|,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,COUNTDOWN,5,PURPLE,,,,none,2,NO,NO,ncr,,,,,,,,,,,,
Flamebringer,Do [sword]2 damage|Last use: +[fire]4 burn|,1,attack(2); sfxdamage(target[;]2); if(e.usesleft == 0) { inflict(FIRE[;]4); sfx(~_fire~[;]~~[;]0.2); },Heat Ray,COUNTDOWN,4,RED,change_power,change_power,,,4,NO,NO,ncr,1,,,,,,,,,,,
Flamebringer_downgraded,Do [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Heat Ray,COUNTDOWN,4,RED,,,,,4,NO,NO,ncr,,,,,,,,,,,,
Flamebringer_upgraded,Do [sword]3 damage|Last use: +[fire]4 burn|,1,attack(3); sfxdamage(target[;]3); if(e.usesleft == 0) { inflict(FIRE[;]4); sfx(~_fire~[;]~~[;]0.2); } /*attack(2); if(e.usesleft == 0) { attack(8[;]FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]10); } else { sfxdamage(target[;]2); }*/,Heat Ray,COUNTDOWN,4,RED,,,,,4,NO,NO,ncr,,,,,,,,,,,,
Spin Attack,Do [sword]<d6> damage. On 6[;]|[lock]counter a random dice|that's not countered yet,2,attack(d); sfxdamage(target[;]d); if(d == 6) { var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~[;]~~[;]0.2); } },Copyright Strike,NORMAL,,PURPLE,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Spin Attack_downgraded,Do [sword]<d6> damage. On 6[;]|[lock]counter the lowest dice|that's not countered yet,2,attack(d); sfxdamage(target[;]d); if(d == 6) { var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + availablecounters[0]); sfx(~_lock~[;]~~[;]0.2); } },Copyright Strike,NORMAL,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Spin Attack_upgraded,Do [sword]<d6> damage. On 6[;]|[lock]counter the highest dice|that's not countered yet,2,attack(d); sfxdamage(target[;]d); if(d == 6) { var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + availablecounters[availablecounters.length - 1]); sfx(~_lock~[;]~~[;]0.2); } },Copyright Strike,NORMAL,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Tootsie Pop,Reroll the dice. On 6[;]|instead return two 6s,2,if(d == 6) givedice([6[;]6]); else givedice();,Megabump,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tootsie Pop_upgraded,Roll a higher dice. On 6[;]|instead return two 6s,2,if(d >= 6) givedice([6[;]6]); else givedice(rand([6[;]5[;]4[;]3[;]2[;]1].splice(0[;]6-d))); /*awful. who wrote this*/,Megabump,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Tootsie Pop_downgraded,Reroll the dice. On 6[;]|instead return two 1s,2,if(d == 6) givedice([1[;]1]); else givedice();,Megabump,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Deadbolt,Do [sword]6 damage[;]|50% chance to [lock]Lock,2,attack(6); var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { inflict(LOCK); sfx(~_lock~); self.textparticle(~Success!~); },Copyright Strike,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Deadbolt_upgraded,Do [sword]6 damage[;]|if filled perfectly[;] [lock]Lock,2,var dicehistory = runscript(~getfixeddh~[;][e]); attack(6); var sum = 0; for (i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; } if (sum == e.countdown) { inflict(LOCK); sfx(~_lock~); self.textparticle(~Success!~); },Copyright Strike,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,e.setvar(~sourceequipment~[;]e);,e.resetvar(~sourceequipment~); e.resetvar(~dicehistory~);,e.setvar(~sourceequipment~[;]e);,,,,,,,runscript(~fixfurydh~[;][e]);,
Deadbolt_downgraded,Do [sword]6 damage,2,attack(6); /*var sfxdone = false; var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { inflict(LOCK); sfx(~_lock~); sfxdone = true; } odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { inflictself(LOCK); if(!sfxdone) { sfx(~_lock~); } } */,Copyright Strike,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Saving Throw,Get a new dice. On 1[;]|get a dice over 3,1,if(d == 1) { givedice(rand([4[;]5[;]6])); } else givedice();,Double Whammy,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Saving Throw_upgraded,Get a dice over 3,1,givedice(rand([4[;]5[;]6]));,Double Whammy,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Saving Throw_downgraded,Get a new dice. On 1[;]|get a dice 3 or less,1,if(d == 1) { givedice(rand([1[;]2[;]3])); } else givedice();,Double Whammy,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Bonecrusher,Deal [sword]<d6> damage. On 4[;]|[curse]Curse the enemy,1,attack(d); sfxdamage(target[;]d); if(d == 4) inflict(CURSE);,Cackle,MAX4,,GRAY,change_power,change_function,,,0,NO,NO,,2,,,,,,,,,,,
Bonecrusher_upgraded,Deal [sword]<d6> damage. On even[;]|[curse]Curse the enemy,1,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) inflict(CURSE);,Cackle,MAX4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Bonecrusher_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Cackle,MAX4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Veneer,Charge limit break by [confuse]2,1,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 2; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },Magic Six,NORMAL,,ORANGE,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Veneer_upgraded,Charge limit break by [confuse]3,1,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 3; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },Magic Six,NORMAL,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Veneer_downgraded,Charge limit break by [confuse]1,1,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 1; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } /*ultimately i quite like what i'd ended up with for ncr jester. by settling for bop bop draining on 6 rather than on snap; it essentially takes on the roles of bop *and* sweets both at once while not being redundant to zoop zoop (since zoop zoop does less damage on 4s and 5s); which allows me to replace sweets with an item that doesn't heal whatsoever. also; ncr almost entirely outdoes vanilla pack with snap (and pu pack if you don't copy kapow) since heal doubles as damage; zoop zoop does 6 damage when snapped; and your limit gets charged *again*; but zoop zoop+ isn't nearly as strong as boop+ or kapow+; which balances it somewhat*/,Magic Six,NORMAL,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Sceptre,Deal [vanish]6 damage|Inflict [vanish]1 vanish,2,sfxdamage(target[;]6); attack(6[;] VANISH); inflict(~fade~); /*staff*/,Hadoken,COUNTDOWN,8,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sceptre_downgraded,Deal [vanish]3 damage|Inflict [vanish]1 vanish,2,sfxdamage(target[;]3); attack(3[;] VANISH); inflict(~fade~);,Hadoken,COUNTDOWN,8,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Sceptre_upgraded,Deal [vanish]8 damage|Inflict [vanish]1 vanish,2,sfxdamage(target[;]8); attack(8[;] VANISH); inflict(~fade~);,Hadoken,COUNTDOWN,8,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Revolver,Do damage equal to|2x excess value inserted,2,var dicehistory = e.dicehistory; var sum = 0; for(i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; if(sum >= e.countdown) { break; } } if(sum - e.countdown > 0) { attack(2 * (sum - e.countdown)); sfx(~_fire~[;]~~[;]0.1); sfxdamage(2 * (sum - e.countdown)); } else self.textparticle(~No effect!~);,Dice Bash,COUNTDOWN,6,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Revolver_upgraded,Do damage equal to|2x excess value inserted,1,var dicehistory = e.dicehistory; var sum = 0; for(i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; if(sum >= e.countdown) { break; } } if(sum - e.countdown > 0) { attack(2 * (sum - e.countdown)); sfx(~_fire~[;]~~[;]0.1); sfxdamage(2 * (sum - e.countdown)); } else self.textparticle(~No effect!~);,Dice Bash,COUNTDOWN,6,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Revolver_downgraded,Do [sword]6 damage,2,attack(6); sfx(~_fire~[;]~~[;]0.1);,Dice Bash,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Revolver_weakened,Do [sword]6 damage,1,attack(6); sfx(~_fire~[;]~~[;]0.1);,Dice Bash,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flicker,Vanish [vanish]1 duplicate dice,1,inflict(~fade~); sfx(~_vanish~);,Delude,EVEN,,PINK,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Stockpick,Split a dice in two[;]|repeat in [jinx]2 turns,2,givedice(split(d)[;]~splitdice~); jinx(~Stockpick~[;]~split a %VAR% in two~[;]~Split a %VAR% in two~[;]~var dicelist = split(%VAR%); inflict(\~stash\~ + dicelist[0]); inflict(\~stash\~ + dicelist[1]); inflict(\~illuminate\~); sfx(\~splitdice\~);~[;]self[;]self[;]2[;]d);,Light Switch,NORMAL,,PINK,change_power,change_function,,,0,YES,NO,,,,,,,,,,,,,
Stockpick_upgraded,Split dice[;] repeat in [jinx]2 turns|On 6[;] boost Jinxes by 1 turn,2,givedice(split(d)[;]~splitdice~); jinx(~Stockpick~[;]~split a %VAR% in two~[;]~Split a %VAR% in two~[;]~var dicelist = split(%VAR%); inflict(\~stash\~ + dicelist[0]); inflict(\~stash\~ + dicelist[1]); inflict(\~illuminate\~); sfx(\~splitdice\~);~[;]self[;]self[;]2[;]d); if(d == 6) { boostjinxcountdowns(self[;] 1); boostjinxcountdowns(target[;] 1); },Light Switch,NORMAL,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Stockpick_downgraded,Split a dice in two,2,givedice(split(d)[;]~splitdice~);,Light Switch,NORMAL,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Plasma Rifle,Do [sword]5 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(5); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,10,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Plasma Rifle_upgraded,Do [sword]5 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(5); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,7,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Plasma Rifle_downgraded,Do [sword]3 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(3); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,10,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Plasma Rifle_weakened,Do [sword]3 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(3); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,7,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Compact Resonator,Do [weaken]<double> damage. Passive:|[weaken]weaken yourself when you|use a card on the enemy,1,attack(d * 2[;]WEAKEN); sfxdamage(target[;]d * 2);,Burrower,MAX5,,ORANGE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,inflictself(~ncr_restraint_all~); e.animate(~flashandshake~);,,,,,,,
Compact Resonator_upgraded,Do [weaken]<double> dmg. Passive:|[weaken]weaken yourself when you|use a card on the enemy,1,attack(d * 2[;]WEAKEN); sfxdamage(target[;]d * 2);,Burrower,MAX5|FREE1,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,inflictself(~ncr_restraint_all~); e.animate(~flashandshake~);,,,,,,,
Jester's Glove,Take [sword]<d6> damage|Snap an item next turn,1,attackself(d); sfxdamage(self[;]d); jinx(~Jester's Glove~[;]~[glove]snap an equipment~[;]~[glove]Snap an equipment~[;]~inflict(\~ncr_snap\~); sfx(\~jester_snap\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~[;]~~[;]0.15);,Improvise,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Jester's Glove_upgraded,Take [sword]<d6> damage|Snap an item next turn|On 6[;] take no damage,1,if(d != 6) { attackself(d); sfxdamage(self[;]d); } jinx(~Jester's Glove~[;]~[glove]snap an equipment~[;]~[glove]Snap an equipment~[;]~inflict(\~ncr_snap\~); sfx(\~jester_snap\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~[;]~~[;]d != 6 ? 0.15 : 0);,Improvise,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Jester's Glove_downgraded,Take [sword]<d6> damage|Snap an item next turn,1,attackself(d); sfxdamage(self[;]d); jinx(~Jester's Glove~[;]~[glove]snap an equipment~[;]~[glove]Snap an equipment~[;]~inflict(\~ncr_snap\~); sfx(\~jester_snap\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~[;]~~[;]0.15);,Improvise,MIN3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Eternal Cauldron,Do [sword]1 damage[;] reroll dice|30% chance to fail|[gray](Reuseable),1,if(!chance(30)) { givedice(); attack(1); sfxdamage(target[;]1); } else { self.textparticle(~No effect!~); },Rollout,NORMAL,,GRAY,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,if(!chance(30)) { givedice(); } else { self.textparticle(~No effect!~); }
Eternal Cauldron_upgraded,Do [sword]1 damage[;] reroll dice|15% chance to fail|[gray](Reuseable),1,if(!chance(15)) { givedice(); attack(1); sfxdamage(target[;]1); } else { self.textparticle(~No effect!~); },Rollout,NORMAL,,GRAY,,,,,-1,NO,NO,,,,,,,,,,,,,if(!chance(15)) { givedice(); } else { self.textparticle(~No effect!~); }
Eternal Cauldron_downgraded,Reroll the dice|30% chance to fail|[gray](Reuseable),1,if(!chance(30)) { givedice(); } else { self.textparticle(~No effect!~); },Rollout,NORMAL,,GRAY,,,,,-1,YES,NO,,,,,,,,,,,,,
Two Handed Spatula,Flip both dice upside down,2,givedice([7 - actualdice[0].basevalue[;]7 - actualdice[1].basevalue]);,Omegaflip,NORMAL|NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Two Handed Spatula_downgraded,Flip both dice upside down,2,givedice([7 - actualdice[0].basevalue[;]7 - actualdice[1].basevalue]);,Omegaflip,MAX3|MIN4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Two Handed Spatula_upgraded,Flip both dice upside down|,2,givedice([7 - actualdice[0].basevalue[;]7 - actualdice[1].basevalue]);,Omegaflip,NORMAL|NORMAL,,GREEN,,,,none,2,YES,NO,,,,,,,,,,,,,
Contact Juggling,Do [sword]<d6>[;] return dice[;]|reroll a random dice,1,attack(d); sfxdamage(target[;]d); var availdice = []; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); } givedice(d);,Proximity Mine,MAX3,,YELLOW,increaserange,change_power,,,0,NO,NO,,1,,,,,,,,,,,var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); } givedice(d);
Contact Juggling_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Proximity Mine,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Two Handed Spike,Even total: Do [sword]<d6>|Odd total: Gain [shield]<d6>|[gray](once per battle),1,if(d%2 == 0){ attack(d); sfx(~_shield~); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },Pillow Fort,NORMAL|NORMAL,,RED,change_power,complicate,,none,0,YES,YES,,,,,,,,,,if(d % 2 == 0) { e.castdirection = 1; } else { e.castdirection = -1; },,,
Two Handed Spike_upgraded,Even total: Gain [shield]<d6>|Odd total: Do [sword]<d6>|[gray](once per battle),1,if(d%2 == 1){ attack(d); sfx(~_shield~); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },Pillow Fort,NORMAL|NORMAL,,RED,,,,none,0,YES,YES,,,,,,,,,,if(d % 2 == 1) { e.castdirection = 1; } else { e.castdirection = -1; },,,
Proton Pack,[vanish]<d6> dmg[;] +[vanish]2 vanish|[gray](once per battle),1,if(target.name == ~Wisp~) { d = 999; } sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]2); /*flamethrower*/,Hadoken,NORMAL|NORMAL,,PINK,change_power,complicate,,,0,NO,YES,,,if(target.name == ~Wisp~) { target.innate.push(~is weak to proton packs~); },,,,,,,,,,
Proton Pack_upgraded,[vanish]<d6> dmg[;] +[vanish]4 vanish|[gray](once per battle),2,if(target.name == ~Wisp~) { d = 999; } sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]4);,Hadoken,NORMAL|NORMAL|NORMAL|NORMAL,,PINK,,,,,0,NO,YES,,,if(target.name == ~Wisp~) { target.innate.push(~is weak to proton packs~); },,,,,,,,,,
Stopwatch,At start of turn[;] [lock]Counter|equal to turn count[;] max 6,1,,Confiscate,,,GRAY,change_power,change_power,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,1,,,,e.animate(~flash~); var cr = turn; if(cr > 6) { cr = 6; } inflict(~counter_~ + cr); sfx(~_lock~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Stopwatch_upgraded,At start of turn[;] [lock]Counter|equal to turn count[;] max 6[;]|then deal [sword]2 damage,1,attack(2); sfxdamage(target[;]2);,Confiscate,,,GRAY,,,,none,0,NO,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,,e.animate(~flash~); var cr = turn; if(cr > 6) { cr = 6; } inflict(~counter_~ + cr); sfx(~_lock~); e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0.5[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Stopwatch_downgraded,At start of turn[;] [lock]Counter|equal to turn count[;] max 6[;]|but take [sword]2 damage,1,attackself(2); sfxdamage(self[;]2);,Confiscate,,,GRAY,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,,e.animate(~flash~); var cr = turn; if(cr > 6) { cr = 6; } inflict(~counter_~ + cr); sfx(~_lock~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Occam's Razor,Do [sword]<d6> damage[;] error|out your remaining items,2,attack(d); sfxdamage(target[;]d); inflictself(~ncr_error_all~); /*if self cpu instead of dice do actual error manually*/,Razor Blade,NORMAL|FREE2,,YELLOW,reducesize,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~ncr_error_all~);
Occam's Razor_downgraded,Do [sword]<d6> damage[;] error|out your remaining items,2,attack(d); sfxdamage(target[;]d); inflictself(~ncr_error_all~);,Razor Blade,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~ncr_error_all~);
Occam's Razor_weakened,Do [sword]<d6> damage[;] error|out your remaining items,1,attack(d); sfxdamage(target[;]d); inflictself(~ncr_error_all~);,Razor Blade,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~ncr_error_all~);
Tension,Gain [fury]2 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY[;]2); self.endturnnow();,Fury,NORMAL|NORMAL,9,RED,change_power,change_power,,,0,YES,YES,,2,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Tension_upgraded,Gain [fury]2 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY[;]2); self.endturnnow();,Fury,COUNTDOWN,9,RED,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Tension_downgraded,Gain [fury]1 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY); self.endturnnow();,Fury,NORMAL|NORMAL,9,RED,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Tension_weakened,Gain [fury]1 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY); self.endturnnow();,Fury,COUNTDOWN,9,RED,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Reverse Emulation,Mimic the gadget of the|last card the enemy used,1,self.textparticle(~No effect!~); /*reference to this video: www.youtube.com/watch?v=ar9WRwCiSr0 */,Boltzmann Brain,EVEN,,PURPLE,simplify,change_power,,none,0,YES,NO,hidereuseable,,,e.resetvar(~sourceequipment~);,runscript(~ncrmod/reverseemulation~[;][self[;]target[;]e]);,if(e.fulldescription.indexOf(~(passive: get [curse]1[])~) != -1) { inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~); },var alreadyupdating = false; if(self.getskillcard() != null && self.getskillcard().name == ~Inventor Gadgets~) alreadyupdating = true; if(!onlimit && !alreadyupdating) { self.setvar(~invgadgets_eqsused~[;]self.getvar(~invgadgets_eqsused~) + 1); if(self.getvar(~invgadgets_eqsused~) % 2 == 0) { self.setvar(~invgadgets_eqsused_display~[;]self.getvar(~invgadgets_eqsused_display~) + 1); } },,,if(e.getvar(~sourceequipment~) != e) { runscript(~ncrmod/reverseemulation~[;][self[;]target[;]e.getvar(~sourceequipment~)]); },,,
Reverse Emulation_downgraded,[quote]Bubble Gun[quote]|Do [sword]1 damage,1,attack(1); sfxdamage(target[;]999);,Boltzmann Brain,EVEN,,PURPLE,,,,none,0,NO,NO,hidereuseable,,,,,,,,,,,,
Ale Bat,Do [sword]<d6> damage. 1st|move each turn is reversed.,2,attack(d); sfxdamage(target[;]d);,Drunken Boxing,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(~reversenexttarget~);,,,,,,,
Ale Bat_upgraded,Take [sword]<d6> damage. 1st|move each turn is reversed.,2,attackself(d); sfxdamage(self[;]d);,Drunken Boxing,NORMAL|FREE3,,ORANGE,,,,,0,YES,NO,,,,,,e.animate(~flashandshake~); inflictself(~reversenexttarget~);,,,,,,,
Ale Bat_downgraded,Do [sword]<d6> damage. 1st|move each turn is reversed.,2,attack(d); sfxdamage(target[;]d);,Drunken Boxing,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(~reversenexttarget~);,,,,,,,
Gravity,Inflict [weaken]1[;] get a lower dice|[gray](Reuseable),1,givedice(rand([1[;]2[;]3[;]4[;]5[;]6].splice(0[;]d - 1))); inflict(WEAKEN);,Mirror Smash,REQUIRE6,,ORANGE,increaserange,change_power,,,-1,NO,NO,,1,,,,,,,,,,,givedice(rand([1[;]2[;]3[;]4[;]5[;]6].splice(0[;]d - 1)));
Gravity_downgraded,Get a lower dice|[gray](Reuseable),1,givedice(rand([1[;]2[;]3[;]4[;]5[;]6].splice(0[;]d - 1)));,Mirror Smash,REQUIRE6,,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Russian Roulette,Do [sword]<double> damage to|either you or the enemy,1,if(e.castdirection == -1) { attackself(d * 2); sfxdamage(self[;]d * 2); } else { attack(d * 2); sfxdamage(target[;]d * 2); },Drunken Boxing,NORMAL,,RED,add3,change_function,,,0,NO,NO,,,,,,,,,,var odds = 50; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; } if(!chance(odds)) { e.castdirection = -1; } else { e.castdirection = 1; },,,if(e.castdirection == -1) { attackself(d * 2); sfxdamage(self[;]d * 2); }
Russian Roulette_downgraded,Do [sword]<double> damage to yourself,1,attackself(d * 2); sfxdamage(self[;]d * 2);,Drunken Boxing,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Scrap Crystal,Recover [heal]3 health|(Always offered as scrap),1,attackself(-3);,Rejuvenate,MIN4,,GRAY,change_power,complicate,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Crystal_upgraded,Recover [heal]3 health|(Always offered as scrap)|,1,attackself(-3);,Rejuvenate,MIN4,,GRAY,,,,,2,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Crystal_downgraded,Recover [heal]3 health|(Always offered as scrap),1,attackself(-3);,Rejuvenate,REQUIRE5,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scraptula,Flip a dice upside down|(Always offered as scrap),1,givedice(7-d);,Parity Flip,RANGE25,,GRAY,simplify,change_power,,none,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scraptula_downgraded,Flip a dice upside down|(Always offered as scrap),1,givedice(7-d);,Parity Flip,RANGE45,,GRAY,,,,none,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Lamp,Stash a <slotdoubles>[;] return both dice|(Always offered as scrap),1,inflictself(~stash~+d); inflictself(~lantern~); givedice([d[;]d]);,Light Switch,DOUBLES|DOUBLES,,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Lamp_upgraded,Stash higher dice[;] return both|(Always offered as scrap),1,inflictself(~lantern~); if(actualdice[0].basevalue > actualdice[1].basevalue) { inflictself(~stash~+(actualdice[0].basevalue)); } else { inflictself(~stash~+(actualdice[1].basevalue)); } givedice([for(dice in actualdice) dice.basevalue]);,Light Switch,NORMAL|NORMAL,8,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Lamp_downgraded,Stash a <slotdoubles>[;] return a dice|(Always offered as scrap),1,inflictself(~stash~+d); inflictself(~lantern~); givedice(d);,Light Switch,DOUBLES|DOUBLES,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrapstick,Burn self[;] do [fire]3 dmg|(Always offered as scrap)|,1,var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE); sfxdamage(target[;]3); attack(3[;]FIRE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } } /*-we walked in?*/,Blowtorch,EVEN,,GRAY,change_power,change_power,,,-1,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapstick_upgraded,Do [fire]3 damage|(Always offered as scrap)|,1,sfxdamage(target[;]3); attack(3[;]FIRE);,Blowtorch,EVEN,,GRAY,,,,,-1,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapstick_downgraded,Burn self twice[;] do [fire]3 dmg|(Always offered as scrap)|,1,var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE[;]2); sfxdamage(target[;]3); attack(3[;]FIRE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(dicelist.length > 1) { dicelist[1].animate(inflictwhat[;]0.2); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value -= 2; } } } },Blowtorch,EVEN,,GRAY,,,,,-1,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapsies,In [jinx]<d6> turns[;] do [sword]<triple>|(Always offered as scrap),1,jinx(~Scrapsies~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;](d * 3)); sfx(~_thinghappens~);,Drunken Boxing,MAX3,,GRAY,change_power,change_power,,none,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapsies_upgraded,In [jinx]2 turns[;] do [sword]<triple>|(Always offered as scrap),1,jinx(~Scrapsies+~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;](d * 3)); sfx(~_thinghappens~);,Drunken Boxing,MAX3,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapsies_downgraded,In [jinx]<d6> turns[;] do [sword]<double>|(Always offered as scrap),1,jinx(~Scrapsies-~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;](d * 2)); sfx(~_thinghappens~);,Drunken Boxing,MAX3,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Slingshot,Do [sword]<double>[;] get a new dice|(Always offered as scrap),1,attack(d * 2); givedice();,Gadget Roll,MAX2,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Slingshot_upgraded,Do [sword]4[;] get a new dice|(Always offered as scrap),1,attack(4); givedice();,Gadget Roll,MAX2,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Slingshot_downgraded,Get a new dice|(Always offered as scrap),1,givedice();,Gadget Roll,MAX2,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Trap,Lock dice that roll <d6>|(Always offered as scrap),1,inflict(~counter_~ + d);,Copyright Strike,ODD,,GRAY,simplify,change_function,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Trap_downgraded,Lock dice that roll 3|(Always offered as scrap),1,inflict(~counter_3~);,Copyright Strike,ODD,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Hall of Daggers,[]+[sword]<d6> damage this fight|([sword]<var:hallofdaggersdmg> damage),2,self.setvar(~hallofdaggersdmg~[;]self.getvar(~hallofdaggersdmg~) + d); sfx(~upgradeequipment~);,Infinity Mirror,MAX3,,RED,,,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~hallofdaggersdmg~[;]0);,,if(e.availablethisturn && self.getvar(~hallofdaggersdmg~) > 0) { e.animate(~flashandshake~); attack(self.getvar(~hallofdaggersdmg~)); sfxdamage(target[;]self.getvar(~hallofdaggersdmg~)); },,,,,,,
Bulletproof Glass,Lose a dice this fight|Gain [shield]<d6> now[;] and each turn,1,if((self.dice + self.extradice + self.bonusdice) > 1) { inflictself(SHIELD[;]d); self.extradice--; inflictself(~ncr_lingeringshield~[;]d); sfx(~_survive~); } else { self.textparticle(~No effect!~); },Retreat,MAX3,,ORANGE,increaserange,decreaserange,,,0,YES,NO,,,,,,,,,,,,,
Buzzsaw,Combine dice[;]|split total in 4,1,if(d > 3) { var dicetogive = []; var options = [1[;]2[;]3[;]4[;]5[;]6]; var t = d; while(t - 3 < options.length) { options.pop(); } var r1 = rand(options); while(chance((r1 * r1) * 2.5)) { r1 = rand(options); } t -= r1; while(t - 2 < options.length) { options.pop(); } var r2 = rand(options); while(chance((r2 * r2) * 1.6666)) { r2 = rand(options); } t -= r2; while(t - 1 < options.length) { options.pop(); } var r3 = rand(options); while(chance((r3 * r3) * 0.8333)) { r3 = rand(options); } t -= r3; while(t < options.length) { options.pop(); } var r4 = options[options.length - 1]; t -= r4; dicetogive = [r1[;]r2[;]r3[;]r4]; shuffle(dicetogive); givedice(dicetogive[;]~splitdice~); } else { givedice([for(dice in actualdice) dice.basevalue]); self.textparticle(~no~); },Razor Blade,MIN3|MIN3,,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Buzzsaw_upgraded,Combine dice[;]|split total in 6,1,if(d > 5) { var dicetogive = []; var options = [1[;]2[;]3[;]4[;]5[;]6]; var t = d; while(t - 5 < options.length) { options.pop(); } var r1 = rand(options); while(chance((r1 * r1) * 2.5)) { r1 = rand(options); } t -= r1; while(t - 4 < options.length) { options.pop(); } var r2 = rand(options); while(chance((r2 * r2) * 2)) { r2 = rand(options); } t -= r2; while(t - 3 < options.length) { options.pop(); } var r3 = rand(options); while(chance((r3 * r3) * 1.5)) { r3 = rand(options); } t -= r3; while(t - 2 < options.length) { options.pop(); } var r4 = rand(options); while(chance((r4 * r4) * 1)) { r4 = rand(options); } t -= r4; while(t - 1 < options.length) { options.pop(); } var r5 = rand(options); while(chance((r5 * r5) * 0.5)) { r5 = rand(options); } t -= r5; while(t < options.length) { options.pop(); } var r6 = options[options.length - 1]; t -= r6; dicetogive = [r1[;]r2[;]r3[;]r4[;]r5[;]r6]; shuffle(dicetogive); givedice(dicetogive); } else { givedice(actualdice[;]~splitdice~); self.textparticle(~too lazy 4 this~); },Razor Blade,MIN3|MIN3|MIN3,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Buzzsaw_downgraded,Combine dice[;]|split total in 4,1,if(d > 3) { var dicetogive = []; var options = [1[;]2[;]3[;]4[;]5[;]6]; var t = d; while(t - 3 < options.length) { options.pop(); } var r1 = rand(options); while(chance((r1 * r1) * 2.5)) { r1 = rand(options); } t -= r1; while(t - 2 < options.length) { options.pop(); } var r2 = rand(options); while(chance((r2 * r2) * 1.6666)) { r2 = rand(options); } t -= r2; while(t - 1 < options.length) { options.pop(); } var r3 = rand(options); while(chance((r3 * r3) * 0.8333)) { r3 = rand(options); } t -= r3; while(t < options.length) { options.pop(); } var r4 = options[options.length - 1]; t -= r4; dicetogive = [r1[;]r2[;]r3[;]r4]; shuffle(dicetogive); givedice(dicetogive[;]~splitdice~); } else { givedice([for(dice in actualdice) dice.basevalue]); self.textparticle(~no~); },Razor Blade,MIN5|MIN5,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Tear Down This Wall,Do [sword]<d6> damage. On even[;]|set a random dice to <d6>,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); } },Perfectionism,NORMAL,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); } }
Tear Down This Wall_upgraded,Do [sword]<d6> damage[;]|set a random dice to <d6>,2,attack(d); sfxdamage(target[;]d); var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); },Perfectionism,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); }
Tear Down This Wall_downgraded,Do [sword]<d6> damage. On even[;]|set a random dice to <d6>-1,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d - 1){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d - 1[;] self.screenposition()); } } /*i am so original it is crazy!*/,Perfectionism,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d - 1){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d - 1[;] self.screenposition()); } } /*i am so original it is crazy!*/ /*this is a funyn coment i dont know who made it but its funny :) -gaetana*/
Nail Rat,Inflict [poison]2[;] get 2 dice|(You lose [heart]2 hp each turn),1,inflict(POISON[;]2); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]);,Anthrax,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]);
Nail Rat_downgraded,Inflict [poison]2 poison|(You lose [heart]2 hp each turn),1,inflict(POISON[;]2);,Anthrax,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Nail Rat_upgraded,Inflict [poison]2[;] get 2 dice|with values of 3 or less|(You lose [heart]2 hp each turn),1,inflict(POISON[;]2); givedice([rand([1[;]2[;]3])[;]rand([1[;]2[;]3])]);,Anthrax,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,givedice([rand([1[;]2[;]3])[;]rand([1[;]2[;]3])]);
Luckpick,Split a dice. 33% chance|to get this dice back,1,var odds = 33; if(getstatusself(~luck~) > 0){ odds = 66; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~Success!~); givedice([d[;]s[0][;]s[1]][;]~splitdice~); } else { givedice(s[;]~splitdice~); },Razor Blade,NORMAL,,GREEN,change_power,change_function,,none,0,YES,NO,,,,,,,,,,,,,
Luckpick_upgraded,Split a dice. 66% chance|to get this dice back,1,var odds = 66; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~Success!~); givedice([d[;]s[0][;]s[1]][;]~splitdice~); } else { givedice(s[;]~splitdice~); },Razor Blade,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Luckpick_downgraded,Split a dice. 33% chance|to return this dice instead,1,var odds = 33; if(getstatusself(~luck~) > 0){ odds = 66; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~No effect!~); givedice(d); } else { givedice(s[;]~splitdice~); },Razor Blade,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Plight,Half of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 2; if(p % 1 != 0) { p += 0.5; } removestatus(POISON[;]p); inflict(~alternate_poison~[;]p);,Emetic,COUNTDOWN,18,PURPLE,change_power,change_function,poison,,0,NO,NO,,1,,,,,,,,,,,
Plight_downgraded,1/4 of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 4; if(p % 1 != 0) { p += 0.5; } removestatus(POISON[;]p); inflict(~alternate_poison~[;]p);,Emetic,COUNTDOWN,18,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Plight_upgraded,Half of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 2; if(p % 1 != 0) { p += 0.5; } removestatus(POISON[;]p); inflict(~alternate_poison~[;]p);,Emetic,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Plight_weakened,1/4 of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 4; if(p % 1 != 0) { p += 0.5; } removestatus(POISON[;]p); inflict(~alternate_poison~[;]p);,Emetic,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Third Place Cauldron,Get a different dice[;] do [sword]3|,1,var dicelist = [1[;]2[;]3[;]4[;]5[;]6]; dicelist.remove(d); givedice(rand(dicelist)); attack(3); sfxdamage(target[;]3);,Magic Dice,REQUIRE3,,ORANGE,change_power,change_function,,,3,NO,NO,,1,,,,,,,,,,,
Third Place Cauldron_upgraded,Get a higher dice[;] do [sword]3|,1,if(d >= 6) givedice(d + 1); else givedice(rand([6[;]5[;]4[;]3[;]2[;]1].splice(0[;]6-d))); attack(3); sfxdamage(target[;]3);,Magic Dice,REQUIRE3,,ORANGE,,,,,3,NO,NO,,,,,,,,,,,,,
Third Place Cauldron_downgraded,Do [sword]3 damage|,1,attack(3); sfxdamage(target[;]3);,Magic Dice,REQUIRE3,,ORANGE,,,,,3,NO,NO,,,,,,,,,,,,,
Autohook,Gain [recycle]Re-Equip for|every 4 items used|this fight (items used: <var:itemuses>),1,/*i decided; you know what; if i'm really going to implement all of these ridiculous reequip edgecases for stuff like whipcrack; i'm not letting them go to waste*/,Sustainability,,,GREEN,change_power,change_power,,none,0,NO,NO,,,self.setvar(~itemuses~[;]0);,self.setvar(~itemuses~[;]0);,,,if(!onlimit) { /*kludge so if you have more than one autohook the recorded equipment use count isn't inflated*/ var alleq = [for(eq in self.equipment) if(eq.name == ~Autohook~) eq]; if(alleq[0] == e) self.setvar(~itemuses~[;]self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 4 == 0) { sfx(~_recycle~); e.animate(~flashandshake~); inflictself(REEQUIPNEXT); } },,,,,,
Autohook_upgraded,Gain [recycle]Re-Equip at start|of fight[;] and for every 4|items used this fight (<var:itemuses>),1,,Sustainability,,,GREEN,,,,none,0,NO,NO,,,self.setvar(~itemuses~[;]0);,self.setvar(~itemuses~[;]0);,,if(turn == 1) { e.animate(~flashandshake~); inflictself(REEQUIPNEXT); sfx(~_recycle~); },if(!onlimit) { var alleq = [for(eq in self.equipment) if(eq.name == ~Autohook~) eq]; if(alleq[0] == e) self.setvar(~itemuses~[;]self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 4 == 0) { sfx(~_recycle~); e.animate(~flashandshake~); inflictself(REEQUIPNEXT); } },,,,,,
Autohook_downgraded,Gain [recycle]Re-Equip for|every 5 items used|this fight (items used: <var:itemuses>),1,,Sustainability,,,GREEN,,,,none,0,NO,NO,,,self.setvar(~itemuses~[;]0);,self.setvar(~itemuses~[;]0);,,,if(!onlimit) { var alleq = [for(eq in self.equipment) if(eq.name == ~Autohook~) eq]; if(alleq[0] == e) self.setvar(~itemuses~[;]self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 5 == 0) { sfx(~_recycle~); e.animate(~flashandshake~); inflictself(REEQUIPNEXT); } },,,,,,
Trinity Charm,Roll a 3[;] 33% chance|to roll another 3,1,var odds = 33.33; if(getstatusself(~luck~) > 0){ odds = 66.66; } if(getstatusself(~luck+~) > 0){ odds = 100; }   if(chance(odds)) { self.textparticle(~Success!~); givedice([3[;]3]); } else{ givedice(3); },Trinity,MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Trinity Charm_upgraded,Roll a 3[;] 33% chance|to roll another 3,1,var odds = 33.33; if(getstatusself(~luck~) > 0){ odds = 66.66; } if(getstatusself(~luck+~) > 0){ odds = 100; }   if(chance(odds)) { self.textparticle(~Success!~); givedice([3[;]3]); } else{ givedice(3); },Trinity,COUNTDOWN,4,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Trinity Charm_downgraded,Roll a 3,1,givedice(3); /*tc has gone through a million and one iterations. in its very first incarnation it was a 3-countdown 33% chance to roll a 3; 3 uses this turn but it kind of captured the very essence of why jackeea doesn't like chance items. same with when its chance was to roll three 3s. at some point the base was needs 3 and the upgrade made it min 3. the incarnation this was in before i wrote this note and redesigned it was the same as before; but min3 and the upgrade made it a countdown of 3. for the longest time i refused to touch tc because i didn't want it to involve any number that wasn't a 3. this incarnation involves a 4 (min; countdown) and a 2 (how many 3s you roll when the chance succeeds). oh well. (also: in its very first few stages; it was green. how bizarre is that?) (also also: if this were morefluff i would've just stuck with the first design and never rethought it. nah jk ilu jackeea)*/,Trinity,MIN4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Spear,Do [sword]<d6> damage|Get a new dice,1,attack(d); sfxdamage(target[;]d); givedice(); /*my attempt at coming up with a generic 'spear' item. the original spear after which starspear; magic spear; etc. are named was renamed six shooter*/,Focus,REQUIRE6,,RED,increaserange,change_power,,,0,NO,NO,,2,,,,,,,,,,,givedice();
Spear_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Focus,REQUIRE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Ubernudge,-<d6> to all dice[;]|won't nudge below 1,1,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if(mydice.basevalue == 1) continue; else { if(mydice.basevalue - d < 1){ mydice.animatereroll(1[;] self.screenposition()[;] c * 0.05); } else { mydice.animatereroll((mydice.basevalue - d)[;] self.screenposition()[;] c * 0.05); } c++; } } },Double Whammy,MAX2,,GREEN,increaserange,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Fatal Attraction,Drain [heart]4 health,2,drain(4); sfx(~_drain~);,Blood Sip,MAX4,,ORANGE,simplify,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
Fatal Attraction_downgraded,Drain [heart]4 health,2,drain(4); sfx(~_drain~);,Blood Sip,REQUIRE4,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Passivecation Program,Lock [lock]2 dice,2,inflict(LOCK[;]2); sfx(~_lock~); /*ncrmod jester finale cards include: brainwashing the enemy to become a model member of dystopian society*/,Copyright Strike,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
Passivecation Program_downgraded,Blind [blind]2 dice,2,inflict(BLIND[;]2); sfx(~_blind~);,Copyright Strike,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Passivecation Program_upgraded,Lock [lock]3 dice,2,inflict(LOCK[;]3); sfx(~_lock~);,Copyright Strike,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
We Watch and We Wait,In [jinx]<d6> turns[;]|deal [sword]20 damage,2,jinx(~Watch and Wait~[;]~take [sword]20 damage~[;]~Take [sword]20 damage~[;]~attack(20); sfxdamage(null[;]20); sfx(\~_fire\~[;]\~\~[;]0.1); ~[;]target[;]self[;]d[;]0); sfx(~_thinghappens~);,Drunken Boxing,MIN4,,ORANGE,increaserange,complicate,,,0,NO,NO,finale,,,,,,,,,,,,
Anger,Burn [fire]<d6> dice,2,inflict(FIRE[;]d); sfx(~_fire~);,Heat Ray,MIN2,,ORANGE,add2,complicate,,,0,NO,NO,finale,,,,,,,,,,,,
Face the Music,Do [sword]1 dmg[;] +[weaken]1 weaken|,2,attack(1); sfxdamage(target[;]1); inflict(WEAKEN); sfx(~_weaken~);,Guitar Solo,EVEN,,ORANGE,change_power,change_power,,,-1,NO,NO,finale,,,,,,,,,,,,
Face the Music_downgraded,Do [sword]1 dmg[;] +[weaken]1 weaken|,2,attack(1); sfxdamage(target[;]1); inflict(WEAKEN); sfx(~_weaken~);,Guitar Solo,EVEN,,ORANGE,,,,,3,NO,NO,finale,,,,,,,,,,,,
Face the Music_upgraded,Do [sword]1 dmg[;] +[weaken]1 weaken|,2,attack(1); sfxdamage(target[;]1); inflict(WEAKEN); sfx(~_weaken~);,Guitar Solo,MIN2,,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Revelation,Get two blessings at|the start of next turn,2,jinx(~Revelation~[;]~get 2 blessings~[;]~Get 2 blessings~[;]~for(i in 0...2) { var randomstatus = rand([SHIELD[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE]); var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflict(randomstatus [;] a); if(randomstatus == REDUCE) randomstatus = SHIELD; if(randomstatus == REEQUIPNEXT) randomstatus = 'recycle'; sfx('_' + randomstatus.toLowerCase()[;]''[;]i * 0.2); }~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~),,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Crazy Glue,[lock]Counter a random dice|that's not countered yet,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Crazy Glue_downgraded,[lock]Counter a random dice|that's not countered yet,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,ODD,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Crazy Glue_upgraded,[lock]Counter a random dice|higher than or equal to <d6>,1,var availablecounters = [6[;]5[;]4[;]3[;]2[;]1].splice(0[;]7-d); for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Thermostat,Remove up to [ice]1 from you|Inflict [ice] equal to excess,1,,Reset Button,,,BRIGHTCYAN,change_power,noeffect,,none,0,NO,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,1,,,e.setvar(~thermoactions~[;]1 - getstatusself(ICE)); removestatusself(ICE);,e.animate(~flashandshake~); if(e.getvar(~thermoactions~) > 0) { inflict(ICE[;]e.getvar(~thermoactions~)); sfx(~_ice~); },,,,,,,
Thermostat_upgraded,Remove up to [ice]2 from you|Inflict [ice] equal to excess,1,,Reset Button,,,BRIGHTCYAN,,,,none,0,NO,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,e.setvar(~thermoactions~[;]2 - getstatusself(ICE)); removestatusself(ICE[;]2);,e.animate(~flashandshake~); if(e.getvar(~thermoactions~) > 0) { inflict(ICE[;]e.getvar(~thermoactions~)); sfx(~_ice~); },,,,,,,
Hot Table,Get a 6[;] but [fire]burn|yourself twice each turn,1,/*'hot table' is craps terminology for a particular table with a very good winning streak*/,Mirror Smash,,,RED,change_power,change_power,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,2,,,inflictself(FIRE[;]2);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 6; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Hot Table_upgraded,Get a 6[;] but [fire]burn|yourself once each turn,1,/*former ignore reequip method*/,Mirror Smash,,,RED,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,inflictself(FIRE);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 6; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Hot Table_downgraded,Get a 5[;] but [fire]burn|yourself twice each turn,1,/*former ignore reequip method*/,Mirror Smash,,,RED,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,inflictself(FIRE[;]2);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 5; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Hot Table_weakened,Get a 5[;] but [fire]burn|yourself once each turn,1,/*former ignore reequip method*/,Mirror Smash,,,RED,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,inflictself(FIRE);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 5; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Murk,Roll a new [blind]blind dice|[gray](Reuseable),1,givedice(); self.dicepool[self.dicepool.length - 1].blind = true; self.symbolparticle(~blind~); sfx(~_blind~);,Random Roll,NORMAL,,GRAY,change_power,removereusable,,none,4,YES,NO,,1,,,,,,,,,,,
Murk_upgraded,Roll 4 new [blind]blind dice,1,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); for(i in 1...5) { if(self.dicepool[self.dicepool.length - i] != null) { self.dicepool[self.dicepool.length - i].blind = true; } } self.symbolparticle(~blind~); sfx(~_blind~);,Random Roll,NORMAL,,GRAY,,,,none,0,YES,NO,,,,,,,,,,,,,
Zoop Zoop,Do [sword]<d6> damage|[sword]3 less if above 3,1,attack(d > 3 ? d - 3 : d); sfxdamage(target[;]d > 3 ? d - 3 : d);,Underwhelm,NORMAL,,PURPLE,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Zoop Zoop_upgraded,Do [sword]<d6> damage|[sword]2 less if above 2,1,attack(d > 2 ? d - 2 : d); sfxdamage(target[;]d > 2 ? d - 2 : d);,Underwhelm,NORMAL,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Zoop Zoop_downgraded,Do [sword]<d6> damage|[sword]3 less if above 3,1,attack(d > 3 ? d - 3 : d); sfxdamage(target[;]d > 3 ? d - 3 : d);,Underwhelm,MAX4,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Bumper Sticker,Each turn[;] add 1 to|your two lowest dice,1,,Megabump,,,GREEN,change_power,change_power,,,0,NO,NO,shockavoid|altpoisonavoid,,,,,var c = 0; var extradice = []; e.animate(~flashandshake~); for(i in 0...2) { var dicelist = [for(dice in self.dicepool) if(dice.available() && !dice.intween()) dice]; if(dicelist.length > 0) { var lowestdice = dicelist[0]; for(dice in dicelist) if(dice.basevalue < lowestdice.basevalue) lowestdice = dice; if (lowestdice.basevalue >= 6){ extradice.push(1); lowestdice.animatereroll(6[;] self.screenposition()[;] c * 0.05); } else { lowestdice.animatereroll((lowestdice.basevalue + 1)[;] self.screenposition()[;] c * 0.05); } c++; } } givedice(extradice);,,,,,,,
Bumper Sticker_upgraded,Each turn[;] add 1 to|your three lowest dice,1,,Megabump,,,GREEN,,,,,0,NO,NO,shockavoid|altpoisonavoid,,,,,var c = 0; var extradice = []; e.animate(~flashandshake~); for(i in 0...3) { var dicelist = [for(dice in self.dicepool) if(dice.available() && !dice.intween()) dice]; if(dicelist.length > 0) { var lowestdice = dicelist[0]; for(dice in dicelist) if(dice.basevalue < lowestdice.basevalue) lowestdice = dice; if (lowestdice.basevalue >= 6){ extradice.push(1); lowestdice.animatereroll(6[;] self.screenposition()[;] c * 0.05); } else { lowestdice.animatereroll((lowestdice.basevalue + 1)[;] self.screenposition()[;] c * 0.05); } c++; } } givedice(extradice);,,,,,,,
Bumper Sticker_downgraded,Each turn[;] add 1 to|your lowest dice,1,,Megabump,,,GREEN,,,,,0,NO,NO,shockavoid|altpoisonavoid,,,,,var c = 0; var extradice = []; e.animate(~flashandshake~); for(i in 0...1) { var dicelist = [for(dice in self.dicepool) if(dice.available() && !dice.intween()) dice]; if(dicelist.length > 0) { var lowestdice = dicelist[0]; for(dice in dicelist) if(dice.basevalue < lowestdice.basevalue) lowestdice = dice; if (lowestdice.basevalue >= 6){ extradice.push(1); lowestdice.animatereroll(6[;] self.screenposition()[;] c * 0.05); } else { lowestdice.animatereroll((lowestdice.basevalue + 1)[;] self.screenposition()[;] c * 0.05); } c++; } } givedice(extradice);,,,,,,,
[END NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,0,,,
[BEGIN INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Blighted Zap,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Blighted Zap_upgraded,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Blighted Zap_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,Blight,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Bet,Deal +[sword]1 each attack|until you take [sword]10 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,id|shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 10) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 1); },,,removestatusself(~Permaboost~[;] 1); removestatusself(~Permadown~[;] 1);,,,,
Bet_upgraded,Deal +[sword]1 each attack|until you take [sword]16 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,id|shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 16) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 2); },,,removestatusself(~Permaboost~[;] 1);,,,,
Roulette,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> dmg,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,MAX4,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Roulette_upgraded,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> dmg,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,NORMAL|FREE1,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Roulette_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,Random Hit,MAX3,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Countvalanche,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Countvalanche_upgraded,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,1,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Countvalanche_downgraded,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] 3);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parry,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parry_downgraded,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry_downgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parrying Sword,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX4,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Sword_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Sword_downgraded,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX2,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Power Up,Deal [sword]1 extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,REQUIRE1,,RED,change_power,noeffect,,,0,YES,NO,id,1,,,,,,,,,,,
Power Up_upgraded,Deal [sword]<d6> extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,MAX2,,RED,,,,,0,YES,NO,id,,,,,,,,,,,,
Forbidden Magic,Do [sword]<d6> damage[;]|inflict [curse]Curse,1,attack(d); inflict(CURSE); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Forbidden Magic_upgraded,Do [sword]<d6> damage[;]|inflict [curse]2 curse,1,attack(d); inflict(CURSE[;] 2); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,id,,,,,,,,,,,,
Forbidden Magic_downgraded,Do [sword]<d6> damage,1,attack(d) sfxdamage(target[;] d);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,id,,,,,,,,,,,,
Regen Ale,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,Regenerative Ability,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,id|regenitem,1,,,,,,,,,,,
Regen Ale_upgraded,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,,MAX3,,GREEN,,,,,0,YES,NO,id|regenitem,,,,,,,,,,,,
Regen Ale_downgraded,Heal [heal]2 HP,1,attackself(-2); sfx(~_cure~);,,REQUIRE2,,GREEN,,,,,0,YES,NO,id|regenitem,,,,,,,,,,,,
[END INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Vise Flip,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Skill,DOUBLES|DOUBLES,,GRAY,change_power,noeffect,,,0,YES,NO,fd|appearsforparts,1,,,,,,,,,,,
Vise Flip_upgraded,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Skill,NORMAL|NORMAL,,GRAY,change_power,noeffect,,,0,YES,NO,fd|appearsforparts,,,,,,,,,,,,
Poor Yorick,Curse both fighters[;]|count -3 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Cackle,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,if(e.shockedsetting <= 0  && e.availablethisturn){ var mydice = new elements.Dice(); mydice.basevalue = 3; e.assigndice(mydice); mydice.assigned = e; self.dicepool.push(mydice); e.animate(~flash~); },,,,,,
Poor Yorick_upgraded,Curse both fighters[;]|count -4 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Cackle,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,if(e.shockedsetting <= 0  && e.availablethisturn){ var mydice = new elements.Dice(); mydice.basevalue = 4; e.assigndice(mydice); mydice.assigned = e; self.dicepool.push(mydice); e.animate(~flash~); },,,,,,
Poor Yorick_downgraded,Curse yourself[;]|count -3 on each item use,1,inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Cackle,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,if(e.shockedsetting <= 0  && e.availablethisturn){ var mydice = new elements.Dice(); mydice.basevalue = 3; e.assigndice(mydice); mydice.assigned = e; self.dicepool.push(mydice); e.animate(~flash~); },,,,,,
Flame Whip,Do [fire]<d6> damage[;]|burn yourself,2,attack(d[;]FIRE); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2); var dmg = new elements.Skill(~Against All Odds_old~); dmg.script=~sfxdamage(target[;] ~+d+~);~; var ex = new motion.actuators.SimpleActuator(null[;]0.1[;]null); ex._repeat = 1; ex.onRepeat(dmg.execute[;][self[;]target]); ex.move(); sfx(~_whooshweapons~);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE);
Flame Whip_upgraded,Do [fire]<d6> damage[;]|roll a burning dice,2,attack(d[;]FIRE); inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); var dmg = new elements.Skill(~Against All Odds_old~); dmg.script=~sfxdamage(target[;] ~+d+~);~; var ex = new motion.actuators.SimpleActuator(null[;]0.1[;]null); ex._repeat = 1; ex.onRepeat(dmg.execute[;][self[;]target]); ex.move(); sfx(~_whooshweapons~);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,inflictself(FIRE); givedice();
Frozen Gloves,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d[;]ICE); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);
Frozen Gloves_upgraded,Do [ice]<d6> damage[;]|roll a one,2,attack(d[;]ICE); givedice(1); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,givedice(1);
Iron Helmet,Add [shield]<d6> shield[;] in two|turns[;] take [sword]<d6> dmg,2,inflictself(SHIELD[;]d); jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;]d); sfx(~_shield~[;]~~[;]0.2); sfx(~_thinghappens~[;]~~[;]0.2);,Pillow Fort,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Iron Helmet_upgraded,Add [shield]<d6> shield[;] in three|turns[;] take [sword]<d6> dmg,2,inflictself(SHIELD[;]d); jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]3[;]d); sfx(~_shield~[;]~~[;]0.2); sfx(~_thinghappens~[;]~~[;]0.2);,Pillow Fort,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Iron Helmet_downgraded,Add [shield]<d6> shield[;] next|turn[;] take [sword]<d6> dmg,2,inflictself(SHIELD[;]d); jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]1[;]d); sfx(~_shield~[;]~~[;]0.2); sfx(~_thinghappens~[;]~~[;]0.2);,Pillow Fort,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Dullplicate,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,fd,1,,,,,,,,,,,
Dullplicate_downgraded,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,REQUIRE1,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Dullplicate_upgraded,Duplicate all unused <d6>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Switchblade,Do [sword]<d6>[;] return all dice|used on this on last use|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d); var dicearray = e.getvar(~switchbladedice~); dicearray.push(d); if(e.usesleft <= 0) givedice(dicearray); else e.setvar(~switchbladedice~[;]dicearray);,Pirate Glove,MAX3,,RED,change_power,change_power,,,4,NO,NO,,,,e.setvar(~switchbladedice~[;][]);,e.setvar(~switchbladedice~[;][]);,,,,e.setvar(~switchbladedice~[;][]);,,,,
Switchblade_upgraded,Do [sword]<d6>[;] return all dice|used on this on last use|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d); var dicearray = e.getvar(~switchbladedice~); dicearray.push(d - 1); if(e.usesleft <= 0) givedice(dicearray); else e.setvar(~switchbladedice~[;]dicearray);,Pirate Glove,MAX3|FREE1,,RED,change_power,change_power,,,3,NO,NO,,,,e.setvar(~switchbladedice~[;][]);,e.setvar(~switchbladedice~[;][]);,,,,e.setvar(~switchbladedice~[;][]);,,,,
Switchblade_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Pirate Glove,MAX3,,RED,change_power,change_power,,,4,NO,NO,,,,,,,,,,,,,
Half Moon Cauldron_upgraded,Set a random dice to 6|[gray](Reuseable),1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 6){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(6[;] self.screenposition()); sfx(~diceroll~); } },Reversal,MAX5,,GREEN,change_power,change_power,,,2,YES,NO,fd,1,,,,,,,,,,,
Half Moon Cauldron_downgraded,Set a random dice to 4|[gray](Reuseable),1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 4){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(4[;] self.screenposition()); sfx(~diceroll~); } },Reversal,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Berlin Blade,Do [sword]3 damage[comma]|set a random dice to <d6>,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); sfx(~diceroll~); } }attack(3); sfxdamage(target[;]3);,Reversal,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,fd,1,,,,,,,,,,,
Berlin Blade_upgraded,Do [sword]3 damage[comma]|return dice,1,attack(3); sfxdamage(target[;]3); givedice(d);,Reversal,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Berlin Blade_downgraded,Do [sword]1 damage[comma]|set a random dice to <d6>,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d[;] self.screenposition()); sfx(~diceroll~); } }attack(1); sfxdamage(target[;]1);,Reversal,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Magic Kapow,Do [sword]3 damage[comma] [sword]6 if any|M. Kapow was used this turn,1,if(self.hasstatus(~mkapowcharge~)) { attack(6); sfxdamage(target[;]6); }else { attack(3); sfxdamage(target[;]3); }inflictself(~mkapowcharge~); sfx(~_magic~);,Reversal,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,fd,1,,,,,,,,,,,
Magic Kapow_downgraded,Do [sword]2 damage[comma] [sword]4 if any|M. Kapow was used this turn,1,if(self.hasstatus(~mkapowcharge~)) { attack(4); sfxdamage(target[;]4); }else { attack(2); sfxdamage(target[;]2); }inflictself(~mkapowcharge~); sfx(~_magic~);,Reversal,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Magic Kapow_upgraded,Do [sword]4 damage[comma] [sword]8 if any|M. Kapow was used this turn,1,if(self.hasstatus(~mkapowcharge~)) { attack(8); sfxdamage(target[;]8); }else { attack(4); sfxdamage(target[;]4); }inflictself(~mkapowcharge~); sfx(~_magic~);,Reversal,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
[END FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN YETMOREEPISODES],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Swiftsword,Do [sword]<d6> damage[;] on 6[;]|split a random dice in two|[90%][quote]I sawed this dice in half![quote],2,attack(d); sfxdamage(target[;]d); if (d==6) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); } },Magic Lockpick,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,yme,,,,,,,,,,,,if (d==6) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); } }
Swiftsword_upgraded,Do [sword]<d6> dmg[;] on even[;]|split a random dice in two|[90%][quote]I sawed this dice in half![quote],2,attack(d); sfxdamage(target[;]d); if (d%2==0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); } },Magic Lockpick,NORMAL,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,if (d%2==0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); } }
Swiftsword_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Magic Lockpick,NORMAL,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,
Engineer's Wrench,Do [sword]<d6> damage[;] on 6[;]|[95%]add [sword]2[;] heal [heal]2 or gain [dodge]1,2,if (d==6) { var choice = rand([0[;]1[;]2]); if (choice==0) { attack(d+2); sfxdamage(target[;]d+2); } else if (choice==1) { attack(d); sfxdamage(target[;]d); attackself(-2); sfx(~_heal~); } else { attack(d); sfxdamage(target[;]d); inflictself(DODGE); sfx(~_dodge~); } } else { attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,yme,,,,,,,,,,,,if (d==6) { var choice = rand([0[;]1[;]2]); if (choice==1) { attackself(-2); sfx(~_heal~); } else { inflictself(DODGE); sfx(~_dodge~); } }
Engineer's Wrench_upgraded,Do [sword]<d6> damage[;] on 6[;]|[95%]add [sword]2[;] heal [heal]2 or gain [dodge]1,1,if (d==6) { var choice = rand([0[;]1[;]2]); if (choice==0) { attack(d+2); sfxdamage(target[;]d+2); } else if (choice==1) { attack(d); sfxdamage(target[;]d); attackself(-2); sfx(~_heal~); } else { attack(d); sfxdamage(target[;]d); inflictself(DODGE); sfx(~_dodge~); } } else { attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,yme,,,,,,,,,,,,if (d==6) { var choice = rand([0[;]1[;]2]); if (choice==1) { attackself(-2); sfx(~_heal~); } else { inflictself(DODGE); sfx(~_dodge~); } }
Engineer's Wrench_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,yme,,,,,,,,,,,,
Engineer's Wrench_weakened,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,yme,,,,,,,,,,,,
Air Fryer,Do [fire]3 damage[;] inflict [shock]1|[gray](Reusable),1,attack(3[;]FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Firebomb,COUNTDOWN,7,RED,change_power,change_power,,,3,NO,NO,yme,,,,,,,,,,,,
Air Fryer_upgraded,Do [fire]5 damage[;] inflict [shock]1|[gray](Reusable),1,attack(5[;]FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Firebomb,COUNTDOWN,7,RED,,,,,3,NO,NO,yme,,,,,,,,,,,,
Air Fryer_downgraded,Do [fire]1 damage[;] inflict [shock]1|[gray](Reusable),1,attack(1[;]FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Firebomb,COUNTDOWN,7,RED,,,,,3,NO,NO,yme,,,,,,,,,,,,
Box Office,Gain [reduce]1 reduce|[gray](Reusable),2,inflictself(REDUCE); sfx(~_shield~);,Protection,COUNTDOWN,6,ORANGE,change_power,change_power,,,3,YES,NO,finale|yme,,,,,,,,,,,,
Box Office_upgraded,Gain [reduce]2 reduce|[gray](Reusable),2,inflictself(REDUCE[;]2); sfx(~_shield~);,Protection,COUNTDOWN,6,ORANGE,,,,,3,YES,NO,finale|yme,,,,,,,,,,,,
Box Office_downgraded,Gain [shield]1 shield|[gray](Reusable),2,inflictself(SHIELD); sfx(~_shield~);,Protection,COUNTDOWN,6,ORANGE,,,,,3,YES,NO,finale|yme,,,,,,,,,,,,
Constructive Criticism,Take [sword]4 damage[;] |in [jinx]1 turn[;] gain [fury][]Fury,2,attackself(4); sfxdamage(target[;]4); jinx(~Constructive Criticism~[;]~gain [fury]1 Fury~[;]~Gain [fury]1 Fury~[;]~if(getstatus(\~spookyfury\~)>0){target.textparticle(\~No effect!\~);} else {inflict(FURY);sfx(\~_fury\~);}~[;]self[;]self[;]1[;](d * 3)); sfx(~_thinghappens~); self.status[self.status.length-1].symbol = ~fury~;,Fury,EVEN,,ORANGE,change_power,change_power,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Constructive Criticism_upgraded,In [jinx]1 turn[;] gain [fury][]Fury,2,jinx(~Constructive Criticism~[;]~gain [fury]1 Fury~[;]~Gain [fury]1 Fury~[;]~inflict(FURY);sfx(\~_fury\~);~[;]self[;]self[;]1[;](d * 3)); sfx(~_thinghappens~); for (st in self.status) { if (st.name == ~Constructive Criticism~) { st.symbol = ~fury~; } },Fury,EVEN,,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Constructive Criticism_downgraded,Take [sword]4 damage,2,attackself(4); sfxdamage(target[;]4);,Fury,EVEN,,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
One I Prepared Earlier,Get some dice that add up |to 7 next turn,2,var currenttot = 0; while (currenttot < 7) { var nextdice = rand([1[;]2[;]3[;]4[;]5[;]6]); trace(nextdice); if (currenttot+nextdice>7) { trace(~Is too big! Use ~+(7-currenttot)); inflictself(~stash~+(7-currenttot)); currenttot = 7; } else { inflictself(~stash~+nextdice); currenttot += nextdice; } } inflictself(~illuminate~); sfx(~_thinghappens~);,Magic Dice,COUNTDOWN,7,ORANGE,change_power,change_power,,,0,YES,NO,finale|yme,,,,,,,,,,,,
One I Prepared Earlier_upgraded,Get some dice that add up |to 10 next turn,2,var currenttot = 0; while (currenttot < 10) { var nextdice = rand([1[;]2[;]3[;]4[;]5[;]6]); trace(nextdice); if (currenttot+nextdice>10) { trace(~Is too big! Use ~+(10-currenttot)); inflictself(~stash~+(10-currenttot)); currenttot = 10; } else { inflictself(~stash~+nextdice); currenttot += nextdice; } } inflictself(~illuminate~); sfx(~_thinghappens~);,Magic Dice,COUNTDOWN,7,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
One I Prepared Earlier_downgraded,Get some dice that add up |to 1 next turn,2,var currenttot = 0; while (currenttot < 1) { var nextdice = rand([1[;]2[;]3[;]4[;]5[;]6]); trace(nextdice); if (currenttot+nextdice>1) { trace(~Is too big! Use ~+(1-currenttot)); inflictself(~stash~+(1-currenttot)); currenttot = 1; } else { inflictself(~stash~+nextdice); currenttot += nextdice; } } inflictself(~illuminate~); sfx(~_thinghappens~);,Magic Dice,COUNTDOWN,7,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Slapstick,Take [sword]<d6> damage|Fully recharge your limit,2,attackself(d); sfxdamage(target[;]d); self.limitvalue = self.limitmax;,Unlimited Limit,MIN4,,ORANGE,simplify,complicate,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Final Mirror,+1 dice this fight,2,if(simulation) { bonus(1000); } else{ self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN5,,ORANGE,increaserange,complicate,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Scrap War,Do [sword]5 damage|(Always offered as scrap),1,attack(5); sfxdamage(target[;]5);,Plasma Gun,REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap War_upgraded,Do [sword]10 damage|(Always offered as scrap),1,attack(10); sfxdamage(target[;]10);,Plasma Gun,REQUIRE1|REQUIRE2,,GRAY,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap War_downgraded,Do [sword]1 damage|(Always offered as scrap),1,attack(1); sfxdamage(target[;]1);,Plasma Gun,REQUIRE1,,GRAY,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Bleeding Edge,Everyone drains [heart]<d6> health|(Always offered as scrap),1,sfx(~_drain~); var s = new elements.Skill(~Against All Odds_Old~); s.script=~drain(~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][target[;]self]); tw.move(); var s = new elements.Skill(~Against All Odds_Old~); s.script=~drain(~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.01[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,Blood Sip,NORMAL,,,add2,complicate,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap Petal,Inflict [poison]??? poison|(Always offered as scrap),1,var poison = 0; for (ad in actualdice) { if (ad.basevalue == 3 # ad.basevalue == 5) { poison+=d-1; } } if (poison > 0) { inflict(POISON[;]poison); sfx(~_poison~); },Poison Arrow,MAX3|MAX3,,,change_power,change_power,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap Petal_upgraded,Inflict [poison]??? poison|(Always offered as scrap),1,var poison = 0; for (ad in actualdice) { if (ad.basevalue == 3 # ad.basevalue == 5) { poison+=d-1; } } if (poison > 0) { inflict(POISON[;]poison); sfx(~_poison~); },Poison Arrow,NORMAL|NORMAL,,,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap Petal_downgraded,Inflict [poison]??? poison|(Always offered as scrap),1,var poison = 0; for (ad in actualdice) { if (ad.basevalue == 3 # ad.basevalue == 5) { poison+=d-1; } } if (poison > 0) { inflict(POISON[;]poison); sfx(~_poison~); },Poison Arrow,MAX3|MAX3,,,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Ultimate Heal,Cost [star]MAX[]: Heal [heal]2 hp|(Always offered as scrap),1,if (self.limitvalue == self.limitmax) { self.limitvalue = 0; attackself(-2); sfx(~_heal~); } else { self.textparticle(~Can't afford!~); },Regenerate,EVEN,,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Ultimate Heal_upgraded,Cost [star]2[]: Heal [heal]2 hp|(Always offered as scrap),1,if (self.limitvalue >= 2) { self.limitvalue -= 2; attackself(-2); sfx(~_heal~); } else { self.textparticle(~Can't afford!~); },Regenerate,EVEN,,GRAY,,,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Ultimate Heal_downgraded,Cost [star]MAX[]: Take [sword]2|(Always offered as scrap),1,if (self.limitvalue == self.limitmax) { self.limitvalue = 0; attackself(2); sfxdamage(self[;]2); } else { self.textparticle(~Can't afford!~); },Regenerate,EVEN,,GRAY,,,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Fire Broke,[]-[heart]1 for each status on you|(Always offered as scrap),1,pierceattackself(getstatusself(ALL)); sfxdamage(self[;]getstatusself(ALL));,Stardust,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Overhelm,[shield]<timesused> shield[;] +[shield]1 each use|[gray](Reuseable),2,inflictself(SHIELD[;]e.timesused+1); sfx(~_shield~);,Barricade,ODD,,ORANGE,change_power,change_power,,,2,YES,NO,yme,,,,,,,,,,,,
Overhelm_upgraded,[shield]<timesused> shield[;] +[shield]1 each use|[gray](Reuseable),2,inflictself(SHIELD[;]e.timesused+1); sfx(~_shield~);,Barricade,ODD,,ORANGE,,,,,3,YES,NO,yme,,,,,,,,,,,,
Overhelm_downgraded,[shield]<timesused> shield[;] +[shield]1 each use|[gray](Reuseable),2,inflictself(SHIELD[;]e.timesused+1); sfx(~_shield~);,Barricade,REQUIRE5,,ORANGE,,,,,2,YES,NO,yme,,,,,,,,,,,,
Polar Moon Shieldspike,[shield]1 or [sword]1[;] <d6> times|+[shield]3 on odd turns[;]|+[sword]3 on even turns,2,var swords = 0; var shields = 0; if (turn%2==0) { swords+=3; } else { shields+=3; } for (i in 0...d) { if (chance(50)) { swords++; } else { shields++; } } attack(swords); inflictself(SHIELD[;]shields); sfx(~_shield~); sfxdamage(target[;]swords);,Plasma Gun,MAX5,,RED,increaserange,complicate,,,0,NO,NO,yme,,,,,,,,,,,,var swords = 0; var shields = 0; if (turn%2==0) { swords+=3; } else { shields+=3; } for (i in 0...d) { if (chance(50)) { swords++; } else { shields++; } } inflictself(SHIELD[;]shields); sfx(~_shield~);
BIG SHOT,Do [sword]<d6> damage[;]|do [sword]<d6>/2 in 2 turns|[70%][quote]Now's your chance to be a BIG SHOT![quote],2,jinx(~BIG SHOT~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d/2); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,Plasma Gun,MIN4|MIN4,,YELLOW,change_power,change_power,,,0,NO,NO,yme,,,,,,,,,,,,
BIG SHOT_upgraded,Do [sword]<d6> damage[;]|do [sword]<d6> in 2 turns|[70%][quote]Now's your chance to be a BIG SHOT![quote],2,jinx(~BIG SHOT~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,Plasma Gun,MIN4|MIN4,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,
BIG SHOT_downgraded,Do [sword]<d6> damage[;]|do [sword]<d6>/2 in 2 turns|[70%][quote]Now's your chance to be a BIG SHOT![quote],2,jinx(~BIG SHOT~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d/2); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,Plasma Gun,MAX3|MAX3,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,
[END YETMOREEPISODES],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Wrong Answer,Do [sword]1 damage[;] and|heal completely,2,attack(1); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]1);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_upgraded,Do [sword]3 damage[;] and|heal completely,2,attack(3); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]3);,,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_downgraded,Heal completely,2,attackself(-self.maxhp); target.removestatus(ALL);,,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dealmaker_downgraded,Make next mana trade free,1,inflictself(~manakeep~); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,combination:ht,1,,,,,,,,,,,
Time Edge_downgraded,Do [sword]6 damage,1,attack(6); sfxdamage(target[;]6);,,COMBINATION,,PINK,change_power,change_power,,,0,NO,NO,combination:tt,,,,,,,,,,,,
Blessed Blade_downgraded,Do [sword]6 damage,1,attack(6); sfxdamage(target[;]6);,,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,combination:hh,,,,,,,,,,,,
Poinsettia,[sword]3[comma] chance 25%: add [poison]2|(If [mana]>=3[]: +50% chance),1,attack(d); var odds = 25; if(getstatusself(MANA) >= 3 # getstatusself(~freetrades~) >= 1) odds = 75; if(getstatusself(~luck~) > 0) odds += odds * getstatusself(~luck~); if(getstatusself(~luck+~) >= 0) odds = 100; if(chance(odds)){ self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2); }attack(d); sfxdamage(target[;]d);,,MAX3,,PURPLE,increaserange,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Dream Luck,[sword]<d6>[comma] chance 25% to double|(Cost [mana]3[]: +50% chance),1,if(getstatusself(~freetrades~) > 0) { attack(d * 2); sfxdamage(target[;]d * 2); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attack(d * 2); sfxdamage(target[;]d * 2); } else { attack(d); sfxdamage(target[;]d); },,ODD,,RED,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Magic Hug,Cost [mana]<d6>[]: [sword]<double> damage,1,if(getstatusself(~freetrades~) > 0) { attack(d * 2); sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d * 2+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move(); } else if(getstatusself(MANA) >= d) { removestatusself(MANA[;]d); attack(d * 2); sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d * 2+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move(); } else { target.textparticle(~No effect!~); },,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Honey Pot,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 3 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Honey Pot_upgraded,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 4 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,witchonly,,,,,,,,,,,,
Next Tome,Get the second spellbook|Current spellbook: <var:currentspellbook>,1,sfx(~_thinghappens~); var booknum = self.getvar(~currentspellbook~); for(i in 1...7) { if(Spellbook.isempty(i)) { self.setvar(~spellbook~+booknum+~slot~+i[;]~Empty slot~); } else { self.setvar(~spellbook~+booknum+~slot~+i[;]Spellbook.spellname(i)); } } for(eq in self.equipment){ if(eq.name == e.name){ eq.animate(~flashandshake~); } } self.setvar(~currentspellbook~[;]self.getvar(~currentspellbook~) + 1); if(self.getvar(~currentspellbook~) == 4) { self.setvar(~currentspellbook~[;]1); } booknum = self.getvar(~currentspellbook~); for(q in 1...7) { if(self.getvar(~spellbook~+booknum+~slot~+q) != ~Empty slot~) { Spellbook.changespellflash(q[;]self.getvar(~spellbook~+booknum+~slot~+q)); } else { Spellbook.erase(q); } },Time Stop,NORMAL,,GRAY,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|weakenavoid|curseavoid|altpoisonavoid|shockavoid|cannotsteal,1,inflictself(~silencenextvolume~);,,if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.hasstatus(SILENCE)) { e.availablethisturn = false; e.unavailabletext = ~Unavailable~; e.unavailabledetails = [~Break silence to unlock~]; }if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },,,,,e.preventdefault = true; e.maintainfury = true;,
Manic Repeater,Do [sword]1 dmg per [mana]1 mana|(Cost [mana]1[]: repeat it),1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~); if(getstatusself(MANA) >= 1){ removestatusself(MANA[;]1); },Fury,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:666,2,,,,,,,,if(getstatusself(FURY) < 1) { if(getstatusself(MANA) >= 1) { var blankskill = new elements.Skill(~Against All Odds_old~); blankskill.script = ~self.addstatus(FURY[;]1)~; var act = new motion.actuators.SimpleActuator(null[;] 0.5[;] null); act._repeat = 1; act.onRepeat(blankskill.execute[;] [self[;]target]); act.move(); } },,,
Manic Repeater_downgraded,Do [sword]1 damage|per each [mana]1 mana,1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~);,Fury,COMBINATION,,RED,twothirdcountdown,change_power,,,0,NO,NO,combination:666,,,,,,,,,,,,
Dragon Dust,Do [sword]4 damage[comma] activate|another Dragon Dust,1,attack(4); sfxdamage(target[;]4); var selfequipment = []; for (eq in self.equipment){ if(eq.name == e.name && eq.ready){ selfequipment.push(eq); } } if(selfequipment.length > 0){ sfx(~jester_snap~[;]~~[;]0.1); var eq = rand(selfequipment) ; eq.animate(~snap~); delay(eq.remainingcountdown * 0.3); var mydice = new elements.Dice(); mydice.basevalue = d; eq.assigndice(mydice); mydice.assigned = eq; self.dicepool.push(mydice); eq.doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] eq.assigneddice[;] 0.2); },,ODD,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Dragon Dust_upgraded,Do [sword]4[comma] reroll dice[comma] activate|another Dragon Dust,1,attack(4); sfxdamage(target[;]4); givedice(); var selfequipment = []; for (eq in self.equipment){ if(eq.name == e.name && eq.ready){ selfequipment.push(eq); } } if(selfequipment.length > 0){ sfx(~jester_snap~[;]~~[;]0.1); var eq = rand(selfequipment) ; eq.animate(~snap~); delay(eq.remainingcountdown * 0.3); var mydice = new elements.Dice(); mydice.basevalue = d; eq.assigndice(mydice); mydice.assigned = eq; self.dicepool.push(mydice); eq.doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] eq.assigneddice[;] 0.2); },,ODD,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dragon Dust_downgraded,Do [sword]4 damage,1,attack(4); sfxdamage(target[;]4);,,ODD,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Glass Dust,Do [sword]5 damage|(Start turn: if prepared 3 at|once[;] +1 dice this fight),1,attack(5); sfxdamage(target[;]5);,Infinity Mirror,EVEN,,PINK,change_power,complicate,,,0,NO,NO,,1,,,self.setvar(~mirrordust~[;]self.getvar(~mirrordust~) + 1); if(self.getvar(~mirrordust~) == 3){ self.extradice++; sfx(~magic_gaindice~); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } },if(self.getvar(~mirrordust~) == 3){ self.setvar(~mirrordust~[;]0); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } }self.setvar(~mirrordust~[;]0);,,,,,,,
Glass Dust_upgraded,Do [sword]7 damage|(Start turn: if prepared 3 at|once[;] +1 dice this fight),1,attack(7); sfxdamage(target[;]7);,Infinity Mirror,EVEN,,PINK,,,,,0,NO,NO,,,,,self.setvar(~mirrordust~[;]self.getvar(~mirrordust~) + 1); if(self.getvar(~mirrordust~) == 3){ self.extradice++; sfx(~magic_gaindice~); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } },if(self.getvar(~mirrordust~) == 3){ self.setvar(~mirrordust~[;]0); for(eq in self.equipment){ if(eq.name == e.name && eq.ready && !eq.weakened){ eq.animate(~flashandshake~); } } }self.setvar(~mirrordust~[;]0);,,,,,,,
Ashtray,Do [sword]5 damage|[85%](Cost [mana]1[]: cast a random spell),1,attack(5); sfxdamage(target[;]5); sfx(~_mana~[;]~~[;]0.1); if(self.hasstatus(~freetrades~)){ var eq = self.getskillcard(); var mydice = new elements.Dice(); var valuearray = []; for(i in 1...7){ if(!Spellbook.isempty(i)){ valuearray.push(i); } } mydice.basevalue = rand(valuearray); mydice.x = -200; mydice.y = -200; mydice.blind = true; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); } else if(self.hasstatus(MANA)){ var eq = self.getskillcard(); var mydice = new elements.Dice(); var valuearray = []; for(i in 1...7){ if(!Spellbook.isempty(i)){ valuearray.push(i); } } mydice.basevalue = rand(valuearray); mydice.x = -200; mydice.y = -200; mydice.blind = true; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); removestatusself(MANA[;]1); },,ODD,,PINK,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Recurring Winds,Activate all spells that was|used when this is prepared,1,sfx(~_fury~); if (!simulation) { var width = []; for (i in 0...(3840 - 792)) { width.push(i); } var long = 0.2; var rewinditem = self.getvar(~recurringlists~); for(i in 0...rewinditem.length) { if(rewinditem[i].name != e.name && rewinditem[i].equippedby == self) { rewinditem[i].x = rand(width); rewinditem[i].y = (self.isplayer ? (e.castdirection == 1 ? -e.height : 2160) : (e.castdirection == 1 ? 2160 : -e.height)); rewinditem[i].show = true; var diceywind = []; if(rewinditem[i].slots.length > 0 && rewinditem[i].slots.indexOf(~COUNTDOWN~) != 0) { for(q in 0...rewinditem[i].assigneddice.length) { diceywind.push(rewinditem[i].assigneddice[q].basevalue); }rewinditem[i].removedice(); if(rewinditem[i].slots.length > 0) { for(aw in 0...rewinditem[i].slots.length) { var mydice = new elements.Dice(); mydice.basevalue = diceywind[aw]; rewinditem[i].assigndice(mydice); trace(~1!~); mydice.assigned = rewinditem[i]; self.dicepool.push(mydice); mydice.canbedragged = false; } } } else { rewinditem[i].remainingcountdown = 0; }rewinditem[i].doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] rewinditem[i].assigneddice[;] long); long += 0.2; trace(rewinditem[i].castdirection); } } },Fury,COUNTDOWN,25,PURPLE,twothirdcountdown,noeffect,,,0,YES,NO,,2,,,,,,,,,,,
Blessed Bowl,Gain a random blessing|[90%](If [mana]>=6[]: get a better blessing),1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatuslist = [SHIELD[;]THORNS[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]; }else { randomstatuslist = [SHIELD[;]THORNS[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]; } if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { randomstatuslist.remove(SHIELD); randomstatuslist.remove(REEQUIPNEXT); randomstatuslist.remove(THORNS); randomstatuslist.remove(~manakeep~); } var randomstatus = rand(randomstatuslist); var a = 1; if (randomstatus == THORNS) a = 3; if (randomstatus == SHIELD) a = 4; if (randomstatus == MANA) a = 3; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; if(randomstatus == ~doublecast~) randomstatus = ~MANA~; if(randomstatus == ~upgradecast~) randomstatus = ~MANA~; if(randomstatus == ~manakeep~) randomstatus = ~MANA~; if(randomstatus == ~manaboost~) randomstatus = ~MANA~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,witchonly|combination:23,1,,,,,,,,,,,
Little Pot,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Power Up,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Little Pot_upgraded,The next time you spend [mana][comma]|it will increase your mana,1,inflictself(~manakeep+~); inflictself(MANA[;]2); sfx(~_mana~);,Power Up,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Little Pot_downgraded,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Power Up,MIN4,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Double Cast,Cast a spell from|slot <d6> twice,1,if(!Spellbook.isempty(d)){ inflictself(~doublecast~); sfx(~_mana~[;]~~[;]0.1); var eq = self.getskillcard(); var mydice = new elements.Dice(); mydice.basevalue = d; mydice.x = -200; mydice.y = -200; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); },,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Double Cast_upgraded,Cast a spell from|slot <d6> thrice,1,if(!Spellbook.isempty(d)){ inflictself(~doublecast~[;]2); sfx(~_mana~[;]~~[;]0.1); var eq = self.getskillcard(); var mydice = new elements.Dice(); mydice.basevalue = d; mydice.x = -200; mydice.y = -200; eq.assigndice(mydice); eq.animate(~flashandshake~); mydice.assigned = eq; self.dicepool.push(mydice); },,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,witchonly,,,,,,,,,,,,
Double Cast_downgraded,Place two copies of the|next spell you cast,1,inflictself(~doublecast~); sfx(~_mana~[;]~~[;]0.1);,,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,witchonly,,,,,,,,,,,,
Hotplate,Gain [mana]1 extra mana when|you gain mana this turn,1,inflictself(~manaboost~); sfx(~_mana~[;]~~[;]0.1);,,REQUIRE1,,RED,simplify,doublerequirements,,,0,YES,NO,,1,,,,,,,,,,,
Confetti,[90%]Gain [recycle]Re-equip[][comma]|[90%][potion]Keep_Mana[][comma] [confuse]Double_Cast,1,inflictself(REEQUIPNEXT); inflictself(~manakeep~); inflictself(~doublecast~); sfx(~_magic~[;]~~[;]0.1);,,COUNTDOWN,10,PURPLE,halfcountdown,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Confetti_downgraded,[90%]Gain [recycle]Re-equip[][comma]|[90%][potion]Keep_Mana[][comma] or [confuse]Double_Cast,1,var randstatus = rand([REEQUIPNEXT[;]~manakeep~[;]~doublecast~]); inflictself(randstatus); sfx(~_magic~[;]~~[;]0.1);,,COUNTDOWN,10,PURPLE,halfcountdown,change_power,,,0,YES,NO,,,,,,,,,,,,,
Luck Omen,Do [sword]5 damage. If this is|the final blow[;] stash unused|[mana] mana for next fight,1,attack(5); sfxdamage(target[;]5); if(target.hp <= 0){ self.setvar(~unusedmana~[;]getstatusself(MANA)); removestatusself(MANA[;]getstatusself(MANA)); },Regenerate,EVEN,,GREEN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Winter Wings,Cost [mana]5: gain [dodge]2 dodge|(Start of turn: gain [mana]1),1,if(getstatusself(MANA) >= 5) { removestatusself(MANA[;]5); inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~No effect!~); },Quick Thinking,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,,2,,,,inflictself(MANA); sfx(~_mana~); e.animate(~flashandshake~);,,,,,,,
Winter Wings_upgraded,Cost [mana]4: gain [dodge]2 dodge|(Start of turn: gain [mana]1),1,if(getstatusself(MANA) >= 4) { removestatusself(MANA[;]4); inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~No effect!~); },Quick Thinking,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,inflictself(MANA); sfx(~_mana~); e.animate(~flashandshake~);,,,,,,,
Sultry Winds,Do [sword]5 damage for each|[mana]3 mana you have,1,var mana = getstatusself(MANA); var potassum = 0; var totaldamage = 0; for(i in 0 ... mana){ potassum++; if(potassum == 3){ potassum -= 3; totaldamage += 5; } } attack(totaldamage); sfxdamage(target[;]totaldamage);,,ODD,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Sultry Winds_upgraded,Do [sword]6 damage for each|[mana]3 mana you have,1,var mana = getstatusself(MANA); var potassum = 0; var totaldamage = 0; for(i in 0 ... mana){ potassum++; if(potassum == 3){ potassum -= 3; totaldamage += 6; } } attack(totaldamage); sfxdamage(target[;]totaldamage);,,ODD,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sultry Winds_downgraded,Do [sword]3 damage for each|[mana]3 mana you have,1,var mana = getstatusself(MANA); var potassum = 0; var totaldamage = 0; for(i in 0 ... mana){ potassum++; if(potassum == 3){ potassum -= 3; totaldamage += 3; } } attack(totaldamage); sfxdamage(target[;]totaldamage);,,ODD,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dramatic Stab,If [mana]>=24: Take final [heart]5 hp|from vampires,1,if(target.hp <= 5 && getstatus(VAMPIRE) > 0 && getstatusself(MANA) >= 24) { removestatus(VAMPIRE[;] ALL); attack(5); } else{ attack(5); target.textparticle(~No effect!~); },Heat Ray,NORMAL,,PINK,change_power,noeffect,vampire,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Dramatic Stab_upgraded,If [mana]>=18: Take final [heart]5 hp|from vampires,1,if(target.hp <= 5 && getstatus(VAMPIRE) > 0 && getstatusself(MANA) >= 18) { removestatus(VAMPIRE[;] ALL); attack(5); } else{ attack(5); target.textparticle(~No effect!~); },Heat Ray,NORMAL,,PINK,change_power,noeffect,vampire,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chilly Pepper,if [mana] is even[;] [ice]6 dmg + [ice]1|(get [mana]1 on countdown),1,if(getstatusself(MANA) % 2 == 0 # getstatusself(~freetrades~) >= 1){ attack(6[;]ICE); inflict(ICE); sfxdamage(target[;]6); sfx(~_ice~[;]~~[;]0.2); },Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Chilly Pepper_upgraded,if [mana] is even[;] [ice]8 dmg + [ice]1|(get [mana]1 on countdown),1,if(getstatusself(MANA) % 2 == 0 # getstatusself(~freetrades~) >= 1){ attack(8[;]ICE); inflict(ICE); sfxdamage(target[;]8); sfx(~_ice~[;]~~[;]0.2); },Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.2); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Chilly Pepper_downgraded,if [mana] is even[;] inflict [ice]1|(get [mana]1 on countdown),1,if(getstatusself(MANA) % 2 == 0 # getstatusself(~freetrades~) >= 1){ inflict(ICE); sfx(~_ice~[;]~~[;]0.2); },Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflictself(MANA); sfx(~_mana~[;]~~[;]0.1); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Enchanted Armor,Add [shield]<d6> shield|(If [mana]>=3[]: reduce by [reduce]1[]),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 3) { inflictself(REDUCE[;]1); } inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,,MAX3,,ORANGE,add1,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Candy Steal,Recover [heal]<d6> health|(Cost [mana]2[]: return dice),1,if(getstatusself(~freetrades~) > 0) { givedice(d); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); givedice(d); } attackself(-d); sfx(~_heal~);,,MAX3,,GREEN,change_power,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Candy Steal_upgraded,Recover [heal]<d6> health|(Cost [mana]2[]: return dice)|[gray](Reuseable),1,if(getstatusself(~freetrades~) > 0) { givedice(d); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); givedice(d); } attackself(-d); sfx(~_heal~);,,MAX3,,GREEN,change_power,decreaserange,,,2,YES,NO,,,,,,,,,,,,,
Wide Divide,Split the dice in two|(Cost [mana]2[]: in 3 instead),1,if(getstatusself(~freetrades~) >= 1) { givedice(split(d[;] 3)[;] ~splitdice~); } else if(getstatusself(MANA) >= 2) { givedice(split(d[;] 3)[;] ~splitdice~); removestatusself(MANA[;]2); } else { givedice(split(d[;] 2)[;] ~splitdice~); },,MIN4,,GREEN,simplify,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Winter Eclipse,Do [sword]<d6> damage|(Cost [mana]4[]: instead[;] multiply|dice and do as damage),1,if(getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); } else if(getstatusself(MANA) >= 4 # getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); removestatusself(MANA[;]4); } else { attack(d); sfxdamage(d); },Reversal,EVEN|EVEN,,ORANGE,simplify,change_power,,,0,NO,NO,,2,,,,,,,,,,,
Winter Eclipse_downgraded,Do [sword]<d6> damage|(Cost [mana]4[]: instead[;] multiply|dice and do as damage),1,if(getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); } else if(getstatusself(MANA) >= 4 # getstatusself(~freetrades~) >= 1) { attack(actualdice[0].basevalue * actualdice[1].basevalue); sfxdamage(actualdice[0].basevalue * actualdice[1].basevalue); removestatusself(MANA[;]4); } else { attack(d); sfxdamage(d); },Reversal,REQUIRE4|REQUIRE4,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cold Burn,Do [sword]6 damage|(Cost [mana]2: inflict [ice]1 + [fire]1[]),1,if(getstatusself(~freetrades~) > 0) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); removestatusself(MANA[;]2); } attack(6); sfxdamage(target[;]6);,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:th,1,,,,,,,,,,,
Christmas Star,[sword]<double> dmg[;] disable current|spellbook for [nospellbook]3 turns,1,attack(d * 2); sfxdamage(target[;]d * 2); inflictself(~bookban~+self.getvar(~currentspellbook~)[;]2);,,MAX5,,PURPLE,simplify,complicate,,,0,NO,NO,witchonly,1,,,,,,,,,,,
Vampire Blade,Do [sword]4. If this defeats without|excess[;] heal completely,1,attack(4); sfxdamage(target[;]4); if(target.hp == 0){ attacself(-self.maxhp); sfx(~_heal~[;]~~[;]0.2); },Regenerate,COUNTDOWN,30,GREEN,twothirdcountdown,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Vampire Blade_downgraded,Do [sword]1. If this defeats without|excess[;] heal completely,1,attack(1); sfxdamage(target[;]1); if(target.hp == 0){ attacself(-self.maxhp); sfx(~_heal~[;]~~[;]0.2); },Regenerate,COUNTDOWN,30,GREEN,twothirdcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Raisin,Heal [heal]2. If above max hp[;]|convert excess to mana,1,if(self.maxhp - self.hp == 0) { inflictself(MANA[;] 2); sfx(~_mana~); } else if(self.maxhp - self.hp == 1) { inflictself(MANA[;] 1); attackself(-1); sfx(~_mana~); sfx(~_heal~); } else { attackself(-2); sfx(~_heal~); },Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Raisin_upgraded,Heal [heal]3. If above max hp[;]|convert excess to mana,1,if(self.maxhp - self.hp == 0) { inflictself(MANA[;] 3); sfx(~_mana~); } else if(self.maxhp - self.hp == 1) { inflictself(MANA[;] 2); attackself(-1); sfx(~_mana~); sfx(~_heal~); } else if(self.maxhp - self.hp == 2) { inflictself(MANA[;] 1); attackself(-2); sfx(~_mana~); sfx(~_heal~); } else { attackself(-3); sfx(~_heal~); },Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Raisin_downgraded,Heal [heal]1 health,1,attackself(-1);,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Wicked Contract,All mana-using bonuses|are free for this turn,1,inflictself(~freetrades~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:tttt,1,,,,,,,,,,,
Wicked Contract_downgraded,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:tttt,,,,,,,,,,,,
Wicked Contract_weakened,The next time you spend [mana][comma]|you will do it for free,1,inflictself(~manakeep~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:tttt,,,,,,,,,,,,
Overwinter,Upgrade the next|spell you cast,1,inflictself(~upgradecast~); sfx(~_mana~);,Regenerate,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,witchonly|fd,1,,,,,,,,,,,
Echo Sword,Do [weaken]<d6> dmg[;] +[weaken]2 weaken|([weaken]Weaken[] the first spell|you cast on each turn),1,attack(d[;]WEAKEN); inflict(WEAKEN[;] 2); sfx(~_metals~); sfx(~_weaken~[;]~~[;]0.2); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,MAX5|MAX5,,ORANGE,increaserange,complicate,,,0,NO,NO,witchonly,1,,,,e.animate(~flashandshake~); inflictself(~weakencast~[;] 1); sfx(~_weaken~); self.symbolparticle(WEAKEN);,,,,,,,
Buzzing Sword,Do [shock]<d6> dmg[;] +[shock]2 shock|([shock]Shock[] the first spell|you cast on each turn),1,attack(d[;]SHOCK); inflict(SHOCK[;] 2); sfx(~_metals~); sfx(~_shock~[;]~~[;]0.2); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,MAX5|MAX5,,YELLOW,increaserange,complicate,,,0,NO,NO,witchonly,1,,,,e.animate(~flashandshake~); inflictself(~shockcast~[;] 1); sfx(~_shock~); self.symbolparticle(SHOCK);,,,,,,,
Five Leaf Clover,Double success odds|(If [mana]>=5: odds are 100%),1,if(getstatusself(MANA) >= 5 # getstatusself(~freetrades~) >= 1) { inflictself(~luck+~); } else { inflictself(~luck~); } sfx(~_mana~[;]~~[;]0.2);,,ODD,,GREEN,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Five Leaf Clover_upgraded,Double success odds|(If [mana]>=3: odds are 100%),1,if(getstatusself(MANA) >= 3 # getstatusself(~freetrades~) >= 1) { inflictself(~luck+~); } else { inflictself(~luck~); } sfx(~_mana~[;]~~[;]0.2);,,ODD,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Hellebore,Do [sword]<d6> damage|33% chance to get [mana]3,1,var odds = 33; if(getstatusself(~luck~) > 0){ odds += 33 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(MANA[;]3); sfx(~_mana~[;]~~[;]0.2); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Hellebore_upgraded,Do [sword]<d6> damage|75% chance to get [mana]3,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds += 75 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(MANA[;]3); sfx(~_mana~[;]~~[;]0.2); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Hellebore_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Hippeastrum,In [jinx]6 turns[comma] do [fire]20 dmg|(Cost [mana]2: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0) { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]4[;]20); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]4[;]20); } else { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); } sfx(~_mana~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,2,,,,,,,,,,,
Hippeastrum_upgraded,In [jinx]6 turns[comma] do [fire]20 dmg|(Cost [mana]3: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0) { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]3[;]20); } else if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]3[;]20); } else { jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); } sfx(~_mana~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Hippeastrum_downgraded,In [jinx]6 turns[comma]|do [fire]20 damage,1,jinx(e.name+e.namemodifier[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%[;] FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~[;]\~\~[;]0.2);~[;]target[;]self[;]6[;]20); sfx(~_mana~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Nimble Hands,Borrow enemy equipment[;]|permanently if not defeated,2,sfx(~useitem~); if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); self.setvar(~nimblehandsstolencard~[;]randomequipment); inflictself(~nimblehandsstatus~); giveequipment(randomequipment.name + randomequipment.namemodifier[;] false[;] true[;] e); } } } else { bonus(1000 + (self.dicepool.length * 500)); delay(0.2); },,ODD,,GREEN,simplify,complicate,,,0,NO,YES,cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Unwanted Present,Confuse enemy,1,inflict(CONFUSE); sfx(~_blind~[;]~~[;]0.2);,,REQUIRE1,,ORANGE,simplify,doublerequirements,,,0,NO,NO,,1,,,,,,,,,,,
Escape Plan,Flee immediately|(Shock [shock]1 on countdown),2,flee(); bonus(1000); sfx(~flee~);,Jetpack,COUNTDOWN,35,YELLOW,threequartercountdown,change_power,,,0,YES,NO,,,,,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,if(e.dicehistory.length > e.getvar(~lastdice~)) { inflict(SHOCK); sfx(~_shock~); e.animate(~flashandshake~); } var num = e.dicehistory.length; e.setvar(~lastdice~[;]num);,e.setvar(~lastdice~[;]0);,,,
Heater,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_upgraded,Weaken all equipment|that are cyan,1,inflict(~heater+~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_downgraded,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,REQUIRE3|REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Escape Plan_downgraded,Flee immediately,2,flee(); bonus(1000); sfx(~_thinghappens~);,Jetpack,COUNTDOWN,35,YELLOW,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Bright Flash,Make enemy weak to fire|[gray](once per battle),2,inflict(~fireweakness~); sfx(~_curse~[;]~~[;]0.2);,Hellfire,EVEN,,RED,simplify,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Sparkler,Burns [fire]1 dice[comma]|flips random dice,1,inflict(FIRE); sfx(~_fire~[;]~~[;]0.2); if(!simulation){ var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(7 - availdice[0].basevalue[;] self.screenposition()); } } else { delay(0.5); },Hellfire,EVEN,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Light Strike,Do [shock]<d6> damage[comma]|inflict [shock]2 shock,2,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Light Strike_upgraded,Do [shock]<d6> damage[comma]|inflict [shock]3 shock,2,attack(d[;]SHOCK); inflict(SHOCK[;]3); sfxdamage(target[;]d); sfx(~_shock~);,,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Light Strike_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Chrysanthemum,Gain [mana]1 mana per|each unused dice,1,var temp = 0; for(d in self.dicepool) { if(d.available()) temp++; } inflictself(MANA[;]temp); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,PINK,change_power,change_power,,,0,YES,NO,combination:777,,,,,,,,,,,,
Chrysanthemum_upgraded,Gain [mana]1 mana per|each unused dice,1,var temp = 0; for(d in self.dicepool) { if(d.available()) temp++; } inflictself(MANA[;]temp); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,PINK,change_power,change_power,,,0,YES,NO,combination:77,,,,,,,,,,,,
Chrysanthemum_downgraded,Gain [mana]1 mana per|each unused even dice,1,var temp = 0; for(d in self.dicepool) { if(d.available() && d % 2 == 0) temp++; } inflictself(MANA[;]temp); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,PINK,change_power,change_power,,,0,YES,NO,combination:777,,,,,,,,,,,,
Cold Burn_upgraded,Do [sword]6 damage|(Cost [mana]2: inflict [ice]1 + [fire]1[]),1,if(getstatusself(~freetrades~) > 0) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_ice~[;]~~[;]0.2); sfx(~_fire~[;]~~[;]0.2); removestatusself(MANA[;]2); } attack(6); sfxdamage(target[;]6);,,EVEN,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cold Burn_downgraded,Do [sword]6 damage,1,attack(6); sfxdamage(target[;]6);,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:th,,,,,,,,,,,,
Blessed Bowl_upgraded,Gain a random blessing|[90%](If [mana]>=4[]: get a better blessing),1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatuslist = [SHIELD[;]THORNS[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); }else { randomstatuslist = [SHIELD[;]THORNS[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); } if(getstatusself(MANA) >= 3 # getstatusself(~freetrades~) >= 1) { randomstatuslist.remove(SHIELD); randomstatuslist.remove(REEQUIPNEXT); randomstatuslist.remove(THORNS); randomstatuslist.remove(~manakeep~); } var randomstatus = rand(randomstatuslist); var a = 1; if (randomstatus == THORNS) a = 3; if (randomstatus == SHIELD) a = 4; if (randomstatus == MANA) a = 3; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; if(randomstatus == ~doublecast~) randomstatus = ~MANA~; if(randomstatus == ~upgradecast~) randomstatus = ~MANA~; if(randomstatus == ~manakeep~) randomstatus = ~MANA~; if(randomstatus == ~manaboost~) randomstatus = ~MANA~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,witchonly|combination:23,,,,,,,,,,,,
Blessed Bowl_downgraded,Gain a random blessing|[90%](If [mana]>=12[]: get a better blessing),1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatuslist = [SHIELD[;]THORNS[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); }else { randomstatuslist = [SHIELD[;]THORNS[;]REDUCE[;]REEQUIPNEXT[;]DODGE[;]~doublecast~[;]~manakeep~[;]~manaboost~[;]~upgradecast~[;]MANA]); } if(getstatusself(MANA) >= 12 # getstatusself(~freetrades~) >= 1) { randomstatuslist.remove(SHIELD); randomstatuslist.remove(REEQUIPNEXT); randomstatuslist.remove(THORNS); randomstatuslist.remove(~manakeep~); } var randomstatus = rand(randomstatuslist); var a = 1; if (randomstatus == THORNS) a = 3; if (randomstatus == SHIELD) a = 4; if (randomstatus == MANA) a = 3; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; if(randomstatus == ~doublecast~) randomstatus = ~MANA~; if(randomstatus == ~upgradecast~) randomstatus = ~MANA~; if(randomstatus == ~manakeep~) randomstatus = ~MANA~; if(randomstatus == ~manaboost~) randomstatus = ~MANA~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,witchonly|combination:23,,,,,,,,,,,,
Manic Repeater_upgraded,Do [sword]1 dmg per [mana]1 mana|(Cost [mana]1[]: repeat it),1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~); if(getstatusself(MANA) >= 1){ removestatusself(MANA[;]1); },Fury,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:777,2,,,,,,,,if(getstatusself(FURY) < 1) { if(getstatusself(MANA) >= 1) { var blankskill = new elements.Skill(~Against All Odds_old~); blankskill.script = ~self.addstatus(FURY[;]1)~; var act = new motion.actuators.SimpleActuator(null[;] 0.5[;] null); act._repeat = 1; act.onRepeat(blankskill.execute[;] [self[;]target]); act.move(); } },,,
Manic Repeater_weakened,Do [sword]1 damage|per each [mana]1 mana,1,attack(getstatusself(MANA)); sfx(~_magic~[;]~~[;]0.1); sfx(~_whooshweapons~);,Fury,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:777,,,,,,,,,,,,
Wicked Contract_upgraded,All mana-using bonuses|are free for this turn,1,inflictself(~freetrades~); sfx(~_mana~);,Regenerate,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:ttt,,,,,,,,,,,,
Staff Hilt,Do [sword]7 damage|(Cost [mana]3[]: Do [fire]10 instead),1,if(getstatusself(~freetrades~) > 0) { attack(10[;]FIRE); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 3) { attack(10[;]FIRE); removestatusself(MANA[;]3); sfx(~_fire~[;]~~[;]0.2); } else { attack(7); }  sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]7)~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:16,1,,,,,,,,,,,
Staff Hilt_upgraded,Do [sword]7 damage|[85%](Cost [mana]3[]: [fire]10 + [fire]Burn instead),1,if(getstatusself(~freetrades~) > 0) { attack(10[;]FIRE); sfx(~_fire~[;]~~[;]0.2); inflict(FIRE); } else if(getstatusself(MANA) >= 3) { attack(10[;]FIRE); removestatusself(MANA[;]3); sfx(~_fire~[;]~~[;]0.2); inflict(FIRE); } else { attack(7); }  sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]7)~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:16,,,,,,,,,,,,
Staff Hilt_downgraded,Do [sword]7 damage|(Cost [mana]3[]: Do [fire]7 instead),1,if(getstatusself(~freetrades~) > 0) { attack(7[;]FIRE); sfx(~_fire~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 3) { attack(7[;]FIRE); removestatusself(MANA[;]3); sfx(~_fire~[;]~~[;]0.2); } else { attack(7); }  sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]7)~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:16,,,,,,,,,,,,
Spiked Coffin,Add [shield]<d6> shield|(Cost [mana]2[]: Do [sword]<double> dmg),1,if(getstatusself(~freetrades~) > 0) { attack(d * 2); sfxdamage(target[;]d * 2); } else if(getstatusself(MANA) >= 2) { attack(d * 2); sfxdamage(target[;]d * 2); removestatusself(MANA[;]2); } sfx(~_shield~[;]~~[;]0.2); inflictself(SHIELD[;]d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 2 && getstatusself(~freetrades~) > 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Spiked Coffin_upgraded,Add [shield]<d6> shield|(Cost [mana]2[]: Do [sword]<triple> dmg),1,if(getstatusself(~freetrades~) > 0) { attack(d * 3); sfxdamage(target[;]d * 3); } else if(getstatusself(MANA) >= 2) { attack(d * 3); sfxdamage(target[;]d * 3); removestatusself(MANA[;]2); } sfx(~_shield~[;]~~[;]0.2); inflictself(SHIELD[;]d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 2 && getstatusself(~freetrades~) > 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Spiked Coffin_downgraded,Add [shield]<d6> shield|(Cost [mana]2[]: Do [sword]<d6> dmg),1,if(getstatusself(~freetrades~) > 0) { attack(d); sfxdamage(target[;]d); } else if(getstatusself(MANA) >= 2) { attack(d); sfxdamage(target[;]d); removestatusself(MANA[;]2); } sfx(~_shield~[;]~~[;]0.2); inflictself(SHIELD[;]d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 2 && getstatusself(~freetrades~) > 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Sharp Cauldron,Gain [mana]2[comma] roll two dice|[gray](Reuseable),1,inflictself(MANA[;]2); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,ORANGE,change_power,change_power,,,-1,YES,NO,combination:11,1,,,,,,,,,,,
Sharp Cauldron_upgraded,Gain [mana]1[comma] roll new dice|[gray](Reuseable),1,inflictself(MANA[;]1); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE1,,ORANGE,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Sharp Cauldron_downgraded,Gain [mana]2 mana|[gray](Reuseable),1,inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,ORANGE,change_power,change_power,,,-1,YES,NO,combination:11,,,,,,,,,,,,
Byejinx,Jinx countdowns -[jinx]1|(Cost [mana]3[]: -[jinx]1 extra),1,if(getstatusself(~freetrades~) > 0) { boostjinxcountdowns(self[;] 2); boostjinxcountdowns(target[;] 2); } else if(getstatusself(MANA) >= 3) { boostjinxcountdowns(self[;] 2); boostjinxcountdowns(target[;] 2); removestatusself(MANA[;]3); } else { boostjinxcountdowns(self[;] 1); boostjinxcountdowns(target[;] 1); } sfx(~_mana~);,,ODD,,PINK,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Byejinx_upgraded,Jinx countdowns -[jinx]1|(Cost [mana]3[]: -[jinx]2 extra),1,if(getstatusself(~freetrades~) > 0) { boostjinxcountdowns(self[;] 3); boostjinxcountdowns(target[;] 3); } else if(getstatusself(MANA) >= 3) { boostjinxcountdowns(self[;] 3); boostjinxcountdowns(target[;] 3); removestatusself(MANA[;]3); } else { boostjinxcountdowns(self[;] 1); boostjinxcountdowns(target[;] 1); } sfx(~_mana~);,,ODD,,PINK,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Magic Phone,Do [sword]<d6> damage|[90%](Cost [mana]2[]: repeat in 2 turns),1,if(getstatusself(~freetrades~) > 0) { jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);sfx(\~_magic\~);~[;]target[;]self[;]2[;]d); sfx(~_mana~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);sfx(\~_magic\~);~[;]target[;]self[;]2[;]d); sfx(~_mana~[;]~~[;]0.2); removestatusself(MANA[;]2); } attack(d); sfx(~_magic~); var s = new elements.Skill(~Against All Odds_old~); s.script=~sfxdamage(target[;]~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.1[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,,NORMAL,,YELLOW,add2,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Fear Ocean,Do [sword]<d6> damage|(If [mana]>=4[]: charge limit by 3),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 4) { self.limitvalue += 3; if (self.limitvalue > self.limitmax) self.limitvalue = self.limitmax; sfx(~_heal~[;]~~[;]0.2); } attack(d); sfxdamage(target[;]d);,Regenerate,MAX4,,GRAY,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Moonflower,In [jinx]<d6> turns[comma] do [sword]<triple>|(If [mana]>=5[]: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 5) { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d - 2[;]d * 3); } else { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;]d * 3); } sfx(~_thinghappens~);,,MIN3,,PINK,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Moonflower_upgraded,In [jinx]<d6> turns[comma] do [sword]<quadruple>|(If [mana]>=5[]: in [jinx]2 earlier),1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 5) { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d - 2[;]d * 4); } else { jinx(e.name+e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;]d * 4); } sfx(~_thinghappens~);,,MIN3,,PINK,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Sugar Donut,Consume [mana]<d6> mana to|gain [mana]<triple> in [jinx]<d6> turns,1,if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= d) { if(getstatusself(~freetrades~) <= 0) removestatusself(MANA[;]d); jinx(e.name[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~[;]\~\~[;]0.1);~[;]self[;]self[;]d[;]d*3); sfx(~_thinghappens~); } else { self.textparticle(~No effect!~); },Accelerate,MAX3,,GREEN,increaserange,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Sugar Star,Every [jinx]<slotdoubles> turns[comma]|get [mana]<slotdoubles> mana,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] d[;] d); } else { jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);~[;] self[;] self[;] d[;] d); }sfx(~_thinghappens~);,Accelerate,DOUBLES|DOUBLES,,PINK,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Sugar Star_downgraded,Every [jinx]3 turns[comma]|get [mana]3 mana,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]3); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]3); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]3); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]3); jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] 3[;] 3); } else { jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);~[;] self[;] self[;] 3[;] 3); }sfx(~_thinghappens~);,Accelerate,REQUIRE3|REQUIRE3,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sugar Star_upgraded,Every [jinx]<d6> turns[comma]|get [mana]<d6> mana,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~Get [mana]%VAR% mana~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]d); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]d); jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] d[;] d); } else { jinx(e.name[;]~get [mana]%VAR% mana[comma] repeat every [jinx]%VAR% turns~[;]~Get [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%);sfx(\~_mana\~[;]\~\~[;]0.1);~[;] self[;] self[;] d[;] d); }sfx(~_thinghappens~);,Accelerate,MAX4,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Golden Clock,Do [sword]1 for each [jinx]jinx|(If [mana]>=6[]: do double),1,var jinxcount = getjinx(self) + getjinx(target); if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { attack(jinxcount * 2); sfxdamage(target[;]jinxcount * 2); } else { attack(jinxcount); sfxdamage(target[;]jinxcount); },,EVEN,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Golden Clock_upgraded,Do [sword]1 for each [jinx]jinx|(If [mana]>=6[]: do triple),1,var jinxcount = getjinx(self) + getjinx(target); if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { attack(jinxcount * 3); sfxdamage(target[;]jinxcount * 3); } else { attack(jinxcount); sfxdamage(target[;]jinxcount); },,EVEN,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Golden Clock_downgraded,[sword]1 for each [jinx]jinx on you|(If [mana]>=6[]: do double),1,var jinxcount = getjinx(self); if(getstatusself(MANA) >= 6 # getstatusself(~freetrades~) >= 1) { attack(jinxcount * 2); sfxdamage(target[;]jinxcount * 2); } else { attack(jinxcount); sfxdamage(target[;]jinxcount); },,EVEN,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blessed Blade,Do [sword]7 damage[comma]|(Cost [mana]3[]: x2 success odds),1,attack(7); sfxdamage(target[;]7); if(getstatusself(~freetrades~) > 0) { inflictself(~luck~); sfx(~_mana~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 3) { inflictself(~luck~); sfx(~_mana~[;]~~[;]0.2); removestatusself(MANA[;]3); } else { inflictself(~luck~); sfx(~_mana~[;]~~[;]0.2); },,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,combination:hh,1,,,,,,,,,,,
Blessed Blade_upgraded,Do [sword]7 damage[comma]|(Cost [mana]2[]: x2 success odds),1,attack(7); sfxdamage(target[;]7); if(getstatusself(~freetrades~) > 0) { inflictself(~luck~); sfx(~_mana~[;]~~[;]0.2); } else if(getstatusself(MANA) >= 2) { inflictself(~luck~); sfx(~_mana~[;]~~[;]0.2); removestatusself(MANA[;]2); } else { inflictself(~luck~); sfx(~_mana~[;]~~[;]0.2); },,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,combinatioh:hh,,,,,,,,,,,,
Dealmaker,Deal [sword]5 damage[comma]|make next mana trade free,1,attack(5); sfxdamage(target[;]5); inflictself(~manakeep~); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,combination:ht,1,,,,,,,,,,,
Dealmaker_upgraded,Deal [sword]7 damage[comma]|make next mana trade free,1,attack(7); sfxdamage(target[;]d); inflictself(~manakeep~); sfx(~_mana~[;]~~[;]0.2);,,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,combination:ht,,,,,,,,,,,,
Time Edge,Do [sword]7 damage[comma]|(If [mana]>=5[]: -[jinx]1 to all jinxes),1,attack(7); sfxdamage(target[;]7); if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 5) { boostjinxcountdowns(target[;]1); boostjinxcountdowns(self[;]1); sfx(~_mana~[;]~~[;]0.2); },,COMBINATION,,PINK,change_power,change_power,,,0,NO,NO,combination:tt,1,,,,,,,,,,,
Time Edge_upgraded,Do [sword]7 damage[comma]|(If [mana]>=3[]: -[jinx]1 to all jinxes),1,attack(7); sfxdamage(target[;]7); if(getstatusself(~freetrades~) > 0 # getstatusself(MANA) >= 3) { boostjinxcountdowns(target[;]1); boostjinxcountdowns(self[;]1); sfx(~_mana~[;]~~[;]0.2); },,COMBINATION,,PINK,change_power,change_power,,,0,NO,NO,combination:tt,,,,,,,,,,,,
Hall of Glass,Every turn[comma] +1 dice this|fight and curse yourself,1,if(!simulation){ var endlessjinxnumber = target.getvar(~endlessjinxlist~); target.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); self.setvar(~endlessjinxlist~[;] target.getvar(~endlessjinxlist~) + 1); target.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); target.setvar(~jinxtooltip~ + endlessjinxnumber[;]~+1 dice this fight and curse yourself[comma] repeats every turn~); target.setvar(~jinxcard~ + endlessjinxnumber[;] ~+1 dice this fight and curse~); target.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); target.setvar(~jinxlastsfor~ + endlessjinxnumber[;]1); target.setvar(~jinxspecialvar~ + endlessjinxnumber[;]1); self.setvar(~jinxdisplayname~ + endlessjinxnumber[;]e.name); self.setvar(~jinxtooltip~ + endlessjinxnumber[;]~+1 dice this fight and curse yourself[comma] repeats every turn~); self.setvar(~jinxcard~ + endlessjinxnumber[;] ~+1 dice this fight and curse~); self.setvar(~jinxscript~ + endlessjinxnumber[;] ~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~); self.setvar(~jinxlastsfor~ + endlessjinxnumber[;]1); self.setvar(~jinxspecialvar~ + endlessjinxnumber[;]1); jinx(e.name[;]~+1 dice this fight and curse yourself[comma] repeats every turn~[;]~+1 dice this fight and curse~[;]~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;var endlessjinxnumber = ~+endlessjinxnumber+~;jinx(target.getvar(\~jinxdisplayname\~ + endlessjinxnumber)[;]target.getvar(\~jinxtooltip\~ + endlessjinxnumber)[;]target.getvar(\~jinxcard\~ + endlessjinxnumber)[;]target.getvar(\~jinxscript\~ + endlessjinxnumber)[;]target[;]self[;]target.getvar(\~jinxlastsfor\~ + endlessjinxnumber)[;]target.getvar(\~jinxspecialvar\~ + endlessjinxnumber));~[;] self[;] self[;] 1[;] 1); } else { jinx(e.name[;]~+1 dice this fight and curse yourself[comma] repeats every turn~[;]~+1 dice this fight and curse~[;]~inflict(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2);target.extradice++;~[;] self[;] self[;] 1[;] 1); }sfx(~_thinghappens~);,Infinity Mirror,REQUIRE6,,PURPLE,simplify,doublerequirements,,,0,YES,NO,,1,,,,,,,,,,,
Motor Oil,Repeat next action[;] errors on 2nd roll,1,inflictself(FURY); sfx(~_fury~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,YES,NO,robotonly|fd,,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 1 && e.ready) roboterror(self[;] [e]);,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 1 && e.ready) roboterror(self[;] [e]);,,,,,
Motor Oil_downgraded,Repeat next action[;] errors on 3nd roll,1,inflictself(FURY); sfx(~_fury~);,,REQUIRE6|REQUIRE6,,ORANGE,simplify,change_power,,,0,YES,NO,robotonly|fd,,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 2 && e.ready) roboterror(self[;] [e]);,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); } if(e.getvar(~rollcheck~) > 2 && e.ready) roboterror(self[;] [e]);,,,,,
Amp,Double current song,2,inflictself(~Song~[;] getstatusself(~Song~)); sfx(~_song~);,Cheat,EVEN|ODD,,GRAY,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snowball Machinegun,Do [ice]<d6> damage twice|[gray](Reuseable),2,attack(d[;] ICE); attack(d[;] ICE); sfxdamage(target[;] d); sfx(~_ice~);,Snow Catapult,MAX2,,BRIGHTCYAN,increaserange,decreaserange,,,2,NO,NO,,,,,,,,,,,,,attack(d[;] ICE); sfxdamage(target[;] d); sfx(~_ice~);
Snowball Effect,Everytime you deal ice dmg|deal +[ice]1 dmg this battle|[gray](Once Per Battle),2,inflictself(~snowball~); inflict(~snowballenemy~); sfx(~levelup~); sfx(~_ice~);,,COUNTDOWN,12,BRIGHTCYAN,halfcountdown,change_power,,,0,YES,YES,,,,,,,,,,,,,
Snowball Effect_downgraded,Everytime you deal ice dmg|deal +[ice]1 dmg this battle|[gray](Once Per Battle),2,inflictself(~snowball~); inflict(~snowballenemy~); sfx(~levelup~); sfx(~_ice~);,,COUNTDOWN,18,BRIGHTCYAN,halfcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Tazer,Do [shock]<d6> damage[;]|[shock]Shocks the enemy|[gray](Reuseable),2,attack(d[;] SHOCK); inflict(SHOCK); sfx(~_shock~); sfxdamage(target[;] d);,,MAX5,,YELLOW,change_power,complicate,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Tazer_upgraded,Do [shock]<d6> damage[;]|[shock]Shocks the enemy,2,attack(d[;] SHOCK); inflict(SHOCK); sfx(~_shock~); sfxdamage(target[;] d);,,NORMAL,,YELLOW,,,,,-1,NO,NO,,,,,,,,,,,,,
Divine Flamethrower,Do [fire]<d6> damage[;]|Burn an enemy dice|[gray](Reuseable),2,attack(d[;] FIRE); inflict(FIRE); sfx(~_fire~); sfxdamage(target[;] d);,,NORMAL|NORMAL,,RED,reducesize,complicate,,,2,NO,NO,,,,,,,,,,,,,
Divine Cap Gun,Do [sword]6 damage|[gray](Reuseable),2,attack(6); sfxdamage(target[;] 6);,,REQUIRE6,,RED,simplify,doublerequirements,,,3,NO,NO,,,,,,,,,,,,,
Divine Snap,Do [sword]8 damage|50% chance to roll all 6's |next turn,2,if(chance(50)){ inflictself(~all6~); sfx(~_ladysnap~); attack(8); sfxdamage(target[;] 8); } else { attack(8); sfxdamage(target[;] 8); },,COUNTDOWN,14,PINK,halfcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snap_downgraded,Do [sword]6 damage,2,attack(6); sfxdamage(target[;] 6);,,COUNTDOWN,20,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Divine Dagger@LL,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1); sfxdamage(target[;] e.timesused+1);,,MIN2,,RED,change_power,doublerequirements,,,-1,NO,NO,excludefromrandomlists,,,,e.timesused = 0;,,,,,,,,
Divine Dagger@LL_upgraded,[sword]<twicetimesused> dmg[;] +[sword]2 each use|[gray](Reuseable),2,attack(e.timesused+2); sfxdamage(target[;] e.timesused+2);,,MIN2,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,e.timesused = 0;,,,,,,,,
Backstab@LL,Do [sword]<equipmentuse> damage. Add [sword]2|on each item use.,2,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]); e.changeslots([oe]); e.animate(~flashandshake~); attack(self.equipmentused * 2 - 2); sfxdamage(target[;] self.equipmentused * 2 - 2);,,REQUIRE1,,,,,,,0,NO,NO,excludefromrandomlists,,,,,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]); e.changeslots([oe]); e.animate(~flashandshake~);,,,,,,,
Backstab@LL_upgraded,Do [sword]<equipmentuse> damage. Add [sword]2|on each item use.,2,attack(self.equipmentused * 2 - 2); sfxdamage(target[;] self.equipmentused * 2 - 2);,,MAX3,,,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Backstab@LL_downgraded,Do [sword]<equipmentuse> damage. Add [sword]1|on each item use.,2,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]); e.changeslots([oe]); e.animate(~flashandshake~); attack(self.equipmentused - 1);,,REQUIRE1|REQUIRE6,,,,,,,0,NO,NO,excludefromrandomlists,,,,,var oe = rand([~REQUIRE1~[;]~REQUIRE6~]); e.changeslots([oe]); e.animate(~flashandshake~);,,,,,,,
Judgement@Singers,Do [sword]<triple>[;] if target sings|take only [sword]1,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~singers~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@Singers_upgraded,Do [sword]<quadruple>[;] if target sings|take only [sword]1,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~singers~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@Singers_downgraded,Do [sword]<d6>[;] if target sings|take only [sword]1,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~singers~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@red,Do [sword]<triple>[;] red things|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~red~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@red_upgraded,Do [sword]<quadruple>[;] red things|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~red~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@red_downgraded,Do [sword]<d6>[;] red things|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~red~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@human,Do [sword]<triple>[;] humans|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~human~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@human_upgraded,Do [sword]<quadruple>[;] humans|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~human~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@human_downgraded,Do [sword]<d6>[;] humans|take only [sword]1 damage,2,var exceptions = getcolumn(loaddata(~christmasspecial/extrajudgements~)[;] ~human~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Random Judgement,Gain a random|Judgement item,2,var judge = rand([~Judgement@red~[;]~Judgement@human~[;]~Judgement@Singers~[;]~Judgement@animals~[;]~Judgement@bosses~[;]~Judgement@floating~[;]~Judgement@eyewear~[;]~Judgement@fullhp~[;]~Judgement@green~[;]~Judgement@hats~[;]~Judgement@machines~[;]~Judgement@lowhp~[;]~Judgement@limbs~[;]~Judgement@animals~[;]~Judgement@onfire~[;]~Judgement@magic~[;]~Judgement@machines~[;]~Judgement@swords~[;]~Judgement@wings~[;]~Judgement@spears~[;]~Judgement@shields~[;]~Judgement@poison~[;]~Judgement@plants~]); giveequipment([judge][;]true[;]false); sfx(~_thinghappens~);,,NORMAL,,PINK,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Christmas Spite,Deal [sword]2 damage|[gray](reuseable),2,sfxdamage(target[;]2); attack(2);,Hellfire,MIN2,,RED,change_power,complicate,,,-1,NO,NO,,1,,,,,,,,,,,
Christmas Spite_upgraded,Deal [sword]3 damage|[gray](reuseable),2,sfxdamage(target[;]3); attack(3);,Hellfire,MIN2,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Bring Down,Deal dmg equal to 20%|of enemy's current HP|[gray](reuseable),2,sfxdamage(target[;]target.hp / 5); attack(target.hp / 5);,Hellfire,MIN2,,RED,change_power,complicate,,,-1,NO,NO,,1,,,,,,,,,,,
Bring Down_upgraded,Deal dmg equal to 25%|of enemy's current HP|[gray](reuseable),2,sfxdamage(target[;]target.hp / 4); attack(target.hp / 4);,Hellfire,MIN2,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Commandments,Get a new commandment every turn,2,,,,,GRAY,,,,,0,NO,YES,skillcard,,,,runscript(~christmasspecial/commandments.hx~[;][ALL[;]e[;]~[newline](Get a new commandment[newline]every turn.)~]); inflictself(~commandment~),,,,,,,,
Commandments@status,Replaces current skillcard|(Get a new status-related|commandment and 50%|chance to inflict a|random status each turn.),2,,,,,YELLOW,,,,,0,NO,NO,skillcard|skill:Commandments@statusskill,,,,,,,,,,,,
Commandments@statusskill,Skillcard version of @status,2,,,,,YELLOW,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~status~[;]e[;]~[newline](Get a new status-related[newline]commandment and 50%[newline]chance to inflict a[newline]random status each turn.)~]); inflictself(~commandment~); if(chance(50)){ inflict(rand(loadtext(~christmasspecial/randomeffects~))); },,,,,,,,
Commandments@health,Replaces current skillcard|(Get a new health-related|commandment and 50%|chance to heal 3|health each turn.),2,,,,,GREEN,,,,,0,NO,NO,skillcard|skill:Commandments@healthskill,,,,,,,,,,,,
Commandments@healthskill,Skillcard version of @health,2,,,,,GREEN,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~health~[;]e[;]~[newline](Get a new health-related[newline]commandment and 50%[newline]to heal 3 health[newline]each turn.)~]); inflictself(~commandment~);,if(chance(50)){ attackself(-3); sfx(~_cure~); e.animate(~flashandshake~); },,,,,,,
Commandments@dmg,Replaces current skillcard|(Get a new damage-related|commandment and 30%|chance to deal 4|damage each turn.),2,,,,,RED,,,,,0,NO,NO,skillcard|skill:Commandments@dmgskill,,,,,,,,,,,,
Commandments@dmgskill,Skillcard version of @dmg,2,,,,,RED,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~damage~[;]e[;]~[newline](Get a new damage-related[newline]commandment and 30%[newline]to deal 4 damage[newline]each turn.)~]); inflictself(~commandment~);,if(chance(30)){ attack(4); sfxdamage(target[;] 4); e.animate(~flashandshake~); },,,,,,,
Commandments@dice,Replaces current skillcard|(Get a new dice-related|commandment and 20%|chance to roll a|new dice each turn.),2,,,,,PINK,,,,,0,NO,NO,skillcard|skill:Commandments@diceskill,,,,,,,,,,,,
Commandments@diceskill,Skillcard version of @dice,2,,,,,PINK,,,,,0,NO,NO,skillcard,,,,var text = runscript(~christmasspecial/commandments.hx~[;][~dice~[;]e[;]~[newline](Get a new dice-related[newline]commandment and 20%[newline]to roll a new[newline]dice each turn.)~]); inflictself(~commandment~); if(chance(20)){ self.bonusdice++; sfx(~magic_gaindice~); },,,,,,,,
The Divine Killer,Replaces current skillcard|Do [sword]25 damage|When used is replaced,2,,Catapult,COMBINATION,,RED,reducesize,noeffect,,,0,NO,NO,combination:77777|skillcard|skill:The Divine Killer@skill,,,,,,,,,,,,
The Divine Killer@skill,Replaces current skillcard|Do [sword]25 damage|When used is replaced,2,attack(25); sfxdamage(target[;] 25); self.replaceskillcard(self.getvar(~newskills~).pop()); self.getvar(~oldeqs~).remove((e+'').split('@')[0]); sfx(~_ladysnap~);,,COMBINATION,,RED,reducesize,noeffect,,,0,NO,NO,combination:77777|skillcard,,,,,,,,,,,,
The Second Chance,Replaces current skillcard|Heal to max hp gain [reduce]2|When used is replaced,2,,Catapult,COMBINATION,,GREEN,reducesize,noeffect,,,0,YES,NO,combination:77777|skillcard|skill:The Second Chance@skill,,,,,,,,,,,,
The Second Chance@skill,Replaces current skillcard|Heal to max hp gain [reduce]2|When used is replaced,2,attackself(-999); sfx(~_heal~); inflictself(REDUCE[;] 2); self.replaceskillcard(self.getvar(~newskills~).pop()); self.getvar(~oldeqs~).remove((e+'').split('@')[0]); sfx(~_ladysnap~);,,COMBINATION,,GREEN,reducesize,noeffect,,,0,YES,NO,combination:77777|skillcard,,,,,,,,,,,,
The Middle Road,Replaces current skillcard|Do [sword]10 damage|Heal [heal]10 hp|When used is replaced,2,,Catapult,COMBINATION,,GRAY,reducesize,noeffect,,,0,NO,NO,combination:7777|skillcard|skill:The Middle Road@skill,,,,,,,,,,,,
The Middle Road@skill,Replaces current skillcard|Do [sword]10 damage|Heal [heal]10 hp|When used is replaced,2,attack(10); sfxdamage(target[;] 10); attackself(-10); sfx(~_heal~); self.replaceskillcard(self.getvar(~newskills~).pop()); self.getvar(~oldeqs~).remove((e+'').split('@')[0]); sfx(~_ladysnap~);,,COMBINATION,,GRAY,reducesize,noeffect,,,0,NO,NO,combination:7777|skillcard,,,,,,,,,,,,
Lady's Combo,Do [sword]12 damage,2,attack(12); sfxdamage(target[;] 12);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:456|excludefromrandomlists,,,,,,,,,,,,
Lady's Combo_upgraded,Do [sword]12 damage,2,attack(12); sfxdamage(target[;] 12);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:777|excludefromrandomlists,,,,,,,,,,,,
Lady's Combo_downgraded,Do [sword]12 damage,2,attack(12); sfxdamage(target[;] 12);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:12366|excludefromrandomlists,,,,,,,,,,,,
Combination Lock,Do [sword]10 damage,2,attack(10); sfxdamage(target[;] 10);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:1221|excludefromrandomlists,,,,,,,,,,,,
Combination Lock_upgraded,Do [sword]15 damage,2,attack(15); sfxdamage(target[;] 15);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:1997|excludefromrandomlists,,,,,,,,,,,,
Combination Lock_downgraded,Do [sword]5 damage,2,attack(5); sfxdamage(target[;] 5);,Pea Gun,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,combination:1997|excludefromrandomlists,,,,,,,,,,,,
Slush Spell,Do [ice]5 damage|Inflict [shiver]2_Slush,1,inflict(~Slush~[;] 2); sfx(~_ice~); attack(5[;] ICE); sfxdamage(target[;] 5);,Atric Storm,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slush Spell_upgraded,Do [ice]7 damage|Inflict [shiver]2_Slush,1,inflict(~Slush~[;] 2); sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Atric Storm,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slush Spell_downgraded,Do [ice]5 damage,1,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 5);,Atric Storm,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Doom Spell,Do [sword]5 damage|Inflict [skipturn]Timely_Demise,1,attack(5); sfxdamage(target[;]5); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~);,Disorient,REQUIRE2,,BLACK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Doom Spell_upgraded,Do [sword]5 damage|Inflict [skipturn]2_Timely_Demise,1,attack(5); sfxdamage(target[;]5); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 2);,Disorient,REQUIRE2,,BLACK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Doom Spell_downgraded,Do [sword]5 damage|Inflict [skipturn]Timely_Demise,1,attack(5); sfxdamage(target[;]5); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~);,Disorient,REQUIRE2|REQUIRE2,,BLACK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Redshift Spell,Do [shock]4 damage|Shock all red items,1,attack(4[;] SHOCK); sfxdamage(target[;]4); if(simulation) { inflict(SHOCK); } if(!simulation) { var red = new elements.Equipment(~Fireball~).equipmentcol; var hasred = false; for(eq in self.equipment) { if(eq.equipmentcol == red) { hasred = true; break; } } if(hasred) inflict(~redshift~); else inflict(SHOCK); sfx(~_shock~); },Pea Gun,REQUIRE3,,RED,simplify,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Regeneration Spell,Gain [grace]4_Regeneration,1,inflictself(~regeneration~[;] 4); sfx(~_cure~);,Regenerate,REQUIRE4,,PINK,change_power,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Regeneration Spell_upgraded,Gain [grace]5_Regeneration,1,inflictself(~regeneration~[;] 5); sfx(~_cure~);,Regenerate,REQUIRE4,,PINK,change_power,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Sweet Spell,Do [sword]3 damage|Inflict [heart]3 Too Sweet,1,inflict(~Too Sweet~[;] 3); attack(3); sfxdamage(target[;]3);,Pea Gun,REQUIRE5,,RED,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Sweet Spell_upgraded,Do [sword]3 damage|Inflict [heart]5 Too Sweet,1,inflict(~Too Sweet~[;] 5); attack(3); sfxdamage(target[;]3);,Pea Gun,REQUIRE5,,RED,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Snowcloud,Do [ice]<double> damage|Freeze ALL dice,2,inflict(ICE[;] ALL); sfx(~_ice~); attack(d * 2[;] ICE); sfxdamage(target[;] d * 2);,Arctic Storm,MAX3,,BRIGHTCYAN,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Smack,Do [sword]4 damage,1,attack(d); sfxdamage(target[;] d);,Pea Gun,MAX3,,RED,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball,Do [ice]<d6> damage|Inflict [shiver]Slush,1,inflict(~Slush~); sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball_upgraded,Do [ice]<d6> damage|Inflict [shiver]Slush,1,inflict(~Slush~); sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball_downgraded,Do [ice]<d6> damage,1,sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slushie,Inflict [shiver]3 slush,2,inflict(~Slush~[;] 3); sfx(~_ice~);,Slushie,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Slushie_upgraded,Inflict [shiver]3 slush,2,inflict(~Slush~[;] 3); sfx(~_ice~);,Slushie,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Slushie_downgraded,Inflict [shiver]1 slush,2,inflict(~Slush~); sfx(~_ice~);,Slushie,REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freezer,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Freezer_upgraded,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Freezer_downgraded,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,MIN3,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Cold Cut,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cold Cut_upgraded,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cold Cut_downgraded,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,REQUIRE1|REQUIRE1|REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane Spear,Do [sword]<d6> damage|Gain [regen]1 regen|,2,attack(d); sfxdamage(target[;] d); inflictself(~Regen~); sfx(~_cure~);,Candy Spear,ODD,,RED,change_power,change_power,,,2,NO,NO,,,,,,,,,,,,,
Candy Cane Spear_upgraded,Do [sword]<d6> damage|Gain [regen]2 regen|,2,attack(d); sfxdamage(target[;] d); inflictself(~Regen~); sfx(~_cure~);,Candy Spear,ODD,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Candy Cane Spear_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d);,Candy Spear,ODD,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Christmas Vacation,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Christmas Vacation_upgraded,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Christmas Vacation_downgraded,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,ODD|ODD|ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
AC Unit,Gain [fan]2 fan,1,inflictself(~Fan~[;] 2); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
AC Unit_upgraded,Gain [fan]3 fan,1,inflictself(~Fan~[;] 3); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
AC Unit_downgraded,Gain [fan]1 fan,1,inflictself(~Fan~); sfx(~_ice~);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Tree Shake,Receive 2-4 ornaments|Take [sword]1 dmg for each|(cooldown of 1 turn),2,var number = rand([2[;]3[;]4]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); } e.setvar(~cooldown~[;]1);,,NORMAL|NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,e.dicehistory = []; e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,if(e.dicehistory.length > 0){ var dh = e.dicehistory[0].basevalue; if(e.remainingcountdown == dh ) { bonus(9999); } else { if(e.remainingcountdown <= dh) { bonus(-10 * dh); } else if(e.remainingcountdown  == dh) { bonus(10 * dh); } } e.dicehistory = []; },,,,,
Broken Ornament,Do [sword]<d6> damage|Inflict [bleed]1 bleed|[gray](once per battle),1,inflict(~Bleed~); sfx(~_poison~); attack(d); sfxdamage(target[;] d);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Tree Shake_upgraded,Receive 3-5 ornaments|Take [sword]1 dmg for each|(cooldown of 1 turn),2,var number = rand([3[;]4[;]5]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); } e.setvar(~cooldown~[;]1);,,NORMAL|NORMAL,9,GREEN,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Tree Shake_downgraded,Receive 1-3 ornaments|Take [sword]1 dmg for each|(cooldown of 1 turn),2,var number = rand([1[;]2[;]3]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); } e.setvar(~cooldown~[;]1);,,NORMAL|NORMAL|NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Nutcracker_upgraded,Do [sword]<d6> damage|Triple if enemy is male,2,var namelist = [~Drake~[;]~Wicker Man~[;]~Snowman~[;]~Hothead~[;]~Wolf Puppy~[;]~Bully~[;]~Elf~[;]~Thief~[;]~Warrior~[;]~Buster~[;]~Cactus~[;]~Copycat~[;]~Cornelius~[;]~Cowboy~[;]~Fireman~[;]~Frog~[;]~Gargoyle~[;]~Handyman~[;]~Loud Bird~[;]~Magician~[;]~Pirate~[;]~Rat King~[;]~Rotten Apple~[;]~Rose~[;]~Skeleton~[;]~Sneezy~[;]~Space Marine~[;]~Sterohead~[;]~Sticky Hands~[;]~Vacuum~[;]~Warlock~[;]~Wizard~[;]~Yeti~[;]~Wisp~]; var doubledmg = false; for(name in namelist) { if(target.name == name) { doubledmg = true; break; } } if(doubledmg) { attack(d * 3); sfxdamage(target[;] d*3); } else { attack(d); sfxdamage(target[;] d); },,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Nutcracker_downgraded,Do [sword]<d6> damage|Double if enemy is male,2,var namelist = [~Drake~[;]~Wicker Man~[;]~Snowman~[;]~Hothead~[;]~Wolf Puppy~[;]~Bully~[;]~Elf~[;]~Thief~[;]~Warrior~[;]~Buster~[;]~Cactus~[;]~Copycat~[;]~Cornelius~[;]~Cowboy~[;]~Fireman~[;]~Frog~[;]~Gargoyle~[;]~Handyman~[;]~Loud Bird~[;]~Magician~[;]~Pirate~[;]~Rat King~[;]~Rotten Apple~[;]~Rose~[;]~Skeleton~[;]~Sneezy~[;]~Space Marine~[;]~Sterohead~[;]~Sticky Hands~[;]~Vacuum~[;]~Warlock~[;]~Wizard~[;]~Yeti~[;]~Wisp~]; var doubledmg = false; for(name in namelist) { if(target.name == name) { doubledmg = true; break; } } if(doubledmg) { attack(d * 2); sfxdamage(target[;] d*2); } else { attack(d); sfxdamage(target[;] d); },,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
All I Want,Do [sword]3 damage|Per [song]song on self|Lose all song,2,bonus(-10); attack(getstatusself(~Song~)*3); sfxdamage(target[;] getstatusself(~Song~)*3); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,10,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
All I Want_upgraded,Do [sword]3 damage|Per [song]song on self|Lose all song,1,bonus(-10); attack(getstatusself(~Song~)*3); sfxdamage(target[;] getstatusself(~Song~)*3); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
All I Want_downgraded,Do [sword]2 damage|Per [song]song on self|Lose all song,2,attack(getstatusself(~Song~)*2); sfxdamage(target[;] getstatusself(~Song~)*2); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,12,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Sing,Do [weaken]<d6> damage|Gain [song]3 song|On 8[;] gain 2 more,2,bonus(10000); attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~[;] 3); sfx(~_song~); if(d == 8) inflictself(~Song~[;] 2);,,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sing_upgraded,Do [weaken]<d6> damage|Gain [song]5 song|On 8[;] gain 2 more,2,bonus(10000); attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~[;] 5); sfx(~_song~); if(d == 8) inflictself(~Song~[;] 2);,,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sing_downgraded,Do [weaken]<d6> damage|Gain [song]1 song,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~); sfx(~_song~);,,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mic Drop,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mic Drop_upgraded,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mic Drop_downgraded,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,REQUIRE1,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Ornament,Do [sword]<d6> damage|Inflict [fire]1 burn|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(FIRE); sfx(~_fire~);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Snowflake Ornament,Do [sword]<d6> damage|Inflict [ice]1 freeze|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Sharp Ornament,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,NORMAL|FREE2,,RED,change_power,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Sharp Ornament_upgraded,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,NORMAL|FREE4,,RED,,,,,0,NO,YES,decor,,,,,,,,,,,,
Toxic Ornament,Do [sword]<d6> damage|Inflict [poison]2 poison|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(POISON[;]2); sfx(~_poison~);,,NORMAL,,PURPLE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Cursed Ornament,Do [sword]<d6> damage|Inflict [curse]1 curse|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(CURSE); sfx(~_curse~);,,NORMAL,,GREY,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star,Do [sword]7 damage|Inflict [blind]3 blind,1,attack(7); sfxdamage(target[;] 7); inflict(BLIND[;] 3); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star_upgraded,Do [sword]12 damage|Inflict [blind]3 blind,1,attack(12); sfxdamage(target[;] 12); inflict(BLIND[;] 3); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,,,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star_downgraded,Do [sword]7 damage|Inflict [blind]1 blind,1,attack(7); sfxdamage(target[;] 7); inflict(BLIND[;] 1); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,,,,,0,NO,YES,decor,,,,,,,,,,,,
Wind Ornament,Do [sword]<d6> damage|Gain [dodge]1 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE); sfx(~_dodge~);,,NORMAL,,YELLOW,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Heavy Ornament,Do [sword]<d6> damage|Inflict [weaken]1 weaken|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(WEAKEN); sfx(~_weaken~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Electric Ornament,Do [sword]<d6> damage|Inflict [shock]1 shock|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(SHOCK); sfx(~_shock~);,,NORMAL,,YELLOW,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Chain Ornament,Do [sword]<d6> damage|Inflict [lock]1 lock|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(LOCK); sfx(~_lock~);,,NORMAL,,GREY,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Armor Ornament,Do [sword]<d6> damage|Gain [reduce]1 reduce|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(REDUCE); sfx(~_shield~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Barricade Ornament,Do [sword]<d6> damage|Gain [shield]4 shield|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(SHIELD[;] 4); sfx(~_shield~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Boomerang Ornament,Do [sword]<d6> damage|Return the dice|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); givedice(d); sfx(~_metals~);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Mini Christmas Tree,Do [sword]<d6> damage|Gain an Ornament|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false);,,NORMAL,,GREEN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Snowglobe Ornament,Do [sword]<d6> damage|Inflict [shiver]1 slush|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(~Slush~); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Food Ornament,Do [sword]<d6> damage|Heal [heal]3 hp|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); attackself(-3); sfx(~_heal~);,,NORMAL,,GREEN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Repeating Ornament,Do [sword]<d6> damage|Do it again in [jinx]2 turns|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); bonus(d * 20); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d); sfx(~_thinghappens~);,,NORMAL,,PINK,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Slide,Do [sword]<d6> damage|On even[;] freeze a dice,1,attack(d); if(d % 2 == 0) { inflict(ICE); sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slide_upgraded,Do [sword]<d6> damage|On even[;] freeze 2 dice,1,attack(d); if(d % 2 == 0) { inflict(ICE[;]2); sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slide_downgraded,Do [sword]<d6> damage|On even[;] freeze a dice,1,attack(d); if(d % 2 == 0) { inflict(ICE); sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX2|MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Downplayed Ornament,Do [weaken]<d6> damage|Inflict [powerdown]2 power down|[gray](once per battle),1,attack(d[;] WEAKEN); sfxdamage(target[;] d); inflict(~Powerdown~[;] 2); sfx(~_weaken~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Card Reroll,Rerolls all cards,2,sfx(~_thinghappens~); runscript(~christmasspecial/warrior_dotide~[;][self[;]target[;]true]);,,COUNTDOWN,6,,,noeffect,,,0,YES,NO,cannotsteal|skillcard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Palm Christmas Tree,Gain 2 Ornaments,2,sfx(~_thinghappens~); var number = 2; sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); } e.setvar(~cooldown~[;]1);,,COUNTDOWN,5,GREEN,reducesize,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Frozen Claw,Do [ice]<d6> damage|inflict [ice]1 freeze,1,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,MAX3,,BRIGHTCYAN,add2,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Frozen Slash,Do [ice]<d6> damage|inflicts [bleed]1 Bleed,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(~Bleed~); sfx(~_poison~);,,NORMAL,,BRIGHTCYAN,add2,change_power,,,0,NO,NO,,,,,,,,,,,,,
Frozen Slash_downgraded,Do [ice]<d6> damage|inflict [ice]1 Freeze,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Self Consume,Heal [heal]<d6> health|In [jinx]3 turns[;]|take [sword]<d6> damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]3[;]d); sfx(~_thinghappens~);,,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Self Consume_upgraded,Heal [heal]<d6> health|In [jinx]3 turns[;]|take [sword]<d6> damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]3[;]d); sfx(~_thinghappens~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Self Consume_downgraded,Heal [heal]<d6> health|In [jinx]3 turns[;]|take [sword]<d6> + 2 damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]3[;]d + 2); sfx(~_thinghappens~);,,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Gumdrop Throw,Do [fire]6 damage|Inflict [heart]2 Too Sweet,1,attack(6[;] FIRE); sfxdamage(target[;] 6); inflict(~Too Sweet~[;] 2); sfx(~_cure~);,,COUNTDOWN,12,RED,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gumdrop Throw_downgraded,Do [fire]5 damage|Inflict [heart]1 Too Sweet,1,attack(5[;] FIRE); sfxdamage(target[;] 5); inflict(~Too Sweet~); sfx(~_cure~);,,COUNTDOWN,12,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane,Do [sword]6 damage|Returns a dice,2,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice); attack(6); sfxdamage(target[;] 6);,,NORMAL|NORMAL,8,RED,change_power,changetotal12,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane_upgraded,Do [sword]6 damage|Returns a dice,2,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice); attack(6); sfxdamage(target[;] 6);,,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Gift Bag,Gives 3 toys|(cooldown of 1 turn),2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~); e.setvar(~cooldown~[;]1);,,NORMAL|NORMAL|NORMAL|NORMAL,,RED,change_power,change_power,,,0,YES,NO,shockimmune|curseavoid|cannotreuse|excludefromrandomlists,,e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Gift Bag_upgraded,Gives 4 toys|(cooldown of 1 turn),2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~); e.setvar(~cooldown~[;]1);,,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,YES,NO,shockavoid|curseavoid|cannotreuse|excludefromrandomlists,,e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Gift Bag_downgraded,Gives 2 toys|(cooldown of 1 turn),2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~); e.setvar(~cooldown~[;]1);,,MAX5|MIN2|MIN2|MAX5,,RED,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Train,Do [sword]<d6> damage|Gain [dodge]1 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE); sfx(~_dodge~);,,NORMAL|NORMAL,,YELLOW,change_power,decreaserange,,,0,NO,YES,toy,,,,,,,,,,,,
Train_upgraded,Do [sword]<d6> damage|Gain [dodge]2 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE[;] 2); sfx(~_dodge~);,,NORMAL|NORMAL,,YELLOW,,,,,0,NO,YES,toy,,,,,,,,,,,,
Wind Up Car,Do [sword]10 damage|[gray](once per battle),1,attack(10); sfxdamage(target[;] 10);,,COUNTDOWN,9,,halfcountdown,change_power,,,0,NO,YES,toy,,,,,,,,,,,,
Wind Up Car_downgraded,Do [sword]5 damage|[gray](once per battle),1,attack(5); sfxdamage(target[;] 5);,,COUNTDOWN,9,,,,,,0,NO,YES,toy,,,,,,,,,,,,
Nerf Gun,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,MAX5|FREE3,,RED,add4,change_power,,,0,NO,YES,toy,,,,,,,,,,,,
Nerf Gun_downgraded,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,MAX5|FREE1,,RED,,,,,0,NO,YES,toy,,,,,,,,,,,,
Candy Stockings,Heal [heal]<double> for [jinx]3 turns,1,for(i in 1...4) { jinx(~Candy Stocking~[;]~heal [heal]~ + (i * 2) + ~ health~[;]~Heal [heal]~ + (i * 2) + ~ health~[;]~attack(-%VAR% * 2); sfx(\~_heal\~);~[;]self[;]self[;]i[;]d); } sfx(~_thinghappens~);,,MAX3,,GREEN,increaserange,decreaserange,,,0,YES,YES,toy,,,,,,,,,,,,
Toy Phone,Do [sword]<d6> damage|in 2 turns[;] do [sword]<double> damage|[gray](once per battle),1,jinx(~Telephone~[;]~take [sword]~ + (d * 2) + ~ damage~[;]~Take [sword]~ + (d * 2) + ~ damage~[;]~attack(%VAR% * 2); sfxdamage(null[;]%VAR% * 2);~[;]target[;]self[;]2[;]d); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,,MAX4,,PINK,increaserange,decreaserange,,,0,NO,YES,toy,,,,,,,,,,,,
Slushie Maker,Do [ice]<d6> damage[;]|freeze 1 dice[;] inflict [shiver]Slush|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(~Slush~); inflict(ICE); sfx(~_ice~);,,NORMAL|FREE4,,BRIGHTCYAN,add5,complicate,,,0,NO,YES,toy,,,,,,,,,,,,
Desk Fan,Heal [heal]<d6> health|Gain [fan]3 fan|[gray](once per battle),1,inflictself(~Fan~[;] 3); sfx(~_ice~); attackself(-d); sfx(~_heal~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,YES,YES,toy,,,,,,,,,,,,
Bag Hit,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] d);,,MAX3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Bag Hit_upgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target[;] d);,,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Thieving Tools@spanner,Combine both dice|Change Tools,2,givedice(d); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL|NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@bump,+1 to dice value|Change Tools on 2nd use|,2,givedice(d+1); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@nudge,-1 to dice value|Change Tools on 2nd use|,2,givedice(d-1); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,MIN2,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@pick,Split dice into 2|Change Tools on 2nd use|,2,givedice(split(d)[;] ~splitdice~); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@dupli,Duplicate dice|Change Tools on 2nd use|,2,givedice([d[;]d]); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@vise,Get 2 of the difference|Change Tools on 2nd use|,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~);,,NORMAL|NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@roll,Reroll this dice|Change Tools on 2nd use|,2,givedice(); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@screw,Do [sword]<d6> damage|Change Tools on 2nd use|,2,attack(d); sfxdamage(target[;] d); trace(e.usesleft); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,MAX5,,GRAY,,,,,2,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Backhand,Do [fire]<d6> damage|Inflict [sting]Sting,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~); inflict(~Sting~);,,MAX3|MIN3,,RED,change_power,changetotal9,,,0,NO,NO,,,,,,,,,,,,,
Backhand_upgraded,Do [fire]<d6> damage|Inflict [sting]Sting,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~); inflict(~Sting~);,,MAX4|MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Segway,Gain [dodge]1 dodge,2,inflictself(DODGE); sfx(~_dodge~);,,COUNTDOWN,12,YELLOW,threequartercountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Climate Change,Inflict enemy's [fire] amount|as [ice][;] and vice versa,2,inflict(ICE[;] getstatus(FIRE)); inflict(FIRE[;] getstatus(ICE)); sfx(~_ice~); sfx(~_fire~);,Blue Flame,COUNTDOWN,6,RED,reducesize,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Contained Blast,Do [fire]2 dmg per [fire] on enemy|Do [ice]2 dmg per [ice] on enemy,2,attack(getstatus(FIRE) * 2[;] FIRE); attack(getstatus(ICE) * 2[;] ICE); sfxdamage(target[;] getstatus(ICE) * 2); sfxdamage(target[;] getstatus(FIRE) * 2);,Blue Flame,EVEN|EVEN,,RED,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Contained Blast_upgraded,Do [fire]3 dmg per [fire] on enemy|Do [ice]3 dmg per [ice] on enemy,2,attack(getstatus(FIRE) * 3[;] FIRE); attack(getstatus(ICE) * 3[;] ICE); sfxdamage(target[;] getstatus(ICE) * 3)); sfxdamage(target[;] getstatus(FIRE) * 3));,Firebomb,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Heavily Wrapped Gift,Contains...|The Best Item in the Game,2,giveequipment(~The Best Item in the Game~[;] true[;] false[;] e); sfx(~_thinghappens~);,,COUNTDOWN,50,YELLOW,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,e.remainingcountdown = self.getvar(~count~);,self.setvar(~count~[;]e.remainingcountdown);,,,,,,,,,
The Best Item in the Game,Drain [heart]<double> health,2,drain(d * 2); sfx(~_drain~);,,NORMAL,,RED,add1,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Present Shotgun,Do [sword]<double> damage|Gain a random item,2,attack(d * 2); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~nomidturnsummon~]))[;] -1); sfxdamage(target[;] d * 2);,Emulator,MAX3,,RED,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Present Shotgun_downgraded,Do [sword]<d6> damage|Gain a random item,2,attack(d); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~nomidturnsummon~]))[;] -1); sfxdamage(target[;] d);,Emulator,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Combat Bump,Dice value +1|,2,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,,,,,,2,YES,NO,shockavoid|weakenavoid|curseavoid|cannotsteal,,,,,,,,,,,,
Combat Roll@witch,Reroll a dice|[gray](Reuseable),2,givedice();,,NORMAL,,,,,,,2,YES,NO,cannotsteal|excludefromrandomlists|shockavoid|weakenavoid|curseavoid,,,,,,,,,,,,
Peck,Do [sword]1 damage,1,attack(1); sfxdamage(target[;] 1);,Pea Gun,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Peck_upgraded,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] 3);,Pea Gun,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Final Frost[],[blue]frost|Do [ice]2 damage|per [ice] on enemy,2,attack(getstatus(ICE) * 2); sfxdamage(target[;] getstatus(ICE) * 2); sfx(~_ice~);,,,,BLUE,,noeffect,,,0,NO,NO,finale|powercard|excludefromrandomlists,,,,,,,,,,,,
Warm Coat,Do [fire]2 damage,1,attack(2[;] FIRE); sfxdamage(target[;] 2);,,REQUIRE1,,RED,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Warm Coat_upgraded,Do [fire]4 damage,1,attack(4[;] FIRE); sfxdamage(target[;] 4);,,REQUIRE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Christmas Dagger,Do [sword]<d6> damage|Changes color on use|,1,attack(d); sfxdamage(target[;] d);,Pea Gun,MAX3,,RED,change_power,decreaserange,,,-1,NO,NO,,,,self.resetvar(~christmasdaggertemp~);,,,,,,var skill = new elements.Skill(~Against all odds_old~); skill.script = 'var eq = self.getvar(~christmasdaggertemp~); if(eq.equipmentcol == 2) { eq.changecolour(~GREEN~); } else { if(eq.equipmentcol == 3) { eq.changecolour(~RED~); } } self.resetvar(~christmasdaggertemp~); '; self.setvar(~christmasdaggertemp~[;]e); var tw = new motion.actuators.SimpleActuator(null[;]1/60[;]null); tw.onComplete(skill.execute[;][self[;]target]); tw.move(); /*'but buster this could cause unintended behavior if you insert dice at a rate faster than 1 per 1/60th of a second or if you use two christmas daggers simultaneously!!' (latter may be possible with snap but i find it highly unlikely you'd ever reach a situation like that)*/,,,
Christmas Dagger_upgraded,Do [sword]<d6> dmg[;] +[fire]1 burn|Changes effect on use|,1,attack(d); sfxdamage(target[;] d); if(e.equipmentcol == 2) { inflict(~FIRE~); sfx(~_fire~); } else { if(e.equipmentcol == 3) { attackself(-1); sfx(~_heal~); } },Pea Gun,MAX3,,RED,,,,,-1,NO,NO,,,,self.resetvar(~christmasdaggertemp~);,,,,,,var skill = new elements.Skill(~Against all odds_old~); skill.script = 'var redstring = ~+[fire]1 burn~; var greenstring = ~heal [heal]1~; var eq = self.getvar(~christmasdaggertemp~); if(eq.equipmentcol == 2) { eq.changecolour(~GREEN~); eq.fulldescription = eq.fulldescription.split(redstring).join(greenstring); } else { if(eq.equipmentcol == 3) { eq.changecolour(~RED~); eq.fulldescription = eq.fulldescription.split(greenstring).join(redstring); } } self.resetvar(~christmasdaggertemp~); '; self.setvar(~christmasdaggertemp~[;]e); var tw = new motion.actuators.SimpleActuator(null[;]1/60[;]null); tw.onComplete(skill.execute[;][self[;]target]); tw.move();,,,
Time Travel,Switches Ghost types,1,if(!simulation) { var ghost = rand([~Ghost of Future~[;]~Ghost of Present~[;]~Ghost of Past~]); self.name = ghost; sfx(~_thinghappens~); bonus(1000000000000000000000000); if(self.name == ~Ghost of Future~) { self.destroyallequipment(); giveequipment([~Space Food~][;]true[;]false); giveequipment([~Laser Rifle~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); sfx(~_thinghappens~); f.symbolparticle(~beartransform~); screenshake(0.2); } if(self.name == ~Ghost of Present~) { self.destroyallequipment(); giveequipment([~Global Warming~][;]true[;]false); giveequipment([~Pollution~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); sfx(~_thinghappens~); f.symbolparticle(~beartransform~); screenshake(0.2); } if(self.name == ~Ghost of Past~) { self.destroyallequipment(); giveequipment([~Tap Dance~][;]true[;]false); giveequipment([~Lead Pipe Hit~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); sfx(~_thinghappens~); f.symbolparticle(~beartransform~); screenshake(0.2); } },,COUNTDOWN,2,GREEN,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lead Pipe Hit,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX4|FREE4,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Lead Pipe Hit_upgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX4|FREE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance,Do [sword]<d6> damage|on 6 or 2[;] gain [dodge],1,attack(d); if(d == 6) inflictself(DODGE); if(d == 6) { sfx(~_dodge~[;]~~[;]0.2); } if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance_upgraded,Do [sword]<d6> damage|on 8 or 2[;] gain [dodge],1,attack(d); if(d == 8) inflictself(DODGE); if(d == 8) { sfx(~_dodge~[;]~~[;]0.2); } if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX5|MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance_downgraded,Do [sword]<d6> damage|on 2[;] gain [dodge],1,attack(d); if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Space Food,Heal [heal]2 health|If excess[;] do [sword]4 damage|,2,attackself(-2); sfx(~_heal~); if(self.hp + 2 > self.maxhp) { attack(4); sfxdamage(target[;]4); },,ODD,,GREEN,change_power,doublerequirements,,,2,YES,NO,,,,,,,,,,if(self.hp + 2 > self.maxhp) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Space Food_upgraded,Heal [heal]4 health|If excess[;] do [sword]6 damage|,2,attackself(-4); sfx(~_heal~); if(self.hp + 2 > self.maxhp) { attack(6); sfxdamage(target[;]6); },,ODD,,GREEN,,,,,2,YES,NO,,,,,,,,,,if(self.hp + 4 > self.maxhp) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Laser Rifle,Do [sword]<d6> damage|,1,attack(d); sfxdamage(target[;] d);,,ODD|FREE1,,RED,change_power,removereusable,,,2,NO,NO,,,,,,,,,,,,,
Laser Rifle_upgraded,Do [sword]<d6> damage|,1,attack(d); sfxdamage(target[;] d);,,EVEN|FREE1,,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Pollution,Inflict [poison]3 poison,2,inflict(POISON[;] 3); sfx(~_poison~);,,MAX2|MAX3,,PURPLE,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Global Warming,Do [fire]<d6> +<timesused> damage|Add 1 for each time used|,1,attack(d[;] FIRE); sfxdamage(target[;] d); attack(e.timesused+1);,,MAX3,,RED,change_power,removereusable,,,2,NO,NO,,,,,,,,,,,,,
Global Warming_upgraded,Do [fire]<d6> +<timesused> damage|Add 1 for each time used|,1,attack(d[;] FIRE); sfxdamage(target[;] d); attack(e.timesused+1);,,MAX4,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Pollution_upgraded,Inflict [poison]5 poison,2,inflict(POISON[;] 5); sfx(~_poison~);,,MAX4|MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
BOOO!,Enemy loses [song]1,1,removestatus(~Song~); sfx(~_song~);,,COUNTDOWN,10,ORANGE,change_power,noeffect,,,0,NO,NO,immunetotide,1,,,,,,,,,,,
BOOO!_upgraded,Enemy loses [song]2,1,removestatus(~Song~[;] 2); sfx(~_song~);,,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,immunetotide,,,,,,,,,,,,
Cycle,Choose another card|,2,,,NORMAL,,GRAY,,,,,-1,YES,NO,cannotsteal|excludefromrandomlists,,self.setvar(~wj-initialized~[;]0); inflictself(~chain~),for(eq in self.equipment) { eq.removetag(~chained~); eq.removetag(~alreadyunchained~); },runscript(~christmasspecial/jester_beforestartturn~[;][self]);,,if(!onlimit) { var eq = self.lastequipmentused; if((!eq.hastag(~immunetochain~)) && (eq.usesleft == 0 # eq == e)) runscript(~christmasspecial/jester_dochaining~[;][self]); },,,,,,
Ice Skates,Gain [dodge]Dodge[;] but get|[ice]Frozen next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Ice Skates~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflict(ICE); sfx(\~_ice\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Ice Skates_upgraded,Gain [dodge]Dodge[;] but get|[ice]Frozen next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Ice Skates~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflict(ICE); sfx(\~_ice\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,EVEN,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Ice Skates_downgraded,Gain [dodge]Dodge[;] but get|[ice]Frozen next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Ice Skates~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflict(ICE); sfx(\~_ice\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,REQUIRE5|REQUIRE5,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Fire Boots,Gain [dodge]Dodge[;] but get|[fire]Burned next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Fire Boots~[;]~receive [fire]1 burn~[;]~Receive [fire]1 burn~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Fire Boots_upgraded,Gain [dodge]Dodge[;] but get|[fire]Burned next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Fire Boots~[;]~receive [fire]1 burn~[;]~Receive [fire]1 burn~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,EVEN,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Fire Boots_downgraded,Gain [dodge]Dodge[;] but get|[fire]Burned next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Fire Boots~[;]~receive [fire]1 burn~[;]~Receive [fire]1 burn~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,REQUIRE6|REQUIRE6,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Shiny Sword,Do [sword]<d6> damage. On start|of turn[;] if active[;] do [sword]3,2,attack(d); sfxdamage(target[;]d);,,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,,,,,if(e.availablethisturn) { e.animate(~flashandshake~); attack(3); sfxdamage(target[;]3); },,,,,,,
Chaingun,Do [sword]3 dmg[;] cycle cards|(ignores cycle),1,attack(3); sfxdamage(target[;]3); runscript(~christmasspecial/jester_dochaining~[;][self]);,,EVEN,,GRAY,simplify,complicate,,,0,NO,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,runscript(~christmasspecial/jester_dochaining~[;][self]);
Chainbump,Dice value +1|(ignores cycle),1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,GRAY,change_power,complicate,,,0,YES,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,
Chainbump_upgraded,Dice +1 (ignores cycle)|,1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,GRAY,,,,,2,YES,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,
Christmas Revolver,Do [sword]<var:6rolls> damage|+3 per 6 rolled,2,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname); attack(arrayname); sfxdamage(target[;] arrayname);,,REQUIRE6,,RED,simplify,doublerequirements,,,0,NO,NO,,,,,,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,,,,,
Christmas Pistol,Do [sword]2 damage. On <var:randomdice>[;]|return dice (changes)|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,5,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6]));,,,,,,,,,,
Christmas Pistol_upgraded,Do [sword]2 damage. On <var:randomdice>[;]|return dice (likely on 6)|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6[;]6[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,5,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6[;]6[;]6[;]6]));,,,,,,,,,,
Christmas Pistol_downgraded,Do [sword]2 damage. On <var:randomdice>[;]|return dice (changes)|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6]));,,,,,,,,,,
Pip Master,Reroll a dice|Do [sword]1 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack(large - small); sfxdamage(target[;] large - small); },,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Pip Master_upgraded,Reroll a dice|Do [sword]2 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack((large - small) * 2); sfxdamage(target[;] (large - small) * 2); },,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Pip Master_downgraded,Reroll a dice|Do [sword]1 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack(large - small); sfxdamage(target[;] large - small); },,MIN4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice();
Doom and Gloom,Do [sword]<d6> damage|[80%]On even inflict [skipturn]Timely_Demise,2,attack(d); if(d % 2 == 0) inflict(~Demise~); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Plasma Gun,NORMAL,,BLACK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Doom and Gloom_upgraded,Do [sword]<d6> damage|[80%]On even inflict [skipturn]2 Timely Demise,2,attack(d); if(d % 2 == 0) inflict(~Demise~[;] 2); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Plasma Gun,NORMAL,,BLACK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
12 Days Of Christmas,Do [sword]3 damage|Inflict [skipturn]3 Timely Demise,1,attack(3); sfxdamage(target[;]3); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 3);,,COUNTDOWN,10,BLACK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
12 Days Of Christmas_upgraded,Do [sword]4 damage|Inflict [skipturn]4 Timely Demise,1,attack(4); sfxdamage(target[;]4); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 4);,,COUNTDOWN,10,BLACK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Roll Tracker,Tracks your rolls,2,,,,,GRAY,change_power,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~rollindex~[;]0); if(self.getvar(~baserolls~).length == null) { trace(~selfvar error!~); e.fulldescription = ~Something went wrong![newline]Please report this!![newline][newline](Clicking calculate will[newline]abruptly crash your game)~; } else { self.setvar(~rolls~[;]self.getvar(~baserolls~)); self.setvar(~updatecounter~[;]0); var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); },,if(self.getvar(~updatecounter~)) { var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); e.animate(~flash~); self.setvar(~updatecounter~[;]0); },,,,,,
Roll Tracker_upgraded,Tracks your rolls|Odd rolls reduce CPU,2,,,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~rollindex~[;]0); if(self.getvar(~baserolls~).length == null) { trace(~selfvar error!~); e.fulldescription = ~Something went wrong![newline]Please report this!![newline][newline](Clicking calculate will[newline]abruptly crash your game)~; } else { self.setvar(~rolls~[;]self.getvar(~baserolls~)); self.setvar(~updatecounter~[;]0); var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); } inflictself(~oddcpureduce~);,,if(self.getvar(~updatecounter~)) { var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join() + ~[newline][newline]Odd rolls reduce CPU[newline]instead of increasing it.~; e.animate(~flash~); self.setvar(~updatecounter~[;]0); },,,,,,
Reset,Reset cpu (testing)|,1,adjustrobotcounter(-self.roll_total);,,NORMAL,,GRAY,,,,none,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Flip,Flip next rolls|,1,,,NORMAL,,ORANGE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,var newrolls = []; for(v in self.getvar(~rolls~)) { newrolls.push(7-v); } newrolls[newrolls.length-1] = 0; trace(newrolls); self.setvar(~rolls~[;]newrolls); self.setvar(~updatecounter~[;]1);,,,
Reverse,Reverse roll order|,1,,,NORMAL,,ORANGE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,var newrolls = self.getvar(~rolls~); newrolls.reverse(); newrolls.push(0); newrolls.shift(); trace(newrolls); self.setvar(~rolls~[;]newrolls); self.setvar(~rollindex~[;]newrolls.length - self.getvar(~rollindex~)); self.setvar(~updatecounter~[;]1);,,,
Freeze,Set rolls to|111111,1,,,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,self.setvar(~rolls~[;][1[;]1[;]1[;]1[;]1[;]1[;]0]); self.setvar(~rollindex~[;]0); self.setvar(~updatecounter~[;]1);,,,
Confetti Popper,Do [sword]<d6> damage|Skip the next dice roll,1,attack(d); sfxdamage(target[;]d);,,MAX5,,YELLOW,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,self.setvar(~rollindex~[;]self.getvar(~rollindex~)+1); if(!self.getvar(~rolls~)[self.getvar(~rollindex~)]) self.setvar(~rollindex~[;]0); self.setvar(~updatecounter~[;]1);,,,
Garbage Collector,Next roll reduces CPU|instead of increasing it,1,inflictself(~reversecpu~);,,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sequence Break,Skip the next <d6> rolls,1,,,MAX3,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,var i = self.getvar(~rollindex~); i+=d; if(i >= self.getvar(~rolls~).length) i-=self.getvar(~rolls~).length; if(!self.getvar(~rolls~)[i]) i = 0; self.setvar(~rollindex~[;]i); self.setvar(~updatecounter~[;]1);,,,
Frozen Gloves@robot,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d); sfxdamage(target[;]d); inflictself(~robotfreeze~);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(~robotfreeze~);
Frozen Slash_upgraded,Do [ice]<d6> damage|inflicts [bleed]1 Bleed,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(~Bleed~); sfx(~_poison~);,,NORMAL|FREE3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Head of Krampus,Deal dmg equal to 20%|of enemy's current HP,1,sfxdamage(target[;]target.hp / 5); attack(target.hp / 5);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Head of Krampus_upgraded,Deal dmg equal to 25%|of enemy's current HP,1,sfxdamage(target[;]target.hp / 4); attack(target.hp / 4);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe,Do [sword]<d6> damage. Next|turn[;] do [sword]<d6>/ 2 damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d/2); sfx(~_thinghappens~);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe_upgraded,Do [sword]<d6> damage. Next|turn[;] do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d); sfx(~_thinghappens~);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe_downgraded,Do [sword]<d6> damage. Next|turn[;] take [sword]<d6>/ 2 damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]2[;]d/2); sfx(~_thinghappens~);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Incantation,Roll 2 6's next turn,2,inflictself(~stash~+6[;]2); inflictself(~illuminate~);,,MIN5,,RED,simplify,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Soul Crush,Drain [heart]4 health|Get 2 3's,2,drain(4); sfx(~_drain~); givedice([3[;]3]);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Soul Crush_downgraded,Drain [heart]4 health,2,drain(4); sfx(~_drain~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Dagger,Do [sword]<var:dagger> damage|+[sword]1 each use|,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 1); sfxdamage(target[;] self.getvar(~dagger~) + 1);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,,,,,,,,
Divine Throwing Dagger_downgraded,Do [sword]<var:dagger> damage|+[sword]1 each use,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 1); sfxdamage(target[;] self.getvar(~dagger~) + 1);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,,,,,,,,
Divine Throwing Dagger_upgraded,Do [sword]<var:dagger> damage|+[sword]3 each use|,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 2); sfxdamage(target[;] self.getvar(~dagger~) + 2);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,self.setvar(~dagger~[;] 2);,self.setvar(~dagger~[;] 2);,self.setvar(~dagger~[;] 2);,,,,,,,,
Divine Grip,Return two of the|difference between dice|On doubles[;] get 2 new dice,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) { givedice([(bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~); } else { givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); },,NORMAL|NORMAL,,GREEN,reuseable,changetotal9,,,0,YES,NO,,,,,,,,,,,,,
Divine Zap,Drain [heart]<var:divinezapdrain> health|(40% of enemy health),2,drain(self.getvar(~divinezapdrain~)); sfx(~_drain~);,,EVEN|ODD|REQUIRE3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,self.setvar(~divinezapdrain~[;] target.hp*0.40); e.animate(~flashandshake~);,,,,,,,
Divine Zap_upgraded,Drain [heart]<var:divinezapdrain> health|(40% of enemy health),2,drain(self.getvar(~divinezapdrain~)); sfx(~_drain~);,,EVEN|REQUIRE3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,self.setvar(~divinezapdrain~[;] target.hp*0.40); e.animate(~flashandshake~);,,,,,,,
Divine Microphone,Do [weaken]<d6> damage|Weaken 2 items,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); inflict(WEAKEN[;] 2); sfx(~_weaken~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Microphone_downgraded,Do [weaken]<d6> damage,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snowhammer,Do [ice]<d6> damage|Freeze 2 dice,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE[;] 2); sfx(~_ice~);,,REQUIRE6,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snowhammer_downgraded,Do [ice]<d6> damage,2,attack(d[;] ICE); sfxdamage(target[;] d); sfx(~_ice~);,,REQUIRE6,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Fire Axe,Do [fire]<d6> damage|Burn 2 dice,2,attack(d[;] FIRE); sfxdamage(target[;] d); inflict(FIRE[;] 2); sfx(~_fire~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Fire Axe_downgraded,Do [fire]<d6> damage,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Storm,Inflict [threshold]2_Storm,2,inflict(~Storm~[;] 2); sfx(~_curse~);,,COUNTDOWN,9,,threequartercountdown,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Shiny Nose,Inflict [shock]1 shock. If enemy|has red equipment[;] shock|all red equipment instead,2,if(simulation) { inflict(SHOCK); } if(!simulation) { var red = new elements.Equipment(~Fireball~).equipmentcol; var hasred = false; for(eq in self.equipment) { if(eq.equipmentcol == red) { hasred = true; break; } } if(hasred) inflict(~redshift~); else inflict(SHOCK); sfx(~_shock~); },,ODD,,RED,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Antlers,Gain [thorns]2 thorns,2,inflictself(THORNS[;] 2); sfx(~_thorns~);,,COUNTDOWN,10,GREEN,threequartercountdown,,,,0,NO,NO,,,,,,,,,,,,,
Antlers_downgraded,Gain [thorns]1 thorns,2,inflictself(THORNS[;] 1); sfx(~_thorns~);,,COUNTDOWN,10,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Antlers_weakened,Gain [thorns]1 thorns,2,inflictself(THORNS[;] 1); sfx(~_thorns~);,,COUNTDOWN,7,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Next Volume,Get the second spellbook|Current spellbook: <var:currentspellbook>,1,sfx(~_thinghappens~); var booknum = self.getvar(~currentspellbook~); for(i in 1...7) { if(Spellbook.isempty(i)) { self.setvar(~spellbook~+booknum+~slot~+i[;]~Empty slot~); } else { self.setvar(~spellbook~+booknum+~slot~+i[;]Spellbook.spellname(i)); } } for(eq in self.equipment){ if(eq.name == e.name){ eq.animate(~flashandshake~); } } self.setvar(~currentspellbook~[;]self.getvar(~currentspellbook~) + 1); if(self.getvar(~currentspellbook~) == 4) { self.setvar(~currentspellbook~[;]1); } booknum = self.getvar(~currentspellbook~); for(q in 1...7) { if(self.getvar(~spellbook~+booknum+~slot~+q) != ~Empty slot~) { Spellbook.changespellflash(q[;]self.getvar(~spellbook~+booknum+~slot~+q)); } else { Spellbook.erase(q); } },Time Stop,NORMAL,,GRAY,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|weakenavoid|curseavoid|altpoisonavoid|shockavoid|cannotsteal,1,inflictself(~silencenextvolume~);,,if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.hasstatus(SILENCE)) { e.availablethisturn = false; e.unavailabletext = ~Unavailable~; e.unavailabledetails = [~Break silence to unlock~]; }if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },,,,,,
Stolen Heart,-1 dice to enemy this fight[comma]|never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~); if(!simulation) { target.extradice--; if(target.dice + target.extradice < 1) { target.extradice = 1- target.dice; } },,REQUIRE5|REQUIRE5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stolen Heart_downgraded,Never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~);,,REQUIRE5|REQUIRE5,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Stolen Heart_upgraded,-1 dice to enemy this fight[comma]|never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~); if(!simulation) { target.extradice--; if(target.dice + target.extradice < 1) { target.extradice = 1- target.dice; } },,REQUIRE5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Last Word,Survive next fatal blow[comma]|never roll 2,1,inflictself(SURVIVE); sfx(~_survive~); inflictself(~never2~);,,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Last Word_downgraded,Never roll 2,1,inflictself(~never2~); sfx(~magic_gaindice~);,,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Last Word_upgraded,Survive next fatal blow[comma]|never roll 2,1,inflictself(SURVIVE); sfx(~_survive~); inflictself(~never2~);,,MAX2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light,Get immunity to freeze[comma]|never roll 1,1,self.innate.push(~immunefreeze~); sfx(~useitem~); inflictself(~never1~);,,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light_downgraded,Never roll 1,1,inflictself(~never1~); sfx(~magic_gaindice~);,,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light_upgraded,Get immunity to freeze[comma]|never roll 1,1,self.innate.push(~immunefreeze~); sfx(~useitem~); inflictself(~never1~);,,MAX2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall,Add [shield]6 shield[comma]|never roll 4,1,inflictself(SHIELD[;]6); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4|REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall_downgraded,Add [shield]3 shield[comma]|never roll 4,1,inflictself(SHIELD[;]3); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4|REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall_upgraded,Add [shield]6 shield[comma]|never roll 4,1,inflictself(SHIELD[;]6); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Weird Glare,Add [poison]5 poison[comma]|never roll 3,1,inflict(POISON[;]5); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Glare_downgraded,Add [poison]3 poison[comma]|never roll 3,1,inflict(POISON[;]3); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Glare_upgraded,Add [poison]6 poison[comma]|never roll 3,1,inflict(POISON[;]6); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stalemate,Do [sword]12 damage[comma]|Inflict [threshold]2 threshold,1,attack(12); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]12);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Stalemate_upgraded,Do [sword]14 damage[comma]|Inflict [threshold]2 threshold,1,attack(14); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]14);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Stalemate_downgraded,Do [sword]8 damage[comma]|Inflict [threshold]2 threshold,1,attack(8); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]8);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Ram,Do [sword]2 damage for|each [jinx]Jinx on enemy,2,attack(getjinx(target) + getjinx(target)); sfxdamage(target[;]getjinx(target) + getjinx(target)); if(getjinx(target) + getjinx(target) <= 0) { bonus(-1000); },Plasma Gun,COUNTDOWN,16,PINK,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ram_downgraded,Do [sword]1 damage for|each [jinx]Jinx on enemy,2,attack(getjinx(target)); sfxdamage(target[;]getjinx(target)); if(getjinx(target) <= 0) { bonus(-1000); },Plasma Gun,COUNTDOWN,16,PINK,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stomp,Do [shock]<d6> dmg +[shock]Shock[;]|repeat for next [jinx]2 turns,1,jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]2[;]d); jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]3[;]d); attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.1); inflict(SHOCK);,Static Shock,MAX3,,PINK,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Acceleration Kick,Every third turn[;] reduce all|jinx on the enemy by [jinx]1,1,,Time Stop,,,PINK,,,,,0,NO,NO,excludefromrandomlists|weakenavoid|weakenimmune|shockavoid,,,,,if(turn % 3 == 0) { boostjinxcountdowns(target[;] 1); sfx(~useitem~); e.animate(~flashandshake~); },,,,,,,
Stomp_downgraded,Do [shock]<d6> dmg +[shock]Shock[;]|repeat in [jinx]2 turns,1,jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]3[;]d); attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.1);,Static Shock,MAX3,,PINK,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
A Tool,Each turn[;] guarantee|an [quote]on 6[quote] item|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Tool_upgraded,Each turn[;] guarantee|an [quote]on 6[quote] item|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Star,Each turn[;] guarantee|a [sword]<double>-with-downside|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Star_upgraded,Each turn[;] guarantee|a [sword]<double>-with-downside|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Gun,Each turn[;] guarantee|a multiuse countdown|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Gun_upgraded,Each turn[;] guarantee|a multiuse countdown|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Maneuver,Each turn[;] guarantee|a dice modifier|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Maneuver_upgraded,Each turn[;] guarantee|a dice modifier|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Super Maneuver,Each turn[;] guarantee|a dice modifier|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Super Maneuver_upgraded,Each turn[;] guarantee|a dice modifier|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Pole,Each turn[;] guarantee|a countdown weapon|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Pole_upgraded,Each turn[;] guarantee|a countdown weapon|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Red,Each turn[;] guarantee|something red,1,,,,,RED,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Red_upgraded,Each turn[;] guarantee|something red|(will be upgraded),1,,,,,RED,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Blue,Each turn[;] guarantee|something blue,1,/* considered doing 'something old; something new; something borrowed; something blue' where something old would be something vanilla; something new would be something made for christmasspecial; and something borrowed would be something taken from a mod but. nah*/,,,,BRIGHTCYAN,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Blue_upgraded,Each turn[;] guarantee|something blue|(will be upgraded),1,,,,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Purple,Each turn[;] guarantee|something purple,1,,,,,PURPLE,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Purple_upgraded,Each turn[;] guarantee|something purple|(will be upgraded),1,,,,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Orange,Each turn[;] guarantee|something orange,1,,,,,ORANGE,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Orange_upgraded,Each turn[;] guarantee|something orange|(will be upgraded),1,,,,,ORANGE,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Yellow,Each turn[;] guarantee|something yellow,1,,,,,YELLOW,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Yellow_upgraded,Each turn[;] guarantee|something yellow|(will be upgraded),1,,,,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Green,Each turn[;] guarantee|something green,1,,,,,GREEN,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Green_upgraded,Each turn[;] guarantee|something green|(will be upgraded),1,,,,,GREEN,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Pink,Each turn[;] guarantee|something pink,1,,,,,PINK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Pink_upgraded,Each turn[;] guarantee|something pink|(will be upgraded),1,,,,,PINK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Gray,Each turn[;] guarantee|something gray,1,,,,,GRAY,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Gray_upgraded,Each turn[;] guarantee|something gray|(will be upgraded),1,,,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Weapon,Each turn[;] guarantee|a damaging item|of any size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Weapon_upgraded,Each turn[;] guarantee|a damaging item|of any size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Winter Wings_downgraded,Cost [mana]7: gain [dodge]2 dodge|(Start of turn: gain [mana]1),1,if(getstatusself(MANA) >= 7) { removestatusself(MANA[;]7); inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~No effect!~); },Quick Thinking,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,inflictself(MANA); sfx(~_mana~); e.animate(~flashandshake~);,,,,,,,
Endless Winter,In three turns[;] enemy gains|[ice]1 freeze each turn,1,jinx(~Endless Winter~[;]~gain [ice]1 freeze each turn~[;]~Gain [ice]1 freeze each turn~[;]~inflict(\~endlesswinterfreeze\~[;]%VAR%);~[;]target[;]self[;]3[;]1); sfx(~_thinghappens~);,Arctic Storm,ODD,,BLUE,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Endless Winter_upgraded,In two turns[;] enemy gains|[ice]1 freeze each turn,1,jinx(~Endless Winter+~[;]~gain [ice]1 freeze each turn~[;]~Gain [ice]1 freeze each turn~[;]~inflict(\~endlesswinterfreeze\~[;]%VAR%);~[;]target[;]self[;]2[;]1); sfx(~_thinghappens~);,Arctic Storm,ODD,,BLUE,,,,,0,NO,NO,,,,,,,,,,,,,
Equipment That Does Nothing,Equipment That Does Nothing,1,self.equipmentused--; self.equipmenthistory.pop();,Broken Gadget,NORMAL,,,,,,,0,YES,NO,excludefromrandomlists|cannotsteal|weakenavoid|shockavoid|altpoisonavoid|curseavoid|internal,,,,,,,,,,e.maintainfury = true; e.preventdefault = true;,,
A Flower,Each turn[;] guarantee|a mana generator|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Flower_upgraded,Each turn[;] guarantee|a mana generator|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Blade,Each turn[;] guarantee|a normal-slot weapon|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Blade_upgraded,Each turn[;] guarantee|a normal-slot weapon|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Wheel Of Fortune,Half enemy's max hp|Can't use limit break,2,var max = target.maxhp; target.maxhp -=target.maxhp/2; attack(max/2); sfx(~_magic~);,Catapult,REQUIRE6|REQUIRE6|REQUIRE6,,RED,change_power,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflictself(SILENCE); sfx(~_silence~);,,,,,,,
Wheel Of Fortune_upgraded,Half enemy's max hp|Can't use limit break,2,var max = target.maxhp; target.maxhp -=target.maxhp/2; attack(max); sfx(~_magic~);,Catapult,REQUIRE6|REQUIRE6,,RED,change_power,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflictself(SILENCE); sfx(~_silence~);,,,,,,,
Divine Ooze,Inflict [poison]1 poison|[gray](Reuseable),2,inflict(POISON); sfx(~_poison~);,Poison Arrow,COUNTDOWN,3,PURPLE,halfcountdown,removereusable,,,5,NO,NO,,,,,,,,,,,,,
Cape Deflect,Gain [shield]5 shield|On <var:number> gain [reduce]1 reduce|[80%]Slots change from EVEN & ODD,2,inflictself(SHIELD[;] 5); sfx(~_shield~); if(d == self.getvar(~number~)) { inflictself(REDUCE); },,NORMAL,,ORANGE,change_power,doublerequirements,,,0,YES,NO,,,,,,var oe = rand([~ODD~[;]~EVEN~]); e.changeslots([oe]); e.animate(~flashandshake~); if(oe == ~ODD~) { self.setvar(~number~[;]5); } else { self.setvar(~number~[;]6); },,,,,,,
Cape Deflect_upgraded,Gain [shield]5 shield|Gain [reduce]1 reduce|[80%]Slots change from EVEN & ODD,1,inflictself(SHIELD[;] 5); inflictself(REDUCE); sfx(~_shield~);,,NORMAL,,ORANGE,change_power,doublerequirements,,,0,YES,NO,,,,,,var oe = rand([~ODD~[;]~EVEN~]); e.changeslots([oe]); e.animate(~flashandshake~);,,,,,,,
A Bat,Each turn[;] guarantee|a [sword]<d6>+N-with-downside|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Bat_upgraded,Each turn[;] guarantee|a [sword]<d6>+N-with-downside|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Bonus,Each turn[;] guarantee|a passive item|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Bonus_upgraded,Each turn[;] guarantee|a passive item|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Priceless Heirloom,Do [sword]<d6>[;] untradeable|[gray](Reuseable),1,attack(d);,Steal,MAX3,,GRAY,increaserange,complicate,,,-1,NO,NO,excludefromrandomlists|cannotsteal|nonnegotiable,,,,,,,,,,,,
A Merry Christmas,Each turn[;] guarantee|a red or green item|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Merry Christmas_upgraded,Each turn[;] guarantee|a red or green item|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Dapper Snapper,Snap 2 items,2,inflictself(~ncr_snap~[;] 2); sfx(~_ladysnap~);,Time Stop,REQUIRE6,,RED,simplify,doublerequirements,,none,0,YES,NO,,,,,,,,,,,,,
Vacuum,Do [sword]<d6> damage[;]|[90%]On 3[;] drain [heart]4 health instead,1,if (d == 3) { drain(4); sfx(~_drain~); } else { attack(d); sfxdamage(target[;] d); },Blood Sip,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Vacuum_upgraded,Do [sword]<d6> damage[;]|[90%]On 4[;] drain [heart]5 health instead,1,if (d == 4) { drain(5); sfx(~_drain~); } else { attack(d); sfxdamage(target[;] d); },Blood Sip,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Vacuum_downgraded,Do [sword]<d6> damage[;]|[90%]On 2[;] drain [heart]3 health instead,1,if (d == 2) { drain(3); sfx(~_drain~); } else { attack(d); sfxdamage(target[;] d); },Blood Sip,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Goggles,Every turn gain [reduce]2 reduce,2,,Laser Eyes,,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(REDUCE[;] 2); sfx(~_shield~);,,,,,,,
Goggles_upgraded,Every turn gain [reduce]3 reduce,2,,Laser Eyes,,,ORANGE,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(REDUCE[;] 3); sfx(~_shield~);,,,,,,,
Goggles_downgraded,No effect|[80%][gray]''The goggles do nothing!''[],2,,Laser Eyes,,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Study,Gain 3 dice next turn|Lose 2 dice the turn after|1 turn cooldown,1,jinx(~Read Gain~[;]~Gain %VAR% dice~[;]~gain %VAR% dice~[;]~target.bonusdice+= 3; ~[;]self[;]self[;]1[;](3)); jinx(~Read Lose~[;]~Lose %VAR% dice~[;]~lose %VAR% dice~[;]~target.bonusdice-= 2; ~[;]self[;]self[;]2[;](2)); sfx(~_thinghappens~); e.availablenextturn = false;,Plexiglass,COUNTDOWN,12,PINK,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Rusty Wrench,Do [sword]<double> damage on odd|Do [sword]<d6> damage on even,2,if(d % 2 == 0) { attack(d); sfxdamage(target[;] d); } else ( attack(d * 2); sfxdamage(target[;] d * 2); },,MAX5,,,reducesize,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Bunker Buster,Do [sword]3[;] take [sword]1|Immune to errrors|[gray](Reuseable),1,attack(3); attackself(1); sfxdamage(target[;] 3); sfxdamage(self[;] 1);,,COUNTDOWN,4,,change_power,change_power,,,-1,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Bunker Buster_upgraded,Do [sword]5[;] take [sword]1|Immune to errrors|[gray](Reuseable),1,attack(5); attackself(1); sfxdamage(target[;] 3); sfxdamage(self[;] 1);,,COUNTDOWN,4,,,,,,-1,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Bunker Buster_downgraded,Do [sword]3[;] take [sword]3|Immune to errrors|[gray](Reuseable),1,attack(3); attackself(1); sfxdamage(target[;] 3); sfxdamage(self[;] 1);,,COUNTDOWN,4,,,,,,-1,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Encryption,Do [sword]<d6> damage|On 2[;] 12[;] 9[;] or 7[;] lock a dice,2,if(d == 2) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else if(d == 7) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else if(d == 9) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else if(d == 12) { inflict(LOCK); sfx(~_lock~); attack(d); sfxdamage(target[;] d); } else { attack(d); sfxdamage(target[;] d); },,NORMAL|NORMAL,,YELLOW,reducesize,complicate,,,0,NO,NO,,,,,,,,,,,,,
Dice Printer,Do [sword]<d6> dmg[;] return dice|Immune to errors,2,attack(d); sfxdamage(target[;] d); givedice(d);,,MAX5,,,reducesize,complicate,,,0,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Back Up Drive,On error[;] deal [sword]3 dmg,1,,,,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_error == true){ attack(4); sfxdamage(target[;] 4); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Back Up Drive_upgraded,On error[;] deal [sword]5 dmg,1,,,,,,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_error == true){ attack(6); sfxdamage(target[;] 6); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Back Up Drive_downgraded,On error[;] take [sword]3 dmg,1,,,,,,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_error == true){ attackself(4); sfxdamage(self[;] 4); e.doequipmentaction(self[;]self[;]1[;][][;]0[;]true); },,,,,,
Risky Bet,On jackpot[;] deal [sword]7 dmg|On error[;] take [sword]4 dmg,1,,,,,YELLOW,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_jackpot > 0){ attack(7); sfxdamage(target[;] 7); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); } else if (self.roll_error == true){ attackself(4); sfxdamage(target[;] 4); e.castdirection = -1; e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Risky Bet_upgraded,On jackpot[;] deal [sword]9 dmg|On error[;] take [sword]5 dmg,1,,,,,YELLOW,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_jackpot > 0){ attack(9); sfxdamage(target[;] 9); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); } else if (self.roll_error == true){ attackself(5); sfxdamage(target[;] 5); e.castdirection = -1; e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Risky Bet_downgraded,On jackpot[;] deal [sword]4 dmg|On error[;] take [sword]7 dmg,1,,,,,YELLOW,,,,,0,NO,NO,errorimmune|robotonly,,,,,,if (self.roll_jackpot > 0){ attack(4); sfxdamage(target[;] 4); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); } else if (self.roll_error == true){ attackself(7); sfxdamage(target[;] 7); e.castdirection = -1; e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); },,,,,,
Antivirus,Do [sword]<d6> damage[;]|on 6[;] set CPU to 3,2,if(d == 6) { self.roll_total = 3; }  attack(d); sfxdamage(target[;] d);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,robotonly,,,,,,,,,,,,
Antivirus_upgraded,Do [sword]<d6> damage[;]|on even[;] set CPU to 3,2,if(d % 2 == 0) { self.roll_total = 3; }  attack(d); sfxdamage(target[;] d);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Antivirus_downgraded,Do [sword]<d6> damage[;]|on 3[;] set CPU to 3,2,if(d == 3) { self.roll_total = 3; }  attack(d); sfxdamage(target[;] d);,,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Copy Machine,Duplicate a dice|30% chance to error an item,1,if(chance(30)) { inflictself(~ncr_error~); } givedice([d[;]d]);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Copy Machine_upgraded,Triplicate a dice|30% chance to error an item,1,if(chance(30)) { inflictself(~ncr_error~); } givedice([d[;]d[;]d]);,,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Copy Machine_downgraded,Duplicate a dice|60% chance to error an item,1,if(chance(60)) { inflictself(~ncr_error~); } givedice([d[;]d]);,,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
The Deal Offer,On jackpot: Do [sword]<double> dmg|On error: Heal [heal]<d6> hp|On neither: Do [sword]<d6> dmg,2,if (self.roll_jackpot > 0){ attack(d * 2); sfxdamage(target[;] d * 2); } else if (self.roll_error == true){ attackself(-d); sfx(~_heal~); } else { attack(d); sfxdamage(target[;] d); },,MAX5,,RED,simplify,complicate,,,0,NO,NO,errorimmune|robotonly,,,,e.changecolour(~RED~); e.castdirection = 1;,,if (self.roll_jackpot > 0){ e.changecolour(~YELLOW~); } else if (self.roll_error == true){ e.changecolour(~GRAY~); e.castdirection = -1; },,,,,,
Cooling Dagger,Do [sword]<d6> damage CPU -1|[gray](Reuseable),1,attack(d); sfxdamage(target[;] d); adjustrobotcounter(-1);,,MAX3,,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,robotonly,,,,,,,,,,,,
Cooling Dagger_upgraded,Do [sword]<d6> damage CPU -2|[gray](Reuseable),1,attack(d); sfxdamage(target[;] d); adjustrobotcounter(-2);,,MAX3,,BRIGHTCYAN,,,,,-1,NO,NO,robotonly,,,,,,,,,,,,
Cooling Dagger_downgraded,Do [sword]<d6> damage CPU -1,1,attack(d); sfxdamage(target[;] d); adjustrobotcounter(-1);,,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Binary Code,Do [sword]10 damage,2,attack(10); sfxdamage(target[;] 10);,,COMBINATION,,RED,change_power,noeffect,,,0,NO,NO,combination:htht|excludefromrandomlists,,,,,,,,,,,,
Binary Code_upgraded,Do [sword]10 damage,2,attack(10); sfxdamage(target[;] 10);,,COMBINATION,,RED,,,,,0,NO,NO,combination:777|excludefromrandomlists,,,,,,,,,,,,
Password,Do [sword]7[;] + rand status|[gray](Reuseable),1,attack(7); sfxdamage(target[;] 7); inflict(rand(loadtext(~christmasspecial/roborandomeffects~))); sfx(~_thinghappens~);,,COMBINATION,,RED,change_power,noeffect,,,-1,NO,NO,combination:123,,,,,,,,,,,,
Password_upgraded,Do [sword]7[;] + 2 rand statuses|[gray](Reuseable),1,attack(7); sfxdamage(target[;] 7); inflict(rand(loadtext(~christmasspecial/roborandomeffects~))); inflict(rand(loadtext(~christmasspecial/roborandomeffects~))); sfx(~_thinghappens~);,,COMBINATION,,RED,,,,,-1,NO,NO,combination:123,,,,,,,,,,,,
Scrap Ooze,Inflict [poison]1 poison|(Always offered as scrap),1,inflict(POISON); sfx(~_poison~);,Anthrax,NORMAL,,,change_power,complicate,,,2,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Ooze_upgraded,Inflict [poison]3 poison|(Always offered as scrap),1,inflict(POISON[;] 3); sfx(~_poison~);,Anthrax,NORMAL,,,change_power,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Heater,Weaken all enemy [ice] items|(Always offered as scrap),1,inflict(~heater~); sfx(~_ice~); sfx(~_weaken~);,Heat,NORMAL,,,change_power,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Heater_upgraded,[90%]Weaken all enemy [blue]cyan items|(Always offered as scrap),1,inflict(~heater+~); sfx(~_ice~); sfx(~_weaken~);,Heat,NORMAL,,,,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Sleet,Inflict [shiver]2 slush|(Always offered as scrap),1,inflict(~Slush~[;]2); sfx(~_ice~);,Slushie,ODD,,,simplify,complicate,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Booby Trap,If enemy has this item|[85%]they take 5 dmg until discarded,1,,Pea Gun,,,GREEN,change_power,noeffect,,,0,NO,NO,weakenavoid|weakenimmune|excludefromrandomlists,,,,,if(self.isplayer) { e.changecolour(~GREEN~); } else { e.changecolour(~RED~); e.animate(~flashandshake~); attackself(5); sfxdamage(self[;] 5); },,,,,,,
Booby Trap_upgraded,If enemy has this item|[85%]they take 7 dmg until discarded,1,,,,,GREEN,,,,,0,NO,NO,weakenavoid|weakenimmune|excludefromrandomlists,,,,,if(self.isplayer) { e.changecolour(~GREEN~); } else { e.changecolour(~RED~); e.animate(~flashandshake~); attackself(7); sfxdamage(self[;] 7); },,,,,,,
Booby Trap_downgraded,If player has this item|[85%]they take 5 dmg until discarded,1,,Pea Gun,,,GREEN,change_power,change_power,,,0,NO,NO,weakenavoid|weakenimmune|excludefromrandomlists,,,,,if(self.isplayer) { e.changecolour(~RED~); e.animate(~flashandshake~); attackself(5); sfxdamage(self[;] 5); } else { e.changecolour(~GREEN~); },,,,,,,
Mouse Trap,Do [sword]<double> damage|No effect for enemy,1,if(self.isplayer) { attack(d * 2); sfxdamage(target[;] d * 2); } else { self.textparticle(~No effect!~); },,MAX3,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,if(self.isplayer) { e.changecolour(~RED~); e.changeslots([~MAX3~]); } else { e.changecolour(~GRAY~); e.animate(~flashandshake~); e.changeslots([]); },,,,,,,
Mouse Trap_upgraded,Do [sword]<double> damage|[90%]On enemy they take [sword]<d6> dmg,1,if(self.isplayer) { attack(d * 2); sfxdamage(target[;] d * 2); } else { bonus(d * 200); /*based on the metric of enemy gaining 100 points per damage dealt*/ attackself(d); sfxdamage(self[;] d); },,MAX3,,RED,,,,,0,NO,NO,,,,,,if(self.isplayer) { e.changecolour(~RED~); e.changeslots([~MAX3~]); } else { e.changecolour(~GRAY~); e.animate(~flashandshake~); e.castdirection = -1; },,,,,,,
Mouse Trap_downgraded,Do [sword]<d6> damage|[90%]On enemy they take [sword]<d6> dmg,1,if(self.isplayer) { attack(d); sfxdamage(target[;] d); } else { attackself(d); sfxdamage(self[;] d); },,MAX3,,RED,,,,,0,NO,NO,,,,,,if(self.isplayer) { e.changecolour(~RED~); e.changeslots([~MAX3~]); } else { e.changecolour(~GRAY~); e.animate(~flashandshake~); e.castdirection = -1; },,,,,,,
Tennis Racket,Do [sword]<d6> dmg[;] on 6[;]|reverse next enemy move,2,attack(d); if(d == 6) { inflict(~reversenexttarget~); } sfxdamage(target[;] d);,Disorient,NORMAL,,YELLOW,reducesize,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tennis Racket_downgraded,Do [sword]<d6> dmg[;] on 3[;]|reverse next enemy move,2,attack(d); if(d == 3) { inflict(~reversenexttarget~); } sfxdamage(target[;] d);,,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Tennis Racket_weakened,Do [sword]<d6> dmg[;] on 3[;]|reverse next enemy move,2,attack(d); if(d == 3) { inflict(~reversenexttarget~); } sfxdamage(target[;] d);,,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Greedy Crowbar,Reduce countdowns by <d6>|Enemy can't steal this,1,boostcountdowns(d);,Accelerate,NORMAL,,YELLOW,change_power,complicate,,,0,YES,NO,cannotsteal|excludefromrandomlists,1,,,,,,,,,,,
Greedy Crowbar_upgraded,Reduce countdowns by <d6>|Enemy can't steal this|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,NORMAL,,YELLOW,,,,,2,YES,NO,cannotsteal|excludefromrandomlists,,,,,,,,,,,,
A Spell,Each turn[;] guarantee|a valid Witch spell|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Spell_upgraded,Each turn[;] guarantee|a valid Witch spell|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Warm,Each turn[;] guarantee|something red[;]|orange[;] or yellow|of this size,1,,,,,RED,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Warm_upgraded,Each turn[;] guarantee|something red[;]|orange[;] or yellow|(will be upgraded),1,,,,,RED,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Cold,Each turn[;] guarantee|something blue[;]|purple[;] or green|of this size,1,,,,,BRIGHTCYAN,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Cold_upgraded,Each turn[;] guarantee|something blue[;]|purple[;] or green|of this size|(will be upgraded),1,,,,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Large,Each turn[;] guarantee an|item with 2 or more slots|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Something Large_upgraded,Each turn[;] guarantee an|item with 2 or more slots|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Finale,Each turn[;] guarantee|a Finale card|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Finale_upgraded,Each turn[;] guarantee|a Finale card|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Scrap,Each turn[;] guarantee|a scrap item|of this size,1,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Scrap_upgraded,Each turn[;] guarantee|a scrap item|of this size|(will be upgraded),1,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Shield,Each turn[;] guarantee|a shielding item|of this size,2,,,,,BLACK,change_power,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
A Shield_upgraded,Each turn[;] guarantee|a shielding item|of this size|(will be upgraded),2,,,,,BLACK,,,,,0,NO,NO,excludefromrandomlists|themecard,,,,,,,,,,,,
Gadget Smash,Break a gadget|Do [sword]9 damage|[gray](Errors after 2nd turn),1,Gadget.changegadget(self[;] Gadget.getcurrentgadget(self)[;] ~Broken Gadget[][]~); attack(9); sfxdamage(target[;] 9); screenshake(); sfx(~jester_delete~);,Perfect Cut,COUNTDOWN,14,PINK,halfcountdown,noeffect,,,0,NO,YES,cannotsteal|excludefromrandomlists,,,,,if(turn > 2){ roboterror(self[;][e]); };,,,,,,,
Sticker,Combine dice|[gray](Reuseable),1,givedice((d)[;]~combinedice~);,Magic Spanner,MAX2|MAX2,,RED,increaserange,removereusable,,,3,YES,NO,,,,,,,,,,,,,
Earth Shield,Add [shield]<d6> shield[comma]|[weaken]Weakens enemy on 3,1,if(d == 3){ inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2); } inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(d == 3){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Earth Shield_upgraded,Add [shield]<d6> shield[comma]|[weaken]Weakens enemy on 4,1,if(d == 4){ inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2); } inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,Protection,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,if(d == 4){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Earth Shield_downgraded,Add [shield]<d6> shield,1,inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Thorn Blockade,Add [shield]<d6> shield[comma]|gain [thorns]1 thorn,1,inflictself(THORNS); sfx(~_thorns~[;]~~[;]0.2); inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,Protection,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,,,,,,,,,,,,
Thorn Blockade_downgraded,Add [shield]<d6> shield,1,inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,Protection,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,,,,,,,,,,,,
Small Helmet,Add [shield]<d6> shield[comma]|on 1[comma] reduce [reduce]1 instead,1,if(d == 1){ inflictself(REDUCE); } else { inflictself(SHIELD[;] d); }sfx(~_shield~[;]~~[;]0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Small Helmet_upgraded,Add [shield]<d6> shield[comma]|on 2 or less[comma] reduce [reduce]1 instead,1,if(d <= 2){ inflictself(REDUCE); } else { inflictself(SHIELD[;] d); }sfx(~_shield~[;]~~[;]0.2);,Protection,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Small Helmet_downgraded,Add [shield]<d6> shield,1,inflictself(SHIELD[;] d); sfx(~_shield~[;]~~[;]0.2);,Protection,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Syringe,Take [sword]<d6> damage[comma]|then restore [heal]<double> health,1,attackself(d); attackself(-d*2); sfxdamage(self[;]d); sfx(~_heal~[;]~~[;]0.2);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Syringe_upgraded,Do [sword]<d6> to everyone[comma]|then restore [heal]<double> health,1,attackself(d); attackself(-d*2); sfxdamage(target[;]d); sfxdamage(self[;]d); sfx(~_heal~[;]~~[;]0.2);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Syringe_downgraded,Take [sword]<d6> damage[comma]|then restore [heal]<d6> health,1,attackself(d); attackself(-d); sfxdamage(self[;]d); sfx(~_heal~[;]~~[;]0.2);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Forefront,Lose [heart]<d6> health[comma]|add [shield]<double> shield,1,pierceattackself(d); inflictself(SHIELD[;]d*2); sfx(~_shield~[;]~~[;]0.2); sfx(~_heal~[;]~~[;]0.2);,Regenerate,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Forefront_downgraded,Lose [heart]<d6> health[comma]|add [shield]<d6> shield,1,pierceattackself(d); inflictself(SHIELD[;]d); sfx(~_shield~[;]~~[;]0.2); sfx(~_heal~[;]~~[;]0.2);,Regenerate,MAX3,,ORANGE,increaserange,change_power,,,0,YES,NO,,,,,,,,,,,,,
Skewer,Add [thorns]1 thorn[comma]|flip a dice on its side,1,inflictself(THORNS); sfx(~_thorns~[;]~~[;]0.2); var returnval = [1[;]2[;]3[;]4[;]5[;]6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval));,Random Roll,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,,1,,,,,,,,,,,
Skewer_upgraded,Add [thorns]1[comma] flip on its side|[gray](Reuseable),1,inflictself(THORNS); sfx(~_thorns~[;]~~[;]0.2); var returnval = [1[;]2[;]3[;]4[;]5[;]6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval));,Random Roll,NORMAL,,GREEN,change_power,change_function,,,2,YES,NO,,,,,,,,,,,,,
Skewer_downgraded,Flip a dice on its side,1,var returnval = [1[;]2[;]3[;]4[;]5[;]6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval));,Random Roll,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,,,,,,,,,,,,,
Sand Cauldron,Burn [fire]1 dice[comma]|roll a two,1,inflict(FIRE); sfx(~_fire~[;]~~[;]0.2); givedice(2);,Ember,NORMAL,,RED,change_power,change_function,,,0,NO,NO,,1,,,,,,,,,,,
Sand Cauldron_upgraded,Burn [fire]1 dice[comma] roll a two|[gray](Reuseable),1,inflict(FIRE); sfx(~_fire~[;]~~[;]0.2); givedice(2);,Ember,NORMAL,,RED,change_power,change_function,,,2,NO,NO,,,,,,,,,,,,,
Sand Cauldron_downgraded,Burn [fire]1 dice,1,inflict(FIRE); sfx(~_fire~[;]~~[;]0.2);,Ember,NORMAL,,RED,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Fiasco,Inflict [poison] poison[comma]|[lock] lock and [weaken] weaken,1,sfx(~_magic~[;]~~[;]0); inflict(POISON); inflict(LOCK); inflict(WEAKEN);,Overload,COUNTDOWN,7,PURPLE,change_power,change_function,,,0,NO,NO,,1,,,,,,,,,,,
Fiasco_upgraded,Inflict [poison]2 poison[comma]|[lock]2 lock and [weaken]2 weaken,1,inflict(POISON[;]2); inflict(LOCK[;]2); inflict(WEAKEN[;]2);,Overload,COUNTDOWN,7,PURPLE,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Fiasco_downgraded,Inflict [poison] poison[comma]|[lock] lock or [weaken] weaken,1,inflict(rand([POISON[;]LOCK[;]WEAKEN])); sfx(~_magic~[;]~~[;]0);,Overload,COUNTDOWN,7,PURPLE,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Weird Flame,6-4: [vanish]1 fade|3-1: [fire]1 burn,1,if(d >= 4){ inflict(~fade~[;] 1); sfx(~_vanish~[;]~~[;]0.2); } else { inflict(FIRE[;] 1); sfx(~_fire~[;]~~[;]0.2); },Hellfire,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Weird Flame_upgraded,6-4: [vanish]2 fade|3-1: [fire]2 burn,1,if(d >= 4){ inflict(~fade~[;] 2); sfx(~_vanish~[;]~~[;]0.2); } else { inflict(FIRE[;] 2); sfx(~_fire~[;]~~[;]0.2); },Hellfire,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Flame_downgraded,4: [vanish]1 fade|3: [fire]1 burn,1,if(d == 4){ inflict(~fade~[;] 1); sfx(~_vanish~[;]~~[;]0.2); } else { inflict(FIRE[;] 1); sfx(~_fire~[;]~~[;]0.2); },Hellfire,RANGE34,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Magic Axe,Do [sword]8 damage,1,sfx(~_magic~); attack(8); sfxdamage(target[;]8);,Overload,COUNTDOWN,8,PINK,change_power,change_function,,,0,NO,NO,,1,,,,,,,,,,,
Magic Axe_upgraded,Do [sword]8 damage[comma]|reduce countdowns by 4,1,sfx(~_magic~); attack(8); sfxdamage(target[;]4); boostcountdowns(4);,Overload,COUNTDOWN,8,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Magic Axe_downgraded,Do [sword]4 damage,1,sfx(~_magic~); attack(4); sfxdamage(target[;]4);,Overload,COUNTDOWN,8,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Sheer Wall,Inflict [vanish]Vanish,1,sfx(~_magic~); inflict(VANISH); sfx(~_blind~[;]~~[;]0.2);,Overload,REQUIRE6,,PINK,simplify,doublerequirements,,,0,NO,NO,,2,,,,,,,,,,,
Half Moon Cauldron,Set a random dice to 6,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 6){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(6[;] self.screenposition()); sfx(~diceroll~); } },Reversal,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,fd,1,,,,,,,,,,,
Sponge@sizesmall,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Sponge~[;] true[;] false[;] e);,,,,,,,,,
Sponge,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_upgraded,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Sponge+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_upgraded,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_weakened,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Sponge+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_weakened,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tableful,At the start of the second|turn[;] everyone heals [heart]4 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-4); attack(-4); sfx(~_heal~); },,,,,,,
Tableful_upgraded,At the start of the second|turn[;] everyone heals [heart]6 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-6); attack(-6); sfx(~_heal~); },,,,,,,
Tableful_downgraded,At the start of the second|turn[;] everyone heals [heart]2 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-2); attack(-2); sfx(~_heal~); },,,,,,,
Christmas Bell,-1 to dice value|(Cost [mana]1[]: roll a one),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BLUE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Christmas Bell_downgraded,-1 to dice value,1,givedice(d - 1);,Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Christmas Bell_upgraded,-1 to dice value|(Cost [mana]1[]: also duplicate),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]d - 1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Coffee Pot,Do [sword]1 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(1); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,1,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_upgraded,Do [sword]2 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(2); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_downgraded,Do [sword]1 damage[comma]|roll a new dice,1,attack(1); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,,,,,,,,,,,,
Petri Dish,Do [sword]3 damage[;] copy|Petri Dish after the battle,1,attack(3); sfxdamage(target[;]3);,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_upgraded,Do [sword]3 damage[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,attack(3); sfxdamage(target[;]3);,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Petri Dish_downgraded,No effect[;] copy|Petri Dish after the battle,1,,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_weakened,No effect[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,,Stardust,COUNTDOWN,6,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Creative Crisis,[95%]Create no gadgets this fight[newline][95%]Current gadgets still break,1,if(!simulation){ inflictself(~creativecrisis~); screenshake(); sfx(~upgradeequipment~); e.destroydice(); } /*e.changeslots([]); e.fulldescription = ~[95%]Create no gadgets this fight[newline][95%]Current gadgets still break[newline][gray](activated)~; }*/ /*var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } }*/,Randomizer,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,YES,combination:hhhh|cannotsteal|excludefromrandomlists|cannotreuse,,Rules.inventor_inspiration = true;,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Creative Crisis_downgraded,No effect,1,,Randomizer,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:hhhh|cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Consumerism,[95%]Create an additional gadget|[95%]after this fight (stacks),1,inflictself(~consumerism~); screenshake(); sfx(~upgradeequipment~); self.setvar(~consumerismused~[;]2 + getstatusself(~consumerism~)); self.setvar(~consumerismusedever~[;]true);,Perfect Cut,COMBINATION,,PINK,change_power,noeffect,,,0,YES,NO,combination:ttt|cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Consumerism_upgraded,[95%]Create an additional gadget|[95%]after this fight (stacks),1,inflictself(~consumerism~); screenshake(); sfx(~upgradeequipment~); self.setvar(~consumerismused~[;]2 + getstatusself(~consumerism~)); self.setvar(~consumerismusedever~[;]true);,Perfect Cut,COMBINATION,,PINK,change_power,noeffect,,,0,YES,NO,combination:tt|cannotsteal|excludefromrandomlists,,,,,,,,,,,,
Creative Crisis_upgraded,[95%]Create no gadgets this fight[newline][95%]Current gadgets still break,1,if(!simulation){ inflictself(~creativecrisis~); screenshake(); sfx(~upgradeequipment~); e.destroydice(); } /*e.changeslots([]); e.fulldescription = ~[95%]Create no gadgets this fight[newline][95%]Current gadgets still break[newline][gray](activated)~; }*/ /*var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } }*/,Randomizer,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,YES,combination:hhh|cannotsteal|excludefromrandomlists|cannotreuse,,Rules.inventor_inspiration = true;,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Renunciation,You can't roll <d6>|this fight,1,var totalamount  = 0; for(a in 1...7) { if(getstatusself(~never~ +a) > 0) { totalamount += 1; } } if(totalamount < 6) { inflictself(~never~ +d); sfx(~magic_gaindice~[;]~~[;]0.2); } else { self.textparticle(~No effect!~); },Infinity Mirror,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
broken upgrade tester,don't mind me,1,/*by diane*/,,,,,,,,,0,NO,NO,excludefromrandomlists,,,,var alleqever = getequipmentlist(null[;] [][;] []); shuffle(alleqever); while(alleqever.length > 0) { var testeq = new elements.Equipment(alleqever.pop()); var testeqname = testeq.name; trace(testeqname); if(testeq.upgradetype != ~~) { testeq = new elements.Equipment(testeq.name + ~+~); } if(testeq == null) { trace(~==========found a null upgrade: ~  + testeqname +  ~===========~); } } /*in practice the 'found a null upgrade!' trace part does nothing because the game crashes before this upon trying to create the invalid equipment*/,,,,,,,,
broken downgrade tester,don't mind me,1,/*by diane - this one actually came first (and is probably the one that actually works); and was most relevant as warrior; who can get any equipment not marked excludefromrandomlists or fooonly*/,,,,,,,,,0,NO,NO,excludefromrandomlists,,,,var alleqever = getequipmentlist(null[;] [][;] []); shuffle(alleqever); while(alleqever.length > 0) { var testeq = new elements.Equipment(alleqever.pop()); var testeqname = testeq.name; trace(testeqname); if(testeq.weakentype != ~~) { testeq = new elements.Equipment(testeq.name + ~-~); } if(testeq == null) { trace(~==========found a null downgrade: ~  + testeqname +  ~===========~); } },,,,,,,,
Diary Burning,Consume spell in slot <slotdoubles>|to do [fire]16 damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(16[;]FIRE); sfxdamage(target[;]16); sfx(~_fire~[;]~~[;]0.2); Spellbook.erase(d); },,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|witchonly,1,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Diary Burning_upgraded,Consume spell in slot <d6>|to do [fire]16 damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(16[;]FIRE); sfxdamage(target[;]16); sfx(~_fire~[;]~~[;]0.2); Spellbook.erase(d); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Diary Burning_downgraded,Consume spell in slot <slotdoubles>|to do [sword]12 damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(12); sfxdamage(target[;]12); Spellbook.erase(d); },,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,if(!Spellbook.isempty(d)) { Spellbook.erase(d); }
Shadow Clone,Duplicate all dice[comma]|lose [heart]1 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){ pierceattackself(dicelist.length); sfx(~_curse~); sfx(~diceroll~); givedice(dicelist); },Clone Device,COMBINATION,,PURPLE,change_power,change_power,,,0,YES,NO,combination:ththth,2,,,,,,,,,,,
Shadow Clone_upgraded,Duplicate all dice[comma]|lose [heart]1 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){ pierceattackself(dicelist.length); sfx(~_curse~); sfx(~diceroll~); givedice(dicelist); },Clone Device,COMBINATION,,PURPLE,,,,,0,YES,NO,combination:thth,,,,,,,,,,,,
Shadow Clone_downgraded,Duplicate all dice[comma]|lose [heart]2 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){ pierceattackself(dicelist.length * 2); sfx(~_curse~); sfx(~diceroll~); givedice(dicelist); },Clone Device,COMBINATION,,PURPLE,,,,,0,YES,NO,combination:ththth,,,,,,,,,,,,
Shadow Clone_weakened,Duplicate all dice[comma]|lose [heart]2 per each,1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } if(dicelist.length > 0){ pierceattackself(dicelist.length * 2); sfx(~_curse~); sfx(~diceroll~); givedice(dicelist); },Clone Device,COMBINATION,,PURPLE,,,,,0,YES,NO,combination:thth,,,,,,,,,,,,
Blighted Zap@LL,Do [sword]<d6> Damage|Inflict [vanish][purple]Blighted|[gray](Reuseable),2,attack(d); sfxdamage(target[;] d); sfx(~_vanish~); inflict(~Blighted~);,Oh No!,EVEN,,PURPLE,simplify,complicate,,,2,NO,NO,,,,,,,,,,,,,
Wheel Spin,Do [sword]9 damage|25% chance to do [sword]25 dmg,2,if (chance(25)) { attack(25); sfxdamage(target[;] 25); } else { attack(9); sfxdamage(target[;] 9); },,REQUIRE6|REQUIRE6,,RED,simplify,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Lie,Do [sword]3 damage|40% chance to lock a dice,1,attack(3); sfxdamage(target[;] 3); if(chance(40)) { inflict(LOCK); sfx(~_lock~); },,COUNTDOWN,3,,halfcountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Lie_downgraded,Do [sword]2 damage|20% chance to lock a dice,1,attack(2); sfxdamage(target[;] 2); if(chance(20)) { inflict(LOCK); sfx(~_lock~); },,COUNTDOWN,3,,,,,,0,NO,NO,,,,,,,,,,,,,
Frozen Touch,Do [ice]<d6> damage,2,attack(d[;] ICE); sfxdamage(target[;] d);,,ODD,,BRIGHTCYAN,add2,complicate,,,0,NO,NO,,,,,,,,,,,,,
White Christmas,Freeze a dice|[gray](Reuseable),1,inflict(ICE); sfx(~_ice~);,,MAX4,,BRIGHTCYAN,simplify,complicate,,,2,NO,NO,,,,,,,,,,,,,
Swap Out,Switch to another Miser,1,if(!simulation) { bonus(1000000000); if(self.name == ~Snow Miser~){ reunion_transform(self[;]~Heat Miser~[;]true); } else if(self.name == ~Heat Miser~){ reunion_transform(self[;]~Snow Miser~[;]true); } },,COUNTDOWN,4,PINK,halfcountdown,noeffect,,,0,YES,NO,cannotsteal,,,,,,,,,,,,
Scorching Blast,Do [fire]8 damage,2,attack(8[;] FIRE); sfxdamage(target[;] 8);,,REQUIRE6,,RED,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Scorching Blast_upgraded,Do [fire]8 damage,2,attack(8[;] FIRE); sfxdamage(target[;] 8);,,MIN5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Hot Headed,[90%]Do [fire]<d6> damage[;] Burn a dice|[gray](Reuseable),1,attack(d[;] FIRE); sfxdamage(target[;] d); inflict(FIRE);,,MAX3,,RED,increaserange,decreaserange,,,2,NO,NO,,,,,,,,,,,,,
Fairy Lights,Get 3x[dice]1s next turn,1,inflictself(~stash1~[;]3); inflictself(~illuminate~); sfx(~_thinghappens~);,Very Unlucky Roll,MIN4,,YELLOW,increaserange,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Basic Baritone,Do [sword]<d6> damage[;]|When used twice gain|[yellownote]yellow_note|Current uses:<var:basic>,2,attack(d); sfxdamage(target[;] d); if(self.getvar(~basic~) == 1){ inflictself(~yellownote~); self.setvar(~basic~[;] 0); } self.setvar(~basic~[;] self.getvar(~basic~) + 1);,,MAX5,,,change_power,decreaserange,,,0,NO,NO,,,self.setvar(~basic~[;] 0);,self.setvar(~basic~[;] 0);,,,,,,,,,
Basic Baritone_upgraded,Do [sword]<d6> damage[;]|On even turns gain [yellownote]|On odd turns remove [yellownote],2,attack(d); sfxdamage(target[;] d); if(turn % 2){ removestatusself(~yellownote~); } else { inflictself(~yellownote~); },,MAX5,,,,,,,0,NO,NO,,,,,,,,,,,,,
Soft Palette,Gain [greennote]Green_Note|If you have 2 green notes|removes all green notes,2,inflictself(~greennote~); sfx(~_cure~); if(getstatusself(~greennote~) >= 2){ removestatusself(~greennote~); },,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Soft Palette_upgraded,Gain [greennote]Green_Note|If you have 2 green notes|removes all green notes,2,inflictself(~greennote~); sfx(~_cure~); if(getstatusself(~greennote~) >= 2){ removestatusself(~greennote~); },,COUNTDOWN,6,GREEN,,change_power,,,0,YES,NO,,,,,,,,,,,,,
Soft Palette_downgraded,Gain [greennote]Green_Note,2,inflictself(~greennote~); sfx(~_cure~);,,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sharp Palette,Gain [orangenote]Orange_Note|If weakened removes all [orangenote],2,inflictself(~orangenote~); sfx(~_weaken~);,,MIN3|MAX3,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sharp Palette_downgraded,If weakened removes all [orangenote],2,removestatusself(~orangenote~);,,MIN3|MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Defective Calculator,Calculate,2,,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|curseavoid|powercard|errorimmune,,,, self.setvar(~rollhistory~|[]); self.setvar(~survivalhistory~|[]); self.setvar(~errorsthisturnx2~|0); self.setvar(~errorsthisturnx2+2~|2); ,runscript(~christmasspecial/robot/defectivecalculatoronstartturn~|[self|e]);,,runscript(~christmasspecial/robot/defectivecalculatoroncountdownreduce~|[self]),,runscript(~christmasspecial/robot/defectivecalculatorrolldice~|[self|e]); if (e.show) {runscript(~christmasspecial/robot/defectivecalculatornoanimationreusable~|[self|e]);},,,
Defective Dice Display,,2,,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|curseavoid|errorimmune,,,,,,e.fulldescription = ~Dice: ~ + self.getvar(~rollhistory~).length + ~ / ~ + self.getvar(~numrolls~);,,,,,,
Defective Display,,2,,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|curseavoid|errorimmune,,,,,,,,,,,,
Defective Chance Display,,2,,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|curseavoid|errorimmune,,,,,,e.fulldescription = ~Error Chance: ~ + self.getvar(~errorchance~) + ~%~;,,,,,,
Defective Roll History Display,,2,,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|curseavoid|errorimmune,,,,,,var res = ~~; var rollhistory = self.getvar(~rollhistory~); for(i in 0...4) {var pos = i * 2 + e.getvar(~stride~); if (pos < rollhistory.length) res += rollhistory[pos]; res += ~[newline]~;} var pos = 4 * 2 + e.getvar(~stride~); if (pos < rollhistory.length) res += rollhistory[pos]; e.fulldescription = res;,,,,,,
Defective Survival History Display,,2,,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|curseavoid|errorimmune,,,,,,var res = ~~; var survivalhistory = self.getvar(~survivalhistory~); for(i in 0...4) {var pos = i * 2 + e.getvar(~stride~); if (pos < survivalhistory.length) res += survivalhistory[pos] ? ~[heart]~:~[curse]~; res += ~[newline]~;} var pos = 4 * 2 + e.getvar(~stride~); if (pos < survivalhistory.length) res += survivalhistory[pos] ? ~[heart]~:~[curse]~; e.fulldescription = res;,,,,,,
Reverse Calculations,Do [sword]<d6> +7 damage,1,attack(d + 7); sfxdamage(target[;] d + 7);,,MAX3,,,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Reverse Calculations_upgraded,Do [sword]<d6> +8 damage,1,attack(d + 8); sfxdamage(target[;] d + 8);,,MAX3,,,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Reverse Calculations_downgraded,Do [sword]<d6> +5 damage,1,attack(d+5); sfxdamage(target[;] d+5);,,MAX3,,,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Target,Take [sword]<d6> damage,1,attackself(d); sfxdamage(self[;] d);,,NORMAL,,,change_power,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Target_upgraded,Take [sword]<d6> damage,1,attackself(d); sfxdamage(self[;] d);,,NORMAL|NORMAL,,,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Nerfed Gun,Do [sword]<d6> -7 damage,2,attack(d - 7); sfxdamage(target[;] d - 7);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nerfed Gun_upgraded,Do [sword]<d6> -5 damage,2,attack(d - 5); sfxdamage(target[;] d - 5);,,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nerfed Gun_downgraded,Do [sword]<d6> -9 damage,2,attack(d - 9); sfxdamage(target[;] d - 9);,,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Multiply,Multiply your dice by 1.5|Do <var:less> less damage next turn,1,givedice([d * 1.5]); jinx(~Multiply~[;]~Do [sword]%VAR% less damage~[;]~Do [sword]%VAR% less damage~[;]~inflict(\~Powerdown\~[;] %VAR%); sfx(\~_curse\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]self.getvar(~less~)); sfx(~_thinghappens~); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); self.setvar(~less~[;] self.getvar(~less~) * 2);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists|robotonly,,self.setvar(~less~[;] 1);,self.setvar(~less~[;] 1);,,,,,,,,,
Bump@robot,Dice value +1,1,givedice([d + 1]);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Bump@robot_upgraded,Dice value +1|[gray](Reuseable),1,givedice([d + 1]);,,NORMAL,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Nudge@robot,Dice value -1,1,givedice([d - 1]);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Nudge@robot_upgraded,Dice value -1|[gray](Reuseable),1,givedice([d - 1]);,,NORMAL,,GREEN,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Probablity Question,[90%]Bump or Nudge a dice(random)|a random value 1-6,1,var type = rand([~nudge~[;]~bump~]); var number = rand([1[;]2[;]3[;]4[;]5[;]6]); if(type = ~nudge~){ givedice([d - number]); } else { givedice([d + number]); },,NORMAL,,YELLOW,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Probablity Question_upgraded,[90%]Bump or Nudge a dice(random)|a random value 1-10,1,var type = rand([~nudge~[;]~bump~]); var number = rand([1[;]2[;]3[;]4[;]5[;]6[;]7[;]8[;]9[;]10]); if(type = ~nudge~){ givedice([d - number]); } else { givedice([d + number]); },,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Practical Reset,Roll a new dice|(-6 to 12),1,var rolls = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,NORMAL,,PINK,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Practical Reset_upgraded,Roll a new dice|[gray](Reuseable),1,var rolls = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,NORMAL,,PINK,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Raw Damage Output,Do [sword]<d6> damage|[gray](Once per battle),2,attack(d); sfxdamage(target[;] d);,,NORMAL,,RED,change_power,changetotal9,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Raw Damage Output_upgraded,Do [sword]<d6> damage|[gray](Once per battle),1,attack(d); sfxdamage(target[;] d);,,NORMAL,,RED,,changetotal9,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Raw Damage Output_weakened,Do [sword]<d6> damage|[gray](Once per battle),2,attack(d); sfxdamage(target[;] d);,,NORMAL,,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Terminal Illness,Inflict <d6>[poison] poison|Only if dice is negative|Cooldown of 1 turn,2,if(d < 0){ inflict(POISON[;] -d); sfx(~_poison~); } else { self.textparticle(~Not Negative!~); } e.setvar(~cooldown~[;]1);,,NORMAL,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Terminal Illness_upgraded,Inflict <d6>[poison] poison|[80%]Only if dice is negative|[80%]Cooldown of 1 turn,1,if(d < 0){ inflict(POISON[;] -d); sfx(~_poison~); } else { self.textparticle(~Not Negative!~); } e.setvar(~cooldown~[;]1); ,,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,e.setvar(~cooldown~[;]0);,e.setvar(~cooldown~[;]0);,if(e.getvar(~cooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Available in ~ + e.getvar(~cooldown~) + ~ turn.~]; e.setvar(~cooldown~[;]e.getvar(~cooldown~) - 1); },,,,,,,,
Perfected Dice,Gain a 25 and 0|[90%]Countdown resets each turn|[gray](Once per battle),2,givedice([25[;] 0]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,COUNTDOWN,50,GREEN,change_power,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,,,,e.remainingcountdown = 50;,,,,
Perfected Dice_upgraded,Gain a 25 and 0|[gray](Once per battle),2,givedice([25[;] 0]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,COUNTDOWN,50,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Perfected Dice_downgraded,Gain a 15 dice value|[90%]Countdown resets each turn|[gray](Once per battle),2,givedice([15]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,COUNTDOWN,50,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,e.remainingcountdown = 50;,,,,
Dark Matter,Sets all dice to 0,1,var c = 0; if(self != null) { if(self.dicepool != null) { if (self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(0[;] self.screenposition()[;] c * 0.05); c++; } } } } } runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,ODD,,,change_power,doublerequirements,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Matter_upgraded,Sets all dice to 0|Return a 0,1,var c = 0; if(self != null) { if(self.dicepool != null) { if (self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(0[;] self.screenposition()[;] c * 0.05); c++; } } } } } givedice([0]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,ODD,,,change_power,doublerequirements,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Defy The Odds,Use to change |your error chance to 35%,2,giveequipment(~Defy The Odds@1~[;] true[;] false[;] e);,,MAX1,,YELLOW,,noeffect,,,0,YES,NO,weakenavoid|curseavoid,,,,,,,,,,,,
Big Rolls,Your rolls are now|7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17,1,,,,,GREEN,change_power,noeffect,,,0,NO,NO,weakenavoid|errorimmune,,,self.setvar(~rolls~| [7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]);,,self.setvar(~rolls~| [7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]);,,,,,,,
Big Rolls_upgraded,Your rolls are now|7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17|[80%]Do [sword]4 damage at start of battle,1,,,,,GREEN,,,,,0,NO,NO,weakenavoid|errorimmune,,,self.setvar(~rolls~| [7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]);,,self.setvar(~rolls~| [7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]); if(turn == 1){ attack(4); sfxdamage(target[;] 4); },,,,,,,
Defy The Odds@1,Use to change |your error chance to 35%|Keep Going!,2,giveequipment(~Defy The Odds@2~[;] true[;] false[;] e);,,MIN5,,YELLOW,,noeffect,,,0,YES,NO,curseavoid|weakenavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Defy The Odds@2,Use to change |your error chance to 35%|Last Use!,2,self.setvar(~errorchance~| 35); e.temporary_thisturnonly = true; sfx(~levelup~);,,ODD,,YELLOW,,noeffect,,,0,YES,NO,curseavoid|weakenavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Can I Haxe You A Question,[90%]Do [sword]<d6> +6 if dice is negative|Otherwise do [sword]<d6> -6|Does nothing on 0,2,if(d < 0){ attack(d + 6); sfxdamage(target[;] d + 6); } else if(d > 0){ attack(d - 6); sfxdamage(target[;] d - 6); },,NORMAL,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Can I Haxe You A Question_upgraded,[90%]Do [sword]<d6> +6 if dice is negative|Otherwise do [sword]<d6> -6|Do 12 damage on 0,2,if(d < 0){ attack(d + 6); sfxdamage(target[;] d + 6); } else if(d > 0){ attack(d - 6); sfxdamage(target[;] d - 6); } else if(d == 0){ attack(12); sfxdamage(target[;] 12); },,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Black Hole,Deletes all your dice|Does 2 damage per dice,1,var c = 0; var temp = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) temp++; } } } }  attack(temp * 2); sfxdamage(target[;] temp * 3); if(self != null) { if(self.dicepool != null) { if (self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.consumenow(); c++; } } } } },,COUNTDOWN,8,BLACK,halfcountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Black Hole_weakened,Deletes all your dice|Does 1 damage per dice,1,var c = 0; var temp = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) temp++; } } } }  attack(temp); sfxdamage(target[;] temp); if(self != null) { if(self.dicepool != null) { if (self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.consumenow(); c++; } } } } },,COUNTDOWN,4,BLACK,halfcountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Black Hole_downgraded,Deletes all your dice|Does 1 damage per dice,1,var c = 0; var temp = 0; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) temp++; } } } }  attack(temp); sfxdamage(target[;] temp); if(self != null) { if(self.dicepool != null) { if (self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ mydice.consumenow(); c++; } } } } },,COUNTDOWN,8,BLACK,halfcountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Multiply_upgraded,Multiply your dice by 1.5,1,givedice([d * 1.5]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spanner@robot,Combine dice,1,givedice([d]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,MAX1|MIN5,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Spanner@robot_upgraded,Combine dice|[gray](Reuseable),1,givedice([d]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,MAX1|MIN5,,GREEN,,,,,3,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Integer Overflow,Gain a -12,2,givedice([-12]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,COUNTDOWN,32,GREEN,reducesize,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Integer Overflow_downgraded ,Gain a -8,2,givedice([-8]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,COUNTDOWN,32,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Integer Overflow_weakened,Gain a -8,1,givedice([-8]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,COUNTDOWN,32,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backfire?,Do [sword]<half> damage to self,1,attackself(d / 2); sfxdamage(self[;] d / 2);,,NORMAL,,RED,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Backfire?_upgraded,Do [sword]<half> damage to self,1,attackself(d / 2); sfxdamage(self[;] d / 2);,,NORMAL|FREE6,,RED,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Backfire?_downgraded,Do [sword]<d6> damage to self,1,attackself(d); sfxdamage(self[;] d);,,NORMAL|FREE6,,RED,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ultima Blaster,Deal [sword] 30 damage,1,attack(30); sfxdamage(target|30);,,COUNTDOWN,50,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ultima Blaster_upgraded,Deal [sword] 35 damage,1,attack(35); sfxdamage(target|35);,,COUNTDOWN,50,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ultima Blaster_downgraded,Deal [sword] 25 damage,1,attack(25); sfxdamage(target|25);,,COUNTDOWN,50,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Prediction Interval,Only roll <d6> for this turn,1,self.setvar(~rolls~[;][d]);,,NORMAL,,,change_power,complicate,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,self.setvar(~rolls~[;][-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]);,,,,
Prediction Interval_upgraded,Only roll <d6> for this turn|Do [sword]3 damage,1,self.setvar(~rolls~[;][d]); attack(3); sfxdamage(target[;] 3);,,NORMAL,,,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,self.setvar(~rolls~[;][-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]);,,,,
Red Palm Hair,Do [fire]6 damage|If both dice are 3 or below[;]|burn [fire]3 dice,2,var fire = 1; for(ad in actualdice) { if (ad.basevalue >= 3) fire = 0; }; attack(6[;]FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;] 6); if (fire == 1) { inflict(FIRE[;] 3); };,Firebomb,NORMAL|NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Dupliduddle,Quadruplicate one dice[;]|discard the other,1,var output = rand([0[;]1]); givedice([actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue]);,Clone Device,NORMAL|REQUIRE6,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Red Palm Hair_upgraded,Do [fire]6 damage|If both dice are 5 or below[;]|burn [fire]3 dice,2,var fire = 1; for(ad in actualdice) { if (ad.basevalue >= 5) fire = 0; }; attack(6[;]FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;] 6); if (fire == 1) { inflict(FIRE[;] 3); };,Firebomb,NORMAL|NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Red Palm Hair_downgraded,Do [fire]6 damage|If both dice are 1[;]|burn [fire]3 dice,2,var fire = 1; for(ad in actualdice) { if (ad.basevalue >= 1) fire = 0; }; attack(6[;]FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;] 6); if (fire == 1) { inflict(FIRE[;] 3); };,Firebomb,NORMAL|NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dupliduddle,Triplicate one dice[;]|discard the other,2,var output = rand([0[;]1]); givedice([actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue]);,Replicate,NORMAL|NORMAL,,GREEN,reducesize,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Dupliduddle_upgraded,Quadruplicate one dice[;]|discard the other,1,var output = rand([0[;]1]); givedice([actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue]);,Clone Device,NORMAL|MIN5,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Dupliduddle_downgraded,Quadruplicate one dice[;]|discard the other,1,var output = rand([0[;]1]); givedice([actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue]);,Clone Device,MIN3|REQUIRE6,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dupliduddle_downgraded,Triplicate one dice[;]|discard the other,2,var output = rand([0[;]1]); givedice([actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue]);,Replicate,MAX3|MAX3,,GREEN,reducesize,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dupliduddle_weakened,Triplicate one dice[;]|discard the other,1,var output = rand([0[;]1]); givedice([actualdice[output].basevalue[;]actualdice[output].basevalue[;]actualdice[output].basevalue]);,Replicate,MAX3|MAX3,,GREEN,reducesize,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Calm Mind@1,[gray](use 1 dice to charge)|Get a useful dice.,2,runscript(~christmasspecial/equipmentcharge~[;][1[;]~~[;]e[;]self[;]~Calm Mind~]);,Replicate,NORMAL,,GRAY,,,,,0,YES,NO,cannotsteal|skillcard|excludefromrandomlists,,,,,,,,,,,,
Calm Mind,[gray](charged)|Get a useful dice.,2,var values = []; for (e in self.getcurrentequipment()) { if (e.ready) values.push((e.column * 2) + e.row + 1); } if (values.length > 0) { givedice(rand(values)); } runscript(~christmasspecial/equipmentcharge~[;][2[;]~~[;]e[;]self[;]~Calm Mind~[;]false]);,Replicate,NORMAL,,GRAY,,,,,0,YES,NO,cannotsteal|skillcard|excludefromrandomlists,,,,,,,,,,,,
Normal Blade,Deal [sword]4 damage.|Example Equipment,1,attack(4); sfxdamage(target[;] 4);,Magic Dice,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Dual Blade,Deal [sword]4 damage.|Example Equipment,1,attack(4); sfxdamage(target[;] 4);,Magic Dice,NORMAL|NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Combo Blade,Deal [sword]4 damage.|Example Equipment,1,attack(4); sfxdamage(target[;] 4);,Magic Dice,COMBINATION,,YELLOW,change_power,change_power,,,0,NO,NO,combination:7777,1,,,,,,,,,,,
Strict Blade,Deal [sword]4 damage.|Example Equipment,1,attack(4); sfxdamage(target[;] 4);,Magic Dice,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Graviga,Deal [sword]1/4 max health|damage,1,attack(target.maxhp / 4 + 1); sfxdamage(target[;] target.maxhp / 4 + 1); sfx(~_plasma~);,Hellfire,COMBINATION,,GRAY,change_power,change_power,,,0,NO,NO,combination:777,,,,,,,,,,,,
Graviga_upgraded,Deal [sword]1/3 max health|damage,1,attack(target.maxhp / 3 + 1); sfxdamage(target[;] target.maxhp / 3 + 1); sfx(~_plasma~);,Hellfire,COMBINATION,,GRAY,change_power,change_power,,,0,NO,NO,combination:777,,,,,,,,,,,,
Graviga_downgraded,Deal [sword]1/5 max health|damage,1,attack(target.maxhp / 5 + 1); sfxdamage(target[;] target.maxhp / 5 + 1); sfx(~_plasma~);,Hellfire,COMBINATION,,GRAY,change_power,change_power,,,0,NO,NO,combination:777,,,,,,,,,,,,
Stop Spell,Lock [lock]1 dice,1,inflict(LOCK[;] 1); sfx(~_lock~);,Quick Thinking,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stop Spell_upgraded,Lock [lock]2 dice,1,inflict(LOCK[;] 2); sfx(~_lock~);,Quick Thinking,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stop Spell_downgraded,Shock [shock]1 equipment,1,inflict(SHOCK[;] 1); sfx(~_shock~);,Quick Thinking,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Teleport Spell@witch,Dodge next attack[;]|reroll dice,1,inflictself(DODGE); givedice(); sfx(~_dodge~);,Quick Thinking,NORMAL,,YELLOW,,,dodge,,0,YES,NO,,1,,,,,,,,,,,
Earth Spell@witch,Deal [weaken]5 damage|Weaken [weaken]2 equipment,1,attack(5[;] WEAKEN); inflict(WEAKEN[;] 2); sfxdamage(target[;]5); sfx(~_weaken~[;]~~[;]0.2);,Burrower,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Earth Spell@witch_downgraded,Deal [weaken]5 damage|Weaken [weaken]1 equipment,1,attack(5[;] WEAKEN); inflict(WEAKEN[;] 1); sfxdamage(target[;]5); sfx(~_weaken~[;]~~[;]0.2);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Earth Spell@witch_upgraded,Deal [weaken]5 damage|Weaken [weaken]3 equipment,1,attack(5[;] WEAKEN); inflict(WEAKEN[;] 3); sfxdamage(target[;]5); sfx(~_weaken~[;]~~[;]0.2);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Thunder Spell@witch,Deal [shock]5 damage|Shock [shock]2 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 2); sfxdamage(target[;]5); sfx(~_shock~[;]~~[;]0.2);,Jackhammer,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Thunder Spell@witch_downgraded,Deal [shock]5 damage|Shock [shock]1 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 1); sfxdamage(target[;]5); sfx(~_shock~[;]~~[;]0.2);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Thunder Spell@witch_upgraded,Deal [shock]5 damage|Shock [shock]3 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 3); sfxdamage(target[;]5); sfx(~_shock~[;]~~[;]0.2);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Fury Spell@witch,Repeat next action,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,NORMAL|NORMAL,,PURPLE,change_power,noeffect,,,0,YES,NO,,2,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Fury Spell@witch_upgraded,Repeat next action,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,NORMAL,,PURPLE,,,,,0,YES,NO,,2,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Hall of Mirrors@witch,[]+1 dice this fight,1,if(simulation) { bonus(1000); } else{ self.extradice++; sfx(~magic_gaindice~); },Focus,NORMAL|NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Hall of Mirrors@witch_upgraded,[]+1 dice this fight,1,if(simulation) { bonus(1000); } else{ self.extradice++; sfx(~magic_gaindice~); },Focus,NORMAL,,PURPLE,,,,,0,YES,NO,,1,,,,,,,,,,,
Hall of Mirrors@witch_downgraded,[]+1 dice this fight,1,if(simulation) { bonus(1000); } else{ self.extradice++; sfx(~magic_gaindice~); },Focus,DOUBLES|DOUBLES,,PURPLE,,,,,0,YES,NO,,1,,,,,,,,,,,
Poison Spell@witch,Inflict [poison]4 poison,1,inflict(POISON[;] 4); sfx(~_poison~);,Poison Arrow,NORMAL,,PURPLE,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Poison Spell@witch_upgraded,Inflict [poison]5 poison,1,inflict(POISON[;] 5); sfx(~_poison~);,Poison Arrow,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Freeze Spell@witch,Deal [ice]5 damage|Freeze [ice]2 dice,1,attack(5[;] ICE); inflict(ICE[;] 2); sfxdamage(target[;]5); sfx(~_ice~[;]~~[;]0.2);,Refrigerator,NORMAL,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,,,,,,,,,,,,
Freeze Spell@witch_downgraded,Deal [ice]5 damage|Freeze [ice]1 dice,1,attack(5[;] ICE); inflict(ICE[;] 1); sfxdamage(target[;]5); sfx(~_ice~[;]~~[;]0.2);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Freeze Spell@witch_upgraded,Deal [ice]5 damage|Freeze [ice]ALL dice,1,attack(5[;] ICE); inflict(ICE[;] ALL); sfxdamage(target[;]5); sfx(~_ice~[;]~~[;]0.2);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Flame Spell@witch,Deal [fire]5 damage|Burn [fire]2 dice,1,attack(5[;] FIRE); inflict(FIRE[;] 2); sfxdamage(target[;]5); sfx(~_fire~[;]~~[;]0.2);,Hellfire,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Flame Spell@witch_upgraded,Deal [fire]6 damage|Burn [fire]ALL dice,1,attack(6[;] FIRE); inflict(FIRE[;] ALL); sfxdamage(target[;]6); sfx(~_fire~[;]~~[;]0.2);,Hellfire,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flame Spell@witch_downgraded,Deal [sword]5 damage,1,attack(5); sfxdamage(target[;]6);,Hellfire,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Ghostly Flame Spell,Deal [fire]8 damage|Inflict [vanish]vanish,1,attack(8[;] FIRE); inflict(VANISH); sfxdamage(target[;]8); sfx(~_vanish~[;]~~[;]0.2);,Hellfire,NORMAL|NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ghostly Flame Spell_upgraded,Deal [fire]9 damage|Inflict [vanish]vanish,1,attack(9[;] FIRE); inflict(FIRE[;] ALL); sfxdamage(target[;]9); sfx(~_vanish~[;]~~[;]0.2);,Hellfire,NORMAL|NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Ghostly Flame Spell_downgraded,Deal [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Hellfire,NORMAL|NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Fortify Spell,Gain [reduce]2 reduce,1,inflictself(REDUCE[;]2); sfx(~_shield~);,Quick Thinking,NORMAL,,ORANGE,change_power,change_power,dodge,,0,YES,NO,,1,,,,,,,,,,,
Fortify Spell_upgraded,Gain [reduce]3 reduce,1,inflictself(REDUCE[;]3); sfx(~_shield~);,Quick Thinking,NORMAL,,ORANGE,,,,,0,YES,NO,,1,,,,,,,,,,,
Fortify Spell_downgraded,Gain [shield]2 shield,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Quick Thinking,NORMAL,,ORANGE,,,,,0,YES,NO,,1,,,,,,,,,,,
Speed Spell,Put 1 dice in|all combinations,1,runscript(~christmasspecial/boostcombinations~[;][self[;]target[;]1]);,Hellfire,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Speed Spell_upgraded,Put 1 dice in|all combinations,1,runscript(~christmasspecial/boostcombinations~[;][self[;]target[;]1]);,Hellfire,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Speed Spell_downgraded,Put 1 dice in|all combinations,1,runscript(~christmasspecial/boostcombinations~[;][self[;]target[;]1]);,Hellfire,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Curse,Curse enemy,1,inflict(CURSE[;]1); sfx(~_curse~);,Hellfire,NORMAL,,GRAY,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Curse_upgraded,Parallel Universe|Curse enemy,1,inflict(ALTERNATE+CURSE[;]1); sfx(~_curse~);,Hellfire,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Grand Blast,Deal [sword]12 damage,1,attack(12); sfxdamage(target[;] 12);,Magic Dice,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Grand Blast_upgraded,Deal [sword]12 damage.,1,attack(12); sfxdamage(target[;] 12);,Magic Dice,NORMAL|NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Grand Blast_downgraded,Deal [sword]9 damage,1,attack(9); sfxdamage(target[;] 9);,Magic Dice,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Cosine,Take [sword]<double> damage|Drain [heart]<d6> health,1,attackself(d*2); sfxdamage(self[;] d*2); drain(d); sfx(~_drain~);,,NORMAL,,,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Cosine_upgraded,Drain [heart]<d6>|Take [sword]1.5x<d6> damage,1,drain(d); attackself(d*1.5); sfxdamage(self[;] d*1.5); sfx(~_drain~);,,NORMAL,,,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Preserver Observer,Do [sword]<d6> damage|[80%]On first turn auto used for 3 dmg,1,if(turn == 1){ attack(3); sfxdamage(target[;] 3); } else { attack(d); sfxdamage(target[;] d); },,MAX5,,RED,change_power,complicate,,,0,NO,NO,,,,,,if(turn == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0.0[;] false[;] true[;] false);  },,,,,,,
Preserver Observer_upgraded,Do [sword]<d6> damage|[80%]On first turn auto used for 5 dmg,1,if(turn == 1){ attack(5); sfxdamage(target[;] 5); } else { attack(d); sfxdamage(target[;] d); },,MAX5,,RED,,,,,0,NO,NO,,,,,,if(turn == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0.0[;] false[;] true[;] false);  },,,,,,,
[BEGIN UNFRIENDLYMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Radicalise,On 4/5: Roll a 6|On 2/3: Roll a 1,1,if (d > 3) { givedice(6); } else { givedice(1); },[90%]Mass Radicalisation,RANGE25,,GREEN,change_power,change_power,,,0,YES,NO,unfriendlymod,1,,,,,,,,,,,
Radicalise_upgraded,On 4/5: Roll a 6| On 2/3: Roll a 1|[gray](Reuseable),1,if (d > 3) { givedice(6); } else { givedice(1); },[90%]Mass Radicalisation,RANGE25,,GREEN,change_power,change_power,,,3,YES,NO,unfriendlymod,1,,,,,,,,,,,
Radicalise_downgraded,On 4: Roll a 6|On 3: Roll a 1,1,if (d > 3) { givedice(6); } else { givedice(1); },[90%]Mass Radicalisation,RANGE34,,GREEN,change_power,change_power,,,0,YES,NO,unfriendlymod,1,,,,,,,,,,,
5patula,Flip the dice as if it|somehow had 5 sides,1,givedice(6-d);,Megaflip,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,unfriendlymod,,,,,,,,,,,,
5patula_upgraded,Flip the dice as if it|somehow had 5 sides|[gray](Reuseable),1,givedice(6-d);,Megaflip,MAX5,,GREEN,change_power,change_power,,,3,YES,NO,unfriendlymod,,,,,,,,,,,,
5patula_downgraded,Flip the dice as if it|somehow had 5 sides,1,givedice(6-d);,Megaflip,REQUIRE5,,GREEN,change_power,change_power,,,0,YES,NO,unfriendlymod,,,,,,,,,,,,
Waterwheel,Flip both dice,1,givedice([7-actualdice[0].basevalue[;]7-actualdice[1].basevalue]);,Megaflip,MIN3|MAX4,,ORANGE,increaserange,change_power,,,0,YES,NO,unfriendlymod,,,,,,,,,,,,
Waterwheel_downgraded,Flip both dice,1,givedice([7-actualdice[0].basevalue[;]7-actualdice[1].basevalue]);,Megaflip,MIN5|MAX2,,ORANGE,increaserange,change_power,,,0,YES,NO,unfriendlymod,,,,,,,,,,,,
Logistics Expert,On any equipment use[;]|[]+1 to random dice|[gray](Reuseable),1,var dicelist = []; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); if (dicelist[0].basevalue >= 6){ extradice.push(1); dicelist[0].animatereroll(6[;] self.screenposition()); } else { dicelist[0].animatereroll((dicelist[0].basevalue + 1)[;] self.screenposition()); } } givedice(extradice);,Megabump,,,PINK,change_power,complicate,,,3,YES,NO,unfriendlymod,,,,e.setvar(~equipmentused~[;]0);,,if(self.equipmentused > e.getvar(~equipmentused~)){ e.doequipmentaction(self[;]self[;]0[;][][;]0[;]true); e.setvar(~equipmentused~[;]self.equipmentused); self.equipmentused-=1; }else{ e.setvar(~equipmentused~[;]self.equipmentused); };,,,,,,
Logistics Expert_downgraded,On any equipment use[;]|[]+1 to random dice|[gray](Reuseable),1,var dicelist = []; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); if (dicelist[0].basevalue >= 6){ extradice.push(1); dicelist[0].animatereroll(6[;] self.screenposition()); } else { dicelist[0].animatereroll((dicelist[0].basevalue + 1)[;] self.screenposition()); } } givedice(extradice);,Megabump,,,PINK,change_power,complicate,,,1,YES,NO,unfriendlymod,,,,e.setvar(~equipmentused~[;]0);,,if(self.equipmentused > e.getvar(~equipmentused~)){ e.doequipmentaction(self[;]self[;]0[;][][;]0[;]true); e.setvar(~equipmentused~[;]self.equipmentused); self.equipmentused-=1; }else{ e.setvar(~equipmentused~[;]self.equipmentused); };,,,,,,
Logistics Expert_upgraded,On any equipment use[;]|[]+1 to random dice|[gray](Reuseable),1,var dicelist = []; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); if (dicelist[0].basevalue >= 6){ extradice.push(1); dicelist[0].animatereroll(6[;] self.screenposition()); } else { dicelist[0].animatereroll((dicelist[0].basevalue + 1)[;] self.screenposition()); } } givedice(extradice);,Megabump,,,PINK,change_power,complicate,,,5,YES,NO,unfriendlymod,,,,e.setvar(~equipmentused~[;]0);,,if(self.equipmentused > e.getvar(~equipmentused~)){ e.doequipmentaction(self[;]self[;]0[;][][;]0[;]true); e.setvar(~equipmentused~[;]self.equipmentused); self.equipmentused-=1; }else{ e.setvar(~equipmentused~[;]self.equipmentused); };,,,,,,
[END UNFRIENDLYMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Backwards Logic,Heal enemy [heal]<d6>,1,attack(-d); sfx(~_heal~);,,NORMAL,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Backwards Logic_upgraded,Heal enemy [heal]<d6>|On 0 heal [heal]5 health,1,attack(-d); sfx(~_heal~); if(d == 0){ attackself(-5); },,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Normal Integer,Do [sword]<double> damage|Only with dice 1 through 6,2,if(d >= 1 && d <=6){ attack(d * 2); sfxdamage(target[;] d * 2); } else { self.textparticle(~Not a number between 1 and 6!~); },,NORMAL,,RED,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Chocolate Bar,[gray](Use dice to charge[;] 3 left)|[85%]When used gain [heal]4 max health|[85%]Removes 4 max health next turn,2,giveequipment(~Chocolate Bar@1~[;] true[;] false[;] e); sfx(~countdowntick_3~);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Chocolate Bar_upgraded,[gray](Use dice to charge[;] 3 left)|[85%]When used gain [heal]4 max health|[85%]Removes 3 max health next turn,2,giveequipment(~Chocolate Bar@1+~[;] true[;] false[;] e); sfx(~countdowntick_3~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Chocolate Bar@1,[gray](Use dice to charge[;] 2 left)|[85%]When used gain [heal]4 max health|[85%]Removes 4 max health next turn,2,giveequipment(~Chocolate Bar@2~[;] true[;] false[;] e); sfx(~countdowntick_2~);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Chocolate Bar@2,[gray](Use dice to charge[;] 1 left)|[85%]When used gain [heal]4 max health|[85%]Removes 4 max health next turn,2,giveequipment(~Chocolate Bar@3~[;] true[;] false[;] e); sfx(~countdowntick_1~);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Chocolate Bar@3,[gray](Charged)|[85%]When used gain [heal]4 max health|[85%]Removes 4 max health next turn|Leaves overheal,2,self.maxhp +=4; attackself(-4); self.setvar(~used~[;] 1); jinx(~Chocolate Bar~[;]~Lose [heart]%VAR% max health~[;]~Lose [heart]%VAR% max health~[;]~target.maxhp -=4; sfx(\~_drain\~);~[;]self[;]self[;]1[;](4)); sfx(~_cure~); giveequipment(~Chocolate Bar~[;] true[;] false[;] e);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,self.setvar(~used~[;] 0);,if(self.getvar(~used~) == 1){ self.maxhp -=4; sfx(~_drain~); },,self.setvar(~used~[;] 0);,,,,,,,
Chocolate Bar@2_upgraded,[gray](Use dice to charge[;] 1 left)|[85%]When used gain [heal]4 max health|[85%]Removes 3 max health next turn,2,giveequipment(~Chocolate Bar@3+~[;] true[;] false[;] e); sfx(~countdowntick_1~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Chocolate Bar@1_upgraded,[gray](Use dice to charge[;] 2 left)|[85%]When used gain [heal]4 max health|[85%]Removes 3 max health next turn,2,giveequipment(~Chocolate Bar@2+~[;] true[;] false[;] e); sfx(~countdowntick_2~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Chocolate Bar@3_upgraded,[gray](Charged)|[85%]When used gain [heal]4 max health|[85%]Removes 3 max health next turn|[85%]End battle before next turn| to keep 2 max hp,2,self.maxhp +=4; attackself(-4); self.setvar(~used~[;] 1); jinx(~Chocolate Bar+~[;]~Lose [heart]%VAR% max health~[;]~Lose [heart]%VAR% max health~[;]~target.maxhp -=3; sfx(\~_drain\~);~[;]self[;]self[;]1[;](3)); sfx(~_cure~);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,self.setvar(~used~[;] 0);,if(self.getvar(~used~) == 1){ self.maxhp -=2; sfx(~_drain~); },,self.setvar(~used~[;] 0);,,,,,,,
Another Song,Removes all red notes,2,removestatusself(~rednote~[;] ALL); sfx(~_thinghappens~);,,EVEN,,RED,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Healthy Song,Removes all green notes,2,removestatusself(~greennote~[;] ALL); sfx(~_thinghappens~);,,ODD,,GREEN,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Christmas Jingle,Removes all red[;] green[;] |and reen notes|Gain [reennote][red]2 [green]Reen[red] Notes,2,removestatusself(~rednote~[;] ALL); removestatusself(~greennote~[;] ALL); removestatusself(~reennote~[;] ALL); inflictself(~reennote~[;] 2); sfx(~_thinghappens~);,,COUNTDOWN,10,RED,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Rainbow Inclusion,Remove all [red]Ra[green]in[black]bo[orange]w_N[blue]ot[yellow]es|Gain [bownote]2 [red]Ra[green]in[black]bo[orange]w_N[blue]ot[yellow]es,2,removestatusself(~bownote~[;] ALL); inflictself(~bownote~[;] 2); sfx(~_thinghappens~);,,EVEN|ODD,,PINK,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Dark Song,Remove all black notes,2,removestatusself(~blacknote~[;] ALL); sfx(~_thinghappens~);,,MAX4,,,increaserange,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Mic Check,Requires 1 2 or 3 randomly|[85%]Remove all of a random note|Gain a random note,2,var remove = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); removestatusself(remove[;] ALL); sfx(~_thinghappens~);,,REQUIRE1,,,change_power,change_power,,,0,YES,NO,,,,,e.changecolour(~gray~);,var blah = rand([~REQUIRE1~[;]~REQUIRE2~[;]~REQUIRE3~]); e.changeslots([blah]); e.animate(~flashandshake~);,,,,var note = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); inflictself(note); if (note == ~rednote~){ e.changecolour(~red~); } else if (note == ~greennote~){ e.changecolour(~green~); }else if (note == ~reenote~){ e.changecolour(~red~); } else if (note == ~bluenote~){ e.changecolour(~cyan~); } else if (note == ~yellownote~){ e.changecolour(~yellow~); } else if (note == ~orangenote~){ e.changecolour(~orange~); } else if (note == ~bownote~){ e.changecolour(~pink~); } else if (note == ~purpnote~){ e.changecolour(~purple~); } else if (note == ~blacknote~){ e.changecolour(~black~); },,,
Autotone,Automatically get a random|note every 5 item uses|(items used: <var:itemuses>),2,,,,,,,,,,0,NO,NO,excludefromrandomlists|skillcard,,self.setvar(~itemuses~[;]0);,self.setvar(~itemuses~[;]0);,e.changecolour(~gray~);,self.setvar(~itemuses~[;]0);,if(!onlimit) { /*kludge so if you have more than one autohook the recorded equipment use count isn't inflated*/ var alleq = [for(eq in self.equipment) if(eq.name == ~Autotone~) eq]; if(alleq[0] == e) self.setvar(~itemuses~[;]self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 5 == 0) { var note = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); sfx(~_thinghappens~); e.animate(~flashandshake~); inflictself(note); if (note == ~rednote~){ e.changecolour(~red~); } else if (note == ~greennote~){ e.changecolour(~green~); }else if (note == ~reenote~){ e.changecolour(~red~); } else if (note == ~bluenote~){ e.changecolour(~cyan~); } else if (note == ~yellownote~){ e.changecolour(~yellow~); } else if (note == ~orangenote~){ e.changecolour(~orange~); } else if (note == ~bownote~){ e.changecolour(~pink~); } else if (note == ~purpnote~){ e.changecolour(~purple~); } else if (note == ~blacknote~){ e.changecolour(~black~); } } },,,,,,
Mic Check_upgraded,[85%]Requires even or odd randomly|[85%]Remove 1 of a random note|Gain a random note,2,var note = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); var remove = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); removestatusself(remove[;] ALL); inflictself(note); sfx(~_thinghappens~); if (note == ~rednote~){ e.changecolour(~red~); } else if (note == ~greennote~){ e.changecolour(~green~); }else if (note == ~reenote~){ e.changecolour(~red~); } else if (note == ~bluenote~){ e.changecolour(~cyan~); } else if (note == ~yellownote~){ e.changecolour(~yellow~); } else if (note == ~orangenote~){ e.changecolour(~orange~); } else if (note == ~bownote~){ e.changecolour(~pink~); } else if (note == ~purpnote~){ e.changecolour(~purple~); } else if (note == ~blacknote~){ e.changecolour(~black~); },,REQUIRE1,,,,,,,0,YES,NO,,,,,e.changecolour(~gray~);,var blah = rand([~ODD~[;]~EVEN~]); e.changeslots([blah]); e.animate(~flashandshake~);,,,,,,,
Mic Check_downgraded,Requires 1 2 or 3 randomly|[85%]Remove all of a random note,2,var remove = rand([~rednote~[;]~greennote~[;]~reennote~[;]~bluenote~[;]~yellownote~[;]~orangenote~[;]~bownote~[;]~blacknote~[;]~purpnote~]); removestatusself(remove[;] ALL); sfx(~_thinghappens~);,,REQUIRE1,,,,,,,0,YES,NO,,,,,e.changecolour(~gray~);,var blah = rand([~REQUIRE1~[;]~REQUIRE2~[;]~REQUIRE3~]); e.changeslots([blah]); e.animate(~flashandshake~);,,,,,,,
Normal Integer,Do [sword]<double> damage|Only with dice 1 through 6,2,if(d >= 1 && d <=6){ attack(d * 2); sfxdamage(target[;] d * 2); } else { self.textparticle(~Not a number between 1 and 6!~); },,NORMAL,,RED,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Workout Card,The workout card has|been used this fight.,2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,self.hasstolencard = true; e.stolencard = true; e.skillcard_special = true; if (self.equipment[0].skillcard == ~~) {self.equipment[0].skillcard = ~warriorreunion~;} else if (self.equipment[1] != e) {var eq = new elements.Equipment(~Technical Details~); eq.skillcard = ~warriorreunion~; self.equipment.insert(0|eq);},,,,,,,,,,
Technical Details,Hello! This exists|for technical reasons.|Note[;] if I made this invisible[;]|then spacing would be wrong.|And this must exist in the|playfield[;] because draftmode|is dumb.||Enjoy the mod!,2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Normal Interger,Do [sword]<double> damage|Only with dice 1 through 6,2,if(d >= 1 && d <=6){ attack(d * 2); sfxdamage(target[;] d * 2); } else { self.textparticle(~Not a number between 1 and 6!~); },,NORMAL,,RED,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Alchemist Workout,Heal [heal]6 health|Inflict excess as [poison] poison,2,if(self.maxhp - self.hp == 0) { inflict(POISON[;] 6); sfx(~_poison~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 5) { inflict(POISON[;] 5); attackself(-1); sfx(~_poison~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 4) { inflict(POISON[;] 4); attackself(-2); sfx(~_poison~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 3) { inflict(POISON[;] 3); attackself(-3); sfx(~_poison~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 2) { inflict(POISON[;] 2); attackself(-4); sfx(~_poison~[;]~~[;]0.2); } else if(self.maxhp - self.hp == 1) { inflict(POISON[;] 1); attackself(-5); sfx(~_poison~[;]~~[;]0.2); } else { attackself(-2); sfx(~_heal~); },,COUNTDOWN,6,GREEN,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Aurora Workout,Mimic a Storm Card,2,var storm = rand([~fire~[;]~ice~[;]~thunder~[;]~sand~]); if(storm == ~fire~){ attack(3[;] FIRE); inflict(FIRE); sfx(~_fire~); self.textparticle(~[red]HEATWAVE!~); } else if(storm == ~ice~){ attack(3[;] ICE); inflict(ICE); sfx(~_ice~); self.textparticle(~[blue]SNOW STORM~); } else if(storm == ~thunder~){ attack(3[;] SHOCK); inflict(SHOCK); sfx(~_shock~); self.textparticle(~[yellow]THUNDER STORM~); } else if(storm == ~sand~){ attack(3[;] WEAKEN); inflict(WEAKEN); sfx(~_weaken~); self.textparticle(~[orange]SANDSTORM~); },,COUNTDOWN,4,PINK,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Baby Squid Workout,Do [sword]<d6> damage|Unblind this dice,2,givedice(d); attack(d); sfxdamage(target[;] d); self.dicepool[self.dicepool.length-1].blind = false;,,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Banshee Workout,Do [ice]<d6> damage|On 6[;] [curse] Curse enemy,2,if(d >= 6){ inflict(CURSE); sfx(~_curse~); } attack(d[;] ICE); sfxdamage(target[;] d);,,NORMAL,,CYAN,add1,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Bully Workout,Do [sword]6 damage,2,attack(6); sfxdamage(target[;] 6);,,NORMAL,,RED,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Cactus Workout,Do [sword]<d6> damage on even|Gain [thorns]3 thorns on odd,2,if(d % 2 == 0){ attack(d); sfxdamage(target[;] d); } else { inflictself(THORNS[;] 3); sfx(~_thorns~); },,NORMAL,,GREEN,add2,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Cornelius Workout,Use all slots to kill enemy|Must be completed in 1 turn,2,giveequipment(~Cornelius Workout@1~[;] true[;] false[;] e); sfx(~countdowntick_3~);,,REQUIRE5,,PURPLE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Cornelius Workout@1,Use all slots to kill enemy|Must be completed in 1 turn,2,giveequipment(~Cornelius Workout@2~[;] true[;] false[;] e); sfx(~countdowntick_3~);,,REQUIRE4,,PURPLE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,giveequipment(~Cornelius Workout~[;] true[;] false[;] e);,,,,
Cornelius Workout@2,Use all slots to kill enemy|Must be completed in 1 turn,2,giveequipment(~Cornelius Workout@3~[;] true[;] false[;] e); sfx(~countdowntick_2~);,,REQUIRE3,,PURPLE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,giveequipment(~Cornelius Workout~[;] true[;] false[;] e);,,,,
Cornelius Workout@3,Use all slots to kill enemy|Must be completed in 1 turn,2,giveequipment(~Cornelius Workout@4~[;] true[;] false[;] e); sfx(~countdowntick_1~);,,REQUIRE2,,PURPLE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,giveequipment(~Cornelius Workout~[;] true[;] false[;] e);,,,,
Cornelius Workout@4,Kill Enemy,2,pierceattack(999); sfxdamage(target[;] 999);,,REQUIRE1,,PURPLE,simplify,doublerequirements,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,giveequipment(~Cornelius Workout~[;] true[;] false[;] e);,,,,
Cowboy Workout,Gain [confuse]Endurance,2,inflictself(~Endurance~);,,REQUIRE6,,RED,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
John Denver Workout,Do [sword]<d6> damage|Inflict [skipturn]Timely Demise,2,attack(d); sfxdamage(target[;] d); inflict(~Demise~); sfx(~_curse~);,,MAX5,,BLACK,add1,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Mall Cop Workout,Deal [sword]<d6> damage|Inflict [sting]Sting,2,attack(d); sfxdamage(target[;] d); inflict(~Sting~);,,MAX3|MAX3,,RED,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Dire Wolf Workout,Do [sword]<d6> damage|Inflict [poison]<d6> poison,2,attack(d); inflict(POISON[;] d); sfxdamage(target[;] d); sfx(~_poison~);,,MAX3,,PURPLE,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Drain Monster Workout,Inflict [weaken]4 weaken|Inflict [poison]4 poison,2,inflict(POISON[;] 4); sfx(~_poison~); inflict(WEAKEN[;] 4); sfx(~_weaken~);,,COUNTDOWN,14,ORANGE,threequartercountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Dryad Workout,Do [sword]<d6> damage|On 6[;] Gain [heal]2 max health,2,if(d >= 6){ self.maxhp +=2; attackself(-2); sfx(~_cure~); } attack(d); sfxdamage(target[;] d);,,NORMAL,,GREEN,add1,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Fireman Workout,Do [fire]<d6> damage|Inflict [fire]<d6> burn,2,attack(d[;] FIRE); sfxdamage(target[;] d); inflict(FIRE[;] d); sfx(~_fire~);,,MAX4,,RED,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Frog Workout,Do [sword]<d6> damage|Gain [shield]<d6> shield,2,attack(d); sfxdamage(target[;] d); inflictself(SHIELD[;] d); sfx(~_shield~);,,MAX4|FREE2,,RED,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Gardner Workout,Do [weaken]<d6> damage|On 1[;] Inflict 2 [weaken]weaken|On 1[;] Do [weaken]4 damage,2,if(d == 1){ attack(4[;] WEAKEN); inflict(WEAKEN[;] 2); sfxdamage(target[;] 4); sfx(~_weaken~); } else { attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); },,NORMAL,,ORANGE,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Gargoyle Workout,Do [sword]5 damage|Roll lower dice,2,if(!simulation) { attack(5); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome)); } else { attack(5); } sfxdamage(target[;] 5);,,MIN3,,,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Handyman Workout,Do [shock]<d6> damage[;]|combine dice[;]|on 6[;] inflict [shock]1 shock,2,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~); attack(d[;] SHOCK); if(d == 6) inflict(SHOCK); if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.2); },,MAX3|MAX3,,YELLOW,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Haunted Jar Workout,Inflict [poison]<d6> poison[;]|if enemy already has poison|double enemies poison,2,if(getstatus(POISON) > 0){ inflict(POISON[;] getstatus(POISON)); sfx(~_poison~); } else { inflict(POISON[;] d); sfx(~_poison~); },,MAX3,,PURPLE,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Hothead Workout,Do [fire]5 damage[;]|make enemy weak to fire,2,attack(5[;] FIRE); inflict(~fireweakness~); sfx(~_fire~); sfxdamage(target[;] 5);,,COUNTDOWN,5,RED,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Keymaster Workout,Unlocks Keybroadsword|[90%]Requirements are randomized,2,giveequipment(~Keybroadsword~[;] true[;] false[;] e);,,REQUIRE1,,,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,var s = rand([~REQUIRE1~[;]~REQUIRE2~[;]~REQUIRE3~[;]~REQUIRE4~[;]~REQUIRE5~[;]~REQUIRE6~]); e.changeslots([s]); e.animate(~flashandshake~);,,,,,,,
Keybroadsword,Do [sword]<d6> damage[;]|return dice,2,attack(d); sfxdamage(target[;] d); givedice(d);,,NORMAL|FREE1,,RED,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Kraken Workout,Do [sword]<d6> damage[;]|curse enemy,2,attack(d); sfxdamage(target[;] d); inflict(CURSE); sfx(~_curse~);,,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Loud Bird Workout,Do [weaken]<slotdoubles> damage[;]|inflict [weaken]2 weaken on odd|Gain [dodge]dodge on even,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); if(d % 2 == 0){ inflictself(DODGE); sfx(~_dodge~); } else { inflict(WEAKEN); sfx(~_weaken~); },,DOUBLES|DOUBLES,,ORANGE,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Magician Workout,Do [sword]4 damage[;]|Gain [shield]4 shield,2,attack(4); sfxdamage(target[;] 4); inflictself(SHIELD[;] 4); sfx(~_shield~);,,NORMAL,,YELLOW,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Marshmallow Workout,Do [fire]<d6> damage on even[;]|Do [ice]<d6> damage on odd[;]|[90%]inflict statuses respectively,2,if(d%2 == 0){ attack(d[;] FIRE); sfxdamage(target[;]d); inflict(FIRE); sfx(~_fire~); } else { attack(d[;] ICE); sfxdamage(target[;]d); inflict(ICE); sfx(~_ice~); },,NORMAL,,BRIGHTCYAN,add1,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Paper Knight Workout,Do [sword]9 damage[;]|Do [sword]1 less damage for|every item used this turn,2,attack(10 - self.equipmentused); sfxdamage(target[;] self.getvar(~dam~));,,REQUIRE6,,RED,simplify,doublerequirements,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Pirate Workout,Do [sword]<d6> damage|on 4[;] re-use your next item,2,attack(d); sfxdamage(target[;] d); if(d == 4){ inflictself(REEQUIPNEXT); sfx(~_reequip~); },,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Rat King Workout,Inflict [poison]3 poison[;]|roll a new dice,2,inflict(POISON[;] 3); sfx(~_poison~); givedice();,,COUNTDOWN,10,PURPLE,threequartercountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Rhino Beetle Workout,Do [sword]<double> damage[;]|Lock [lock]1 dice,2,attack(d * 2); sfxdamage(target[;] d * 2); inflict(LOCK); sfx(~_lock~);,,MAX3,,PURPLE,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Robobot Workout,Do [sword]2x<equipmentuse> damage[;]|+1 to multiplier for |every item use,2,attack(2 * self.equipmentused); sfxdamage(target[;] 2 * self.equipmentused);,,MIN3,,RED,,,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Rose Workout,Heal [heal]4 health|Gain [thorns]3 thorns,2,inflictself(THORNS[;] 3); sfx(~_thorns~); attackself(-4); sfx(~_heal~);,,REQUIRE6,,GREEN,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Rotten Apple Workout,Reduce health by one third,2,pierceattack((target.hp / 3)); sfxdamage(target[;] target.hp / 3);,,COUNTDOWN,6,RED,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Singer Workout,Do [weaken]8 damage[;]|inflict [weaken]1 weaken,2,attack(8[;] WEAKEN); sfxdamage(target[;] 8); inflict(WEAKEN); sfx(~_weaken~);,,COUNTDOWN,12,ORANGE,threequartercountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Skeleton Workout,Do [sword]<d6> damage[;]|on 8[;] curse enemy,2,attack(d); sfxdamage(target[;] d); if(d == 8){ inflict(CURSE); sfx(~_curse~); },,MAX4|MAX4,,PURPLE,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Slime Workout,Do [sword]<d6> damage[;]|on even[;] inflict [poison]<d6> poison,2,attack(d); sfxdamage(target[;] d); if(d % 2 == 0){ inflict(POISON[;] d); sfx(~_poison~); },,MAX3,,PURPLE,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Sneezy Workout,Reduce all countdowns by <d6>,2,boostcountdowns(d);,,NORMAL,,GREEN,add2,complicate,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Snowman Workout,Do [ice]<d6> damage[;]|Freeze all dice,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE[;] ALL); sfx(~_ice~);,,ODD,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Sorceress Workout,Do [sword]3 damage[;]|Roll 2 new dice,2,attack(3); sfxdamage(target[;] 3); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])][;]~~[;]true);,,COUNTDOWN,3,PURPLE,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Space Marine Workout,Do [sword]9 damage,2,attack(9); sfxdamage(target[;] 9);,,COUNTDOWN,15,RED,threequartercountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Stereohead Workout,Inflict [weaken]2 weaken|Inflict [powerdown]2 powerdown,2,inflict(WEAKEN[;] 2); sfx(~_weaken~); inflict(~Powerdown~[;] 2);,,MAX5,,ORANGE,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Sticky Hands Workout,Steal [gold]2 gold|Gain [shield]<var:gold> shield,2,self.gold += 2; self.setvar(~gold~[;] self.gold); inflictself(SHIELD[;] self.gold); sfx(~_shield~);,,COUNTDOWN,8,YELLOW,halfcountdown,noeffect,,,0,NO,NO,showgold|excludefromrandomlists|workout|curseavoid|cannotreuse,,self.setvar(~gold~[;] self.gold);,,,self.setvar(~gold~[;] self.gold);,,,,,,,
Vacuum Workout,Drain [heart]<d6> health[;]|On 1[;] Heal [heal]6 health instead,2,if(d > 1){ drain(d); sfx(~_drain~); } else if(d == 1){ attackself(-6); sfx(~_heal~); },,MAX4,,RED,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Warlock Workout,Do [sword]<d6> damage|[85%]inflict a modded status effect,2,var stat = rand([~Slush~[;] ~Bleed~[;] ~ShieldEater~[;] ~Stun~[;] ~Blighted~[;] ~Powerdown~[;] ~Too Sweet~[;] ~Sting~[;] ~Demise~[;] ~Storm~[;] ~redshift~[;] ~ncr_error~[;] ~reversenexttarget~]); attack(d); sfxdamage(target[;] d); inflict(stat); sfx(~_curse~);,,EVEN,,,simplify,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Wickerman Workout,Do [fire]6 damage[;]|Heal [heal]2 health,2,attack(6[;] FIRE); sfxdamage(target[;] 6); attackself(-2); sfx(~_heal~);,,COUNTDOWN,10,RED,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Wisp Workout,Make enemy weak to fire[;]|Do [fire]5 damage[;]|Burn a dice,2,inflict(~fireweakness~); attack(5[;] FIRE); sfxdamage(target[;] 5); inflict(FIRE); sfx(~_fire~);,,COUNTDOWN,6,PINK,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Wizard Workout,Gain an extra dice this fight|Do [sword]5 damage,2,attack(5); sfxdamage(target[;] 5); self.extradice++; sfx(~magic_gaindice~);,,REQUIRE6,,PURPLE,simplify,doublerequirements,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Wolf Puppy Workout,Do [sword]3 damage|Gain [fury]fury,2,attack(3); sfxdamage(target[;] 3); inflictself(FURY); sfx(~_fury~);,,EVEN,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Yeti Workout,Do [ice]5 damage|Freeze all dice,2,attack(5[;] ICE); sfxdamage(target[;] 5); inflict(ICE[;] ALL); sfx(~_ice~);,,REQUIRE1|REQUIRE1,,BRIGHTCYAN,increaserange,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Ms. Yeti Workout,Do [ice]<d6> damage|Inflict [slush]2 slush,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(~Slush~); sfx(~_ice~);,,ODD,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Elf Workout,Gain [regen]1 regen|Do [sword]5 damage,2,inflictself(~Regen~); sfx(~_cure~); attack(5); sfxdamage(target[;] 5);,,REQUIRE6,,RED,simplify,doublerequirements,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Christmas Tree Workout,Do [sword]<d6> damage|Mimic an ornament,2,var orn = rand([~heal~[;] ~sharp~[;] ~weak~[;] ~bleed~[;] ~reduce~[;] ~rang~[;] ~shield~]); attack(d); sfxdamage(target[;] d); if(orn == ~heal~){ attackself(-2); sfx(~_heal~); } else if(orn == ~sharp~){ attack(2); } else if(orn == ~weak~){ inflict(WEAKEN); sfx(~_weaken~); } else if(orn == ~bleed~){ inflict(~Bleed~); sfx(~_poison~); } else if(orn == ~reduce~){ inflictself(REDUCE); sfx(~_shield~); } else if(orn == ~rang~){ givedice(d); } else if(orn == ~sheild~){ inflictself(SHIELD[;] 5); sfx(~_shield~); },,NORMAL,,GREEN,add1,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Penguin Workout,Do [ice]<d6> damage[;]|On 8[;] Freeze all dice,2,attack(d[;] ICE); sfxdamage(target[;] d); if(d == 8){ inflictself(ICE[;] ALL); sfx(~_ice~); },,MAX4|MAX4,,BRIGHTCYAN,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Polar Bear Workout,Do [ice]<d6> damage[;]|Freeze a dice[;]|Inflict [bleed]1 bleed,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~); inflict(~Bleed~); sfx(~_poison~);,,NORMAL,,BRIGHTCYAN,add1,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Gingerbreadman Workout,Do [sword]<d6> damage[;]|Return a dice,2,attack(d); sfxdamage(target[;] d); var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice);,,MAX5|MAX5,8,GREEN,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Ghosts Of Xmas Workout,Heal [heal]4 health[;]|if excess do 5 damage,2,attackself(-4); sfx(~_heal~); if(self.hp + 4 > self.maxhp) { attack(5); sfxdamage(target[;]5); },,ODD,,GREEN,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Grinch Workout,Inflict [weaken]Heater|Do [fire]4 damage,2,attack(4[;] FIRE); sfxdamage(target[;] 4); sfx(~_weaken~); inflict(~heater~);,,COUNTDOWN,6,ORANGE,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Rudy Workout,Do [sword]<d6> damage[;]|On 4[;] Inflict [redshift]redshift,2,attack(d); sfxdamage(target[;] d); if(d == 4){ inflict(~redshift~); sfx(~_shock~); },,EVEN,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Xmas Wizard Workout,Do [sword]4 damage|Gain [grace]3 regeneration,2,attack(4); sfxdamage(target[;] 4); inflictself(~regeneration~[;] 3); sfx(~_cure~);,,REQUIRE1,,,simplify,doublerequirements,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Miser Workout,[85%]Do [fire]<d6> damage on odd turn|[85%]Do [ice]<d6> damage on even turn|[90%]inflict statuses respectively,2,if(turn % 2 == 0){ attack(d[;] ICE); sfxdamage(target[;]d); inflict(ICE); sfx(~_ice~); } else { attack(d[;] FIRE); sfxdamage(target[;]d); inflict(FIRE); sfx(~_fire~); },,NORMAL,,PINK,add1,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Gardener Workout,Do [weaken]<d6> damage|On 1[;] Inflict 2 [weaken]weaken|On 1[;] Do [weaken]4 damage,2,if(d == 1){ attack(4[;] WEAKEN); inflict(WEAKEN[;] 2); sfxdamage(target[;] 4); sfx(~_weaken~); } else { attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); },,NORMAL,,ORANGE,reducesize,complicate,,,0,NO,NO,excludefromrandomlists|workout|curseavoid|cannotreuse,,,,,,,,,,,,
Upcoming Weapons,,2,,,,,GRAY,,,,,0,YES,NO,cannotsteal|skillcard,,var test = self.equipment; self.equipment = []; self.setvar(~equipmentstash~|~~); self.setvar(~equipmentupgraded~|~~); self.reverttoequipmentlayout(); self.equipment = test; var oldskillcard = self.createskillcard(~Jester Deck~); e.equipmentpanel = oldskillcard.equipmentpanel; e.skillcard = ~jester~; e.skillcard_special = true; Deck.lookahead = 6; Deck.snapbutton = false; e.width = 132 * 6; e.height = 150 * 8 - 45 * 7 + (102 * 6 - 45 * 3) + 15;,,,runscript(~christmasspecial/warriorpreperations/onturnstart~[;][self]);,,,,,,,
Preview Equipment,Look at Damage Phase,1,sfx(~_thinghappens~); runscript(~christmasspecial/warriorpreperations/movetodamagephase~[;][self]);,,NORMAL,,GRAY,,,,,0,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Completely Prepared,Switch to damage phase,1,sfx(~_thinghappens~); runscript(~christmasspecial/warriorpreperations/movetodamagephase~[;][self]);,,,,GRAY,,,,,0,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Binary Blast,Do [sword]6 damage|,1,attack(6); sfxdamage(target[;] 6); sfx(~_plasma~);,Plasma Gun,DOUBLES|DOUBLES,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Parity Flip,Flips dice parity,1,if (d % 2 == 0) {givedice(d - 1);} else {givedice(d + 1);},Megabump,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Parity Flip_upgraded,Flips dice parity[;]|return the dice,1,if (d % 2 == 0) {givedice([d - 1|d]);} else {givedice([d + 1|d]);},Megabump,NORMAL,,GREEN,,,,,0,YES,NO,,1,,,,,,,,,,,
Rerow,Reroll the dice with the|same parity,1,if (d % 2 == 0) {givedice(rand([2|4|6]));} else {givedice(rand([1|3|5]));},Megabump,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Rerow_upgraded,Reroll the dice with the|same parity|,1,if (d % 2 == 0) {givedice(rand([2|4|6]));} else {givedice(rand([1|3|5]));},Megabump,NORMAL,,GREEN,change_power,complicate,,,2,YES,NO,,1,,,,,,,,,,,
Scrambler,Bumps or nudges dice[;]|wraps value,1,if (chance(50)) {var res = d - 1; if (res == 0) res = 6; givedice(res);} else {var res = d + 1; if (res == 7) res = 1; givedice(res);},Megabump,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Scrambler_upgraded,Bumps or nudges dice[;]|wraps value|,1,if (chance(50)) {var res = d - 1; if (res == 0) res = 6; givedice(res);} else {var res = d + 1; if (res == 7) res = 1; givedice(res);},Megabump,NORMAL,,GREEN,change_power,complicate,,,2,YES,NO,,1,,,,,,,,,,,
Scrambler_downgraded,Bumps or nudges dice[;]|wraps value,1,if (chance(50)) {var res = d - 1; if (res == 0) res = 6; givedice(res);} else {var res = d + 1; if (res == 7) res = 1; givedice(res);},Megabump,RANGE25,,GREEN,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Obsidian Bauble,Return an 8...,2,,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,curseattract,1,,,,,,,,var newdice = new elements.Dice((actualdice[0].x + actualdice[1].x) / 2|actualdice[0].y); newdice.owner = self; newdice.basevalue = 1; newdice.modifier = 7; var sprite = new displayobjects.HaxegonSprite(0|0|~ui/dice/dice8~|0|0); newdice.graphic.dicegfx = sprite; sprite.x = newdice.x; sprite.y = newdice.y; self.dicepool.push(newdice); inflictself(CURSE);,,,
Obsidian Bauble_upgraded,Return a 10...,2,,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,curseattract,1,,,,,,,,var newdice = new elements.Dice((actualdice[0].x + actualdice[1].x) / 2|actualdice[0].y); newdice.owner = self; newdice.copyfrom(actualdice[0]); newdice.basevalue = 1; newdice.modifier = 9; var sprite = new displayobjects.HaxegonSprite(0|0|~ui/dice/dice10~|0|0); newdice.graphic.dicegfx = sprite; sprite.x = newdice.x; sprite.y = newdice.y; self.dicepool.push(newdice); inflictself(CURSE);,,,
Obsidian Bauble_downgraded,Return a 6,2,givedice(6);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,YES,NO,curseavoid,1,,,,,,,,,,,
Blasto,Do [sword]7 damage,2,attack(7); sfxdamage(target[;] 7);,Plasma Gun,COUNTDOWN,7,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Key 1,Do [sword]4 damage,1,attack(4); sfxdamage(target[;] 4);,Plasma Gun,REQUIRE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Key 2,Do [sword]4 damage,1,attack(4); sfxdamage(target[;] 4);,Plasma Gun,REQUIRE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Key 3,Do [sword]4 damage,1,attack(4); sfxdamage(target[;] 4);,Plasma Gun,REQUIRE3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Key 4,Do [sword]4 damage,1,attack(4); sfxdamage(target[;] 4);,Plasma Gun,REQUIRE4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Key 5,Do [sword]4 damage,1,attack(4); sfxdamage(target[;] 4);,Plasma Gun,REQUIRE5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Key 6,Do [sword]4 damage,1,attack(4); sfxdamage(target[;] 4);,Plasma Gun,REQUIRE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Hedge Clippers,Do damage equal to|twice the difference,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) { attack(2 * (bigdice - smalldice)); sfxdamage(target|2 * (bigdice - smalldice)); },Replicate,NORMAL|NORMAL,,RED,change_power,decreaserange,,,0,NO,NO,reunion|halloweenspecial,,,,,,,,,,,,
Hedge Clippers_upgraded,Do damage equal to|triple the difference,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) { attack(3 * (bigdice - smalldice)); sfxdamage(target|3 * (bigdice - smalldice)); },Replicate,NORMAL|NORMAL,,RED,,,,,0,NO,NO,reunion|halloweenspecial,,,,,,,,,,,,
Defensive Style,You are more likely to|have [shield]shield based|equipment,1,,Plasma Gun,,,ORANGE,change_power,,,,0,NO,NO,bonusphases:christmasspecial/warriorpreperations/damagephasesshield,,,,,,,,,,,,
Defensive Style_upgraded,You are more likely to|have good [shield]shield|based equipment,1,,Plasma Gun,,,ORANGE,,,,,0,NO,NO,bonusphases:christmasspecial/warriorpreperations/damagephasesshield,,,,,,,,,,,,
Pocket Rock,A Rock will always|appear in the upcoming|equipment,1,,Plasma Gun,,,RED,change_power,,,,0,NO,NO,bonusequipment:Rock,,,,,,,,,,,,
Pocket Rock_upgraded,Two Rocks will always|appear in the upcoming|equipment,1,,Plasma Gun,,,RED,,,,,0,NO,NO,bonusequipment:Rock/Rock,,,,,,,,,,,,
Backup Plan,Change the upcoming|equipment,1,runscript(~christmasspecial/warriorpreperations/grabdamagephase~[;][self]); sfx(~_thinghappens~);,Replicate,ODD,,PURPLE,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Backup Plan_upgraded,Change the upcoming|equipment|,1,runscript(~christmasspecial/warriorpreperations/grabdamagephase~[;][self]); sfx(~_thinghappens~);,Replicate,ODD,,PURPLE,,,,,2,YES,NO,,,,,,,,,,,,,
Double Trouble_upgraded,Do [sword]15 damage|If 0 Drain [heart] 15 health,1,if(d == 0){ drain(15); sfx(~_drain~); } else { attack(15); sfxdamage(target[;] 15); },,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Double Trouble,Do [sword]10 damage|If 0 Drain [heart] 10 health,1,if(d == 0){ drain(10); sfx(~_drain~); } else { attack(10); sfxdamage(target[;] 10); },,DOUBLES|DOUBLES,,RED,change_power,change_power,,0,NO,NO,,,,,,,,,,,,,,
Double Trouble_downgraded,Do [sword]7 damage|If 0 Drain [heart] 4 health,1,if(d == 0){ drain(4); sfx(~_drain~); } else { attack(7); sfxdamage(target[;] 7); },,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Sing Along,Sing a song and gain a [bownote][]note|of that color[;]|return the dice,2,inflictself(self.getvar(~notes~)[d - 1]); sfx(~_thinghappens~); givedice(d); runscript(~christmasspecial/mariahcarey/todeckmode~|[self]);,,NORMAL,,GRAY,,,,,0,YES,NO,,,,,,,,,,,,,
[rednote]Red_Note,,1,,Megabump,,,RED,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[greennote]Green_Note,,1,,Megabump,,,GREEN,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[reennote][red]Reen_[green]Note,,1,,Megabump,,,GRAY,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[yellownote]Yellow_Note,,1,,Megabump,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[orangenote]Orange_Note,,1,,Megabump,,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[bownote][yellow]Ra[green]in[blue]bo[purple]w_N[orange]ot[red]e,,1,,Megabump,,,GRAY,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[bluenote]Blue_Note,,1,,Megabump,,,BLUE,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[blacknote]Black_Note,,1,,Megabump,,,BLACK,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
[purplenote]Purple_Note,,1,,Megabump,,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Tiny Pocket,[gray](once per battle),2,,Catapult,REQUIRE6,,GRAY,reducesize,noeffect,,,0,YES,YES,excludefromrandomlists|skillcard|skill:Tiny Pocket@skill,,,,,,,,,,,,
Tiny Pocket@skill,[gray](once per battle),2,,Catapult,REQUIRE6,,GRAY,reducesize,noeffect,,,0,YES,YES,excludefromrandomlists|skillcard,,,,,,,,,,,,
Supercharger,Do [sword]<d6> damage[;]|If requires 3 do [sword]<double> dmg,1,if(e.slots[0] == ~REQUIRE3~){ attack(d * 2); sfxdamage(target[;] d * 2); } else { attack(d); sfxdamage(target[;] d); },,NORMAL,,RED,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Supercharger_upgraded,Do [sword]<d6> damage[;]|If requires 3 do [sword]7 dmg,1,if(e.slots[0] == ~REQUIRE3~){ attack(7); sfxdamage(target[;] 7); } else { attack(d); sfxdamage(target[;] d); },,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Broken Ray Gun,Do [sword]<d6> damage[;]|if durablity is lower than 2|Do [sword]<d6> + 3 damage,2,if(e.totalusesremaining < 2){ attack(d + 3); sfxdamage(target[;] d + 3); } else { attack(d); sfxdamage(target[;] d); },,MIN3,,RED,add1,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Polished Turd,Do [sword]1 damage[;]|if durablity is 3 |do [sword]6 dmg instead,2,if(e.totalusesremaining == 3){ attack(6); sfxdamage(target[;] 6); } else { attack(1); sfxdamage(target[;] 1); },,COUNTDOWN,7,ORANGE,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Polished Turd_upgraded,Do [sword]1 damage[;]|if durablity is 2 or more|do [sword]6 dmg instead,2,if(e.totalusesremaining >= 2){ attack(6); sfxdamage(target[;] 6); } else { attack(1); sfxdamage(target[;] 1); },,MIN2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Blood Pocket,Drain [heart]5 health,2,drain(5); sfx(~_drain~);,Blood Sip,REQUIRE6|REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blood Pocket_upgraded,Drain [heart]7 health,2,drain(7); sfx(~_drain~);,Blood Sip,REQUIRE6|REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blood Pocket_downgraded,Drain [heart]3 health,2,drain(3); sfx(~_drain~);,Blood Sip,REQUIRE6|REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Spare 1@ll2,A spare one,2,,Magic Dice,SPARE1,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,excludefromrandomlists|curseavoid|skillcard|skill:Spare 1@ll2skill,1,,,,,,,,,,,
Spare 1@ll2skill,A spare one,2,,Magic Dice,SPARE1,,YELLOW,change_power,burnsparedice,,none,0,YES,NO,excludefromrandomlists|curseavoid|skillcard,1,,,,,,,,,,,
Divine Bacteria,Inflict [poison]1[;] return the dice|50% chance to duplicate|[gray](Reuseable),2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; }  inflict(POISON); sfx(~_poison~[;]~~[;]0.2); if(chance(odds)) { self.textparticle(~Success!~); givedice([d[;] d]); } else { givedice(d); },,REQUIRE6,,PURPLE,change_power,change_power,,,6,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Bacteria_downgraded,Inflict [poison]1[;] return the dice|50% chance to triplicate|[gray](Reuseable),2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; }  inflict(POISON); sfx(~_poison~[;]~~[;]0.2); if(chance(odds)) { self.textparticle(~Success!~); givedice([d[;] d[;] d]); } else { givedice(d); },,REQUIRE6,,PURPLE,increaserange,change_power,,,6,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Divine Bacteria_upgraded,Inflict [poison]1[;] return the dice|50% chance to duplicate|and inflict [poison]2 instead|[gray](Reuseable),2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; }    if(chance(odds)) { inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2); self.textparticle(~Success!~); givedice([d[;] d]); } else { inflict(POISON); sfx(~_poison~[;]~~[;]0.2); givedice(d); },,REQUIRE6,,PURPLE,change_power,change_power,,,6,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Jammed Pea Shooter,Do [sword]2 damage|On countdown reduce[;]| do [sword]1 damage,2,sfxdamage(target[;]2); attack(2);,Pea Gun,COUNTDOWN,24,RED,change_power,change_power,,,0,NO,NO,,,,,,,,sfxdamage(target[;]1); attack(1);,,,,,
Jammed Pea Shooter_upgraded,Do [sword]2 damage|On countdown reduce[;]| do [sword]2 damage,2,sfxdamage(target[;]2); attack(2);,Pea Gun,COUNTDOWN,24,RED,change_power,change_power,,,0,NO,NO,,,,,,,,sfxdamage(target[;]2); attack(2);,,,,,
Jammed Pea Shooter_downgraded,Do [sword]2 damage,2,sfxdamage(target[;]2); attack(2);,Pea Gun,COUNTDOWN,24,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Spare Snake,A spare one|Roll another one on use,2,givedice(1);,Magic Dice,SPARE1,,GREEN,,burnsparedice,,none,0,YES,NO,excludefromrandomlists|curseavoid|skillcard|skill:Spare Snake@skill,1,,,,,,,,,,,
Spare Snake@skill,A spare one|Roll another one on use,2,givedice(1);,Magic Dice,SPARE1,,GREEN,,burnsparedice,,none,0,YES,NO,excludefromrandomlists|curseavoid|skillcard,1,,,,,,,,,,,
Third Sun,A spare one|Roll two more ones on use,2,givedice([1[;]1]);,Magic Dice,SPARE1,,ORANGE,,burnsparedice,,none,0,YES,NO,excludefromrandomlists|curseavoid|skillcard|skill:Third Sun@skill,1,,,,,,,,,,,
Third Sun@skill,A spare one|Roll two more ones on use,2,givedice([1[;]1]);,Magic Dice,SPARE1,,ORANGE,,burnsparedice,,none,0,YES,NO,excludefromrandomlists|curseavoid|skillcard,1,,,,,,,,,,,
Combo Punch,Do [sword]<d6> damage[;]|Gain [combo] Combo,1,inflictself(~combo~); attack(d); sfxdamage(target[;] d); sfx(~_dodge~);,,MAX3,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Combo Punch_upgraded,Do [sword]<d6> damage[;]|Gain [combo] 2 Combo,1,inflictself(~combo~[;] 2); attack(d); sfxdamage(target[;] d); sfx(~_dodge~);,,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Combo Kick,Do [sword]<d6> damage|If you have [combo]Combo |Do [sword]<double> damage,2,if(getstatusself(~combo~) > 0){ attack(d * 2); sfxdamage(target[;] d * 2); } else { attack(d); sfxdamage(target[;] d); },,MAX3|MAX2,,RED,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Combo Jab,Do [sword]<d6> damage[;]|On [combo]combo[;] Heal [heal]3 hp,1,if(getstatusself(~combo~) > 0){ attackself(-3); sfx(~_heal~); attack(d); sfxdamage(target[;] d); } else { attack(d); sfxdamage(target[;] d); },,ODD,,RED,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Combo Starter,Gain [combo]Combo,1,inflictself(~combo~); sfx(~_dodge~);,,COUNTDOWN,8,YELLOW,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Chaos Engineering,Destroy all equipment[;]|CPU +1 for each destroyed,1,if(simulation) { bonus(100); } else{ if(self.isplayer){ adjustrobotcounter(roboterror(self)); } else { adjustrobotcounter(roboterror(self)); inflictself(~errorall~|1); } },Oh No!,NORMAL,,GRAY,change_power,change_power,excludefromrandomlists|cannotsteal,,0,NO,NO,,,,,,,,,,,,,if(!self.isplayer){ inflictself(~errorall~|1); }
Chaos Engineering_upgraded,Destroy all equipment[;]|[sword]1 & CPU +1 per destroyed,1,if(simulation) { bonus(100); } else{ if(self.isplayer){ var dmg = roboterror(self); adjustrobotcounter(dmg); attack(dmg); sfxdamage(target[;]dmg); } else { var dmg = roboterror(self); adjustrobotcounter(dmg); attack(dmg); sfxdamage(target[;]dmg); inflictself(~errorall~|1); } },Oh No!,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,if(!self.isplayer){ inflictself(~errorall~|1); }
Chaos Engineering_downgraded,Destroy all equipment[;]|CPU +2 for each destroyed,1,if(simulation) { bonus(100); } else{ if(self.isplayer){ adjustrobotcounter(roboterror(self) * 2); } else { adjustrobotcounter(roboterror(self) * 2); inflictself(~errorall~|1); } },Oh No!,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,if(!self.isplayer){ inflictself(~errorall~|1); }
[peppershaker] Pepper Shaker,On start turn[;] countdowns|in your hand reduce to 1|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~peppershaker~|1); sfx(~_thinghappens~);,,NORMAL,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[peppershaker] Pepper Shaker_upgraded,On start turn[;] countdowns|in your hand activate|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~peppershaker+~|1); sfx(~_thinghappens~);,,NORMAL,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
Return Bicep Curls,Gain [recycle]Re-Equip?|Reroll the dice,1,inflictself(~alternate_reequipnext~); sfx(~_thinghappens~); givedice();,,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Return Bicep Curls_upgraded,Gain [recycle]2 Re-Equip?|Reroll the dice,1,inflictself(~alternate_reequipnext~[;] 2); sfx(~_thinghappens~); givedice();,,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Return Bicep Curls_downgraded,Gain [recycle]Re-Equip?|Give enemy [recycle]Re-Equip?,1,inflictself(~alternate_reequipnext~); inflict(~alternate_reequipnext~); sfx(~_thinghappens~);,,DOUBLES|DOUBLES,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Eggnog,Heal [heal]2 health|Gain [regen]2 Regen|Become [drunk]Drunk,2,attackself(-2); inflictself(~Regen~); inflictself(~drunk~); sfx(~_cure~);,Regenerative Ability,COUNTDOWN,9,GREEN,twothirdcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Chimney,Gain [gift]3 surprise gifts,1,var act = new motion.actuators.SimpleActuator(null|0.01|null); var s = new elements.DiceyScript(~inflictself(\~surprisegift\~[;]3);~); s.set(~inflictself~|inflictself);act.onComplete(s.execute|[self|target]); act.move(); sfx(~_cure~);,,REQUIRE2,,GREEN,simplify,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Null Object Reference,Do [sword]2 damage for every |8 pips in this countdown |at the end of each turn |Immune to error,2,,,COUNTDOWN,1,,change_power,change_power,,,0,NO,NO,errorimmune,,,,,,,,attack(e.remainingcountdown / 8 * 2); sfxdamage(target[;] e.remainingcountdown / 8 * 2);,,,,
Null Object Reference_upgraded,Do [sword]2 damage for every |8 pips in this countdown |at the end of each turn |Immune to error,2,,,COUNTDOWN,8,,,,,,0,NO,NO,errorimmune,,,,,,,,attack(e.remainingcountdown / 8 * 2); sfxdamage(target[;] e.remainingcountdown / 8 * 2);,,,,
Null Object Reference_downgraded,Do [sword]1 damage for every|10 pips in this countdown |at the end of each turn,2,,,COUNTDOWN,1,,change_power,change_power,,,0,NO,NO,,,,,,,,,attack(e.remainingcountdown / 10); sfxdamage(target[;] e.remainingcountdown / 10);,,,,
[wealthyrelatives] Wealthy Relatives,[90%]Gain [gift]5 every turn (equipment|[90%]has a 33% chance to give dice)|[90%][gray](starts in your hand)|[90%][gray](once per battle),2,inflictself(~wealthyrelatives~[;]1); sfx(~_thinghappens~); var act = new motion.actuators.SimpleActuator(null|0.01|null); var s = new elements.DiceyScript(~inflictself(\~surprisegift\~[;]5);~); s.set(~inflictself~|inflictself);act.onComplete(s.execute|[self|target]); act.move();,,NORMAL,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[wealthyrelatives] Wealthy Relatives_upgraded,[90%]Gain [gift]5 every turn (equipment|[90%]has a 50% chance to give dice)|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~wealthyrelatives+~[;]1); sfx(~_thinghappens~);  var act = new motion.actuators.SimpleActuator(null|0.01|null); var s = new elements.DiceyScript(~inflictself(\~surprisegift+\~[;]5);~); s.set(~inflictself~|inflictself);act.onComplete(s.execute|[self|target]); act.move();,,NORMAL,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
Rat King Workout,Inflict [poison]3 poison|Roll 2 new dice,2,inflict(POISON[;] 3); sfx(~_poison~) givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])][;]~~[;]true);,,COUNTDOWN,8,PURPLE,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists|curseavoid|workout,,,,,,,,,,,,
Bug Fixes,[90%]Set error chance to 0 this turn|[gray](Once per battle),1,inflictself(~bugfix~); sfx(~_thinghappens~); self.setvar(~errorchance~[;] 0);,,COUNTDOWN,50,,change_power,noeffect,,,0,YES,YES,,,,,,,,,,,,,
Bug Fixes_upgraded,[90%]Set error chance to 0 this turn|[80%][gray](Once per battle),1,inflictself(~bugfix~); sfx(~_thinghappens~); self.setvar(~errorchance~[;] 0);,,COUNTDOWN,35,,,,,,0,YES,YES,,,,,,,,,,,,,
All Aboard!,Do [sword]5 damage|+[sword]1 per [gift] you have,2,attack(5 + getstatusself(~surprisegift+~)); sfxdamage(target[;] 5 + getstatusself(~surprisegift+~));,,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Delivery!,Gain [gift]3 surprise gifts,2,var act = new motion.actuators.SimpleActuator(null[;]0.01[;]null); var s = new elements.DiceyScript(~inflictself(\~surprisegift+\~[;]3);~); s.set(~inflictself~[;]inflictself); act.onComplete(s.execute[;][self[;]target]); act.move(); sfx(~_cure~);,,COUNTDOWN,7,GREEN,halfcountdown,change_power,,,0,YES,NO,,,,,,,,,,,,,
Delivery!_downgraded,Gain [gift]2 surprise gifts,2,var act = new motion.actuators.SimpleActuator(null[;]0.01[;]null); var s = new elements.DiceyScript(~inflictself(\~surprisegift+\~[;]2);~); s.set(~inflictself~[;]inflictself); act.onComplete(s.execute[;][self[;]target]); act.move(); sfx(~_cure~);,,COUNTDOWN,7,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
All Aboard!_upgraded,Do [sword]5 damage|+[sword]2 per [gift] you have,2,attack(5 + getstatusself(~surprisegift+~) * 2); sfxdamage(target[;] 5 + getstatusself(~surprisegift+~) * 2);,,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
All Aboard!_downgraded,Do [sword]5 damage,2,attack(5); sfxdamage(target[;] 5);,,COUNTDOWN,8,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ticket Dispenser,Do [sword]1 damage|[gray](Reuseable),2,attack(1); delay(1.0); sfxdamage(target[;] 1);,,COUNTDOWN,1,RED,change_power,complicate,,,5,NO,NO,excludefromrandomlists,,,,Delay(1.0);,,,,,,,,
Ticket Dispenser_upgraded,Do [sword]2 damage|[gray](Reuseable),2,attack(2); delay(1.0); sfxdamage(target[;] 2);,,COUNTDOWN,1,RED,,,,,5,NO,NO,excludefromrandomlists,,,,Delay(1.0);,,,,,,,,
Pod Shooter,Do [sword]2 damage|[gray](Reuseable),1,attack(2); sfxdamage(target[;] 2);,,COUNTDOWN,12,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pod Shooter_upgraded,Do [sword]4 damage|[gray](Reuseable),1,attack(4); sfxdamage(target[;] 4);,,COUNTDOWN,12,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pod Shooter_downgraded,Do [sword]2 damage,1,attack(2); sfxdamage(target[;] 2);,,COUNTDOWN,12,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Null Shooter,[85%]Do [sword]1 damage if dice is negative|[gray](Reuseable),1,if(d < 1){ attack(1); sfxdamage(target[;] 1); } else { self.textparticle(~[red]NOT NEGATIVE~); },,NORMAL,,,change_power,change_power,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Null Shooter_upgraded,[85%]Do [sword]2 damage if dice is negative|[gray](Reuseable),1,if(d < 1){ attack(2); sfxdamage(target[;] 2); } else { self.textparticle(~[red]NOT NEGATIVE~); },,NORMAL,,,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Null Shooter_downgraded,[85%]Do [sword]1 damage if dice is negative,1,if(d < 1){ attack(1); sfxdamage(target[;] 1); } else { self.textparticle(~[red]NOT NEGATIVE~); },,NORMAL,,,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
[furyring] Fury Ring,After doing [sword]6 or more[;]|gain [fury]1 if you had no [fury]|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~furyring~[;]1); sfx(~_thinghappens~); ,,NORMAL,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[furyring] Fury Ring_upgraded,After doing [sword]5 or more[;]|gain [fury]1 if you had no [fury]|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~furyring+~[;]1); sfx(~_thinghappens~); ,,NORMAL,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
Wail@jester,Silence Enemy,2,inflict(~enemysilence~); sfx(~_silence~); bonus(1000);,Dial Up Sounds,REQUIRE5,,PURPLE,change_requirements,doublerequirements,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Wail@jester_upgraded,Silence Enemy,2,inflict(~enemysilence~); sfx(~_silence~); bonus(1000);,Dial Up Sounds,MIN5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Squawk@jester,Silence Enemy,2,inflict(~enemysilence~); sfx(~_silence~); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Squawk@jester_upgraded,Do [sword]2 damage|Silence Enemy,2,attack(2); inflict(~enemysilence~); sfx(~_silence~); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Squawk@jester_downgraded,Silence Enemy,2,inflict(~enemysilence~); sfx(~_silence~); bonus(1000);,Dial Up Sounds,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
[trusty] Trusty Blade,Add a normal-slot weapon|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustyblade~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a blade~[;][null[;]getequipmentlist(null[;][~large~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]false[;]false]) |true|false|e);,,NORMAL,,GRAY,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Blade_downgraded,Add a normal-slot weapon|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustyblade~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a blade~[;][null[;]getequipmentlist(null[;][~large~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]false[;]false]) |true|false|e);,,EVEN,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Blade_upgraded,Add an upgraded weapon|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustyblade+~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a blade~[;][null[;]getequipmentlist(null[;][~large~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]false[;]true]) |true|false|e);,,NORMAL,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Pole,Add a countdown weapon|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustypole~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a pole~[;][null[;]getequipmentlist(null[;][~large~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]false[;]false]) |true|false|e);,,NORMAL,,GRAY,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Pole_downgraded,Add a countdown weapon|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustypole~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a pole~[;][null[;]getequipmentlist(null[;][~large~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]false[;]false]) |true|false|e);,,EVEN,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Pole_upgraded,[95%]Add an upgraded countdown|[95%]to your hand each turn|[95%][gray](starts in your hand)|[95%][gray](once per battle),2,inflictself(~trustypole+~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a pole~[;][null[;]getequipmentlist(null[;][~large~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]false[;]true]) |true|false|e);,,NORMAL,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Maneuver,Add a dice manipulator|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustymaneuver~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a maneuver~[;][getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]null[;]false[;]false]) |true|false|e);,,NORMAL,,GRAY,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Maneuver_downgraded,Add a dice manipulator|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustymaneuver~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a maneuver~[;][getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]null[;]false[;]false]) |true|false|e);,,EVEN,,GRAY,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
[trusty] Trusty Maneuver_upgraded,Add an upgraded dice manip|to your hand each turn|[gray](starts in your hand)|[gray](once per battle),2,inflictself(~trustymaneuver+~[;]1); sfx(~_thinghappens~); giveequipment(runscript(~christmasspecial/warriorthemes/a maneuver~[;][getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~jesteronly~[;]~inventoronly~[;]~vanilla~[;]~onceperbattle~[;]~alternateversion~[;]~immunetotide~])[;]null[;]null[;]false[;]true]) |true|false|e);,,NORMAL,,GRAY,,,,,0,YES,YES,excludefromrandomlists,,,,if(turn == 1) { Deck.movecardto(e|~draw~); },,,,,,,,
Duet,Gain [blacknote]3_Black_notes|[90%]Give enemy [blacknote]2_Black_notes,2,inflictself(~blacknote~[;] 3);  inflict(~blacknote~[;] 2); sfx(~_thinghappens~);,Megabump,MIN4,,,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Duet_upgraded,Gain [blacknote]3_Black_notes|[90%]Give enemy [blacknote]1_Black_note,2,inflictself(~blacknote~[;] 3); inflict(~blacknote~); sfx(~_thinghappens~);,Megabump,MIN4,,,,,,,0,NO,NO,,,,,,,,,,,,,
Major Adjustment,Do [sword]<d6> damage if dice is <var:dice1>|or <var:dice2>|Randomized 7-13 each turn,2,if(d == self.getvar(~dice1~) # d == self.getvar(~dice2~)){ attack(d); sfxdamage(target[;] d); },,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,,,var num1 = rand([7[;]8[;]9[;]10[;]11[;]12[;]13]); var num2 = rand([7[;]8[;]9[;]10[;]11[;]12[;]13]); self.setvar(~dice1~[;]num1); self.setvar(~dice2~[;]num2);,,,,,,,,
Major Adjustment_upgraded,Do [sword]<d6> damage if dice is <var:dice1>|or <var:dice2>|Randomized 7-13 each turn,2,var num1 = rand([7[;]8[;]9[;]10[;]11[;]12[;]13]); var num2 = rand([7[;]8[;]9[;]10[;]11[;]12[;]13]); if(d == num1 # d == num2){ attack(d); sfxdamage(target[;] d); },,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,,,self.setvar(~dice1~[;]num1); self.setvar(~dice2~[;]num1);,,,,,,,,
Boston Basher,Do [sword]<d6> damage[;] and|inflict [bleed]Bleed on everyone,2,attack(d); sfxdamage(target[;] d); inflict(~Bleed~[;]1); inflictself(~Bleed~[;]1); sfx(~_poison~);,Bitey Bitey,NORMAL|FREE1,,RED,reducesize,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~Bleed~[;]1);
Boston Basher_downgraded,Do [sword]<d6> damage[;] but|inflict [bleed]Bleed on yourself,2,attack(d); sfxdamage(target[;] d); inflictself(~Bleed~[;]1); sfx(~_poison~);,Bitey Bitey,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~Bleed~[;]1);
Boston Basher_weakened,Do [sword]<d6> damage[;] but|inflict [bleed]Bleed on yourself,1,attack(d); sfxdamage(target[;] d); inflictself(~Bleed~[;]1); sfx(~_poison~);,Bitey Bitey,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~Bleed~[;]1);
Rigged Calculate,Autoroll immediately[;] but|enemy gains [fury]Fury[],1,robotroll(true); inflict(FURY); sfx(~_fury~);,Cheat,MIN4,,PINK,simplify,change_power,,,0,YES,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Rigged Calculate_downgraded,Autoroll immediately[;] but|enemy gains 2 [fury]Fury[],1,robotroll(true); inflict(FURY[;]2); sfx(~_fury~);,Cheat,MIN4,,PINK,,,,,0,YES,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Bolts And Screws,Do [sword]12 damage|Unable to roll |more dice when used,2,attack(12); sfxdamage(target[;] 12); self.setvar(~stop~[;] 1); inflictself(~bolts~);,,ODD|EVEN,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Bolts And Screws_upgraded,Do [sword]14 damage|Unable to roll |more dice when used,2,attack(14); sfxdamage(target[;] 14); self.setvar(~stop~[;] 1); inflictself(~bolts~);,,ODD|EVEN,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Return Bicep Curls@robot,Gain [recycle]Re-Equip?|Reroll the dice,1,var reroll = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); inflictself(~alternate_reequipnext~); sfx(~_thinghappens~); givedice([reroll]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Return Bicep Curls@robot_upgraded,Gain [recycle]2 Re-Equip?|Reroll the dice,1,var reroll = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); inflictself(~alternate_reequipnext~[;] 2); sfx(~_thinghappens~); givedice([reroll]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);,,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Return Bicep Curls@robot_downgraded,Gain [recycle]Re-Equip?|Give enemy [recycle]Re-Equip?,1,inflictself(~alternate_reequipnext~); inflict(~alternate_reequipnext~); sfx(~_thinghappens~);,,DOUBLES|DOUBLES,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Key Cauldron,Do [sword]3 damage[;]|get a new dice,1,attack(3); givedice(); sfxdamage(target[;] 3);,Random Roll,MIN2,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Key Cauldron_upgraded,Do [sword]5 damage[;]|get a new dice,1,attack(5); givedice(); sfxdamage(target[;] 5);,Random Roll,MIN2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice();
Key Cauldron_downgraded,Do [sword]3 damage[;]|return the dice,1,attack(3); givedice(d); sfxdamage(target[;] 3);,Random Roll,MIN2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Dust Devil,[95%]Weaken [weaken]ALL[;] return dice|[95%]50%: weaken yourself too,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } inflict(WEAKEN[;]ALL); sfx(~_weaken~); if(chance(odds)) {  } else { inflictself(WEAKEN|ALL); self.applyequipmentcurses(); self.textparticle(~Backfired!~); } givedice([actualdice[0].basevalue[;]actualdice[1].basevalue[;]actualdice[2].basevalue]);,Scream,REQUIRE6|REQUIRE6|REQUIRE6,,ORANGE,increaserange,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dust Devil_downgraded,[95%]Weaken [weaken]ALL[;] return dice|[95%]Weaken yourself too,2,inflict(WEAKEN[;]ALL); sfx(~_weaken~); inflictself(WEAKEN|ALL); self.applyequipmentcurses(); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue[;]actualdice[2].basevalue]);,Scream,REQUIRE6|REQUIRE6|REQUIRE6,,ORANGE,increaserange,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Smuggled Dagger,Do [sword]2 damage|[gray](reusable),2,attack(2); sfxdamage(target[;] 2);,Catapult,MAX5,,RED,reducesize,noeffect,,,-1,NO,NO,excludefromrandomlists|skillcard|skill:Smuggled Dagger@skill,,,,,,,,,,,,
Smuggled Dagger@skill,Do [sword]2 damage|[gray](reusable),2,attack(2); sfxdamage(target[;] 2);,Catapult,MAX5,,RED,reducesize,noeffect,,,-1,NO,NO,excludefromrandomlists|skillcard,,,,,,,,,,,,
Smuggled Sword,Do [sword]<d6> damage|[gray](reusable),2,attack(d); sfxdamage(target[;] d);,Catapult,MAX5,,RED,reducesize,noeffect,,,2,NO,NO,excludefromrandomlists|skillcard|skill:Smuggled Sword@skill,,,,,,,,,,,,
Smuggled Sword@skill,Do [sword]<d6> damage|[gray](reusable),2,attack(d); sfxdamage(target[;] d);,Catapult,MAX5,,RED,reducesize,noeffect,,,2,NO,NO,excludefromrandomlists|skillcard,,,,,,,,,,,,
Segmentation Fault,Do damage equal to|2x excess value inserted|Immune to errors,1,var dicehistory = e.dicehistory; var sum = 0; for(i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; if(sum >= e.countdown) { break; } } if(sum - e.countdown > 0) { attack(2 * (sum - e.countdown)); sfx(~_fire~[;]~~[;]0.1); sfxdamage(2 * (sum - e.countdown)); } else self.textparticle(~No effect!~);,Accelerate,COUNTDOWN,7,GRAY,change_power,change_power,,none,0,NO,NO,errorimmune,,,,,,,,,,,,
Segmentation Fault_upgraded,Do damage equal to|2x excess value inserted|Immune to errors,1,var dicehistory = e.dicehistory; var sum = 0; for(i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; if(sum >= e.countdown) { break; } } if(sum - e.countdown > 0) { attack(2 * (sum - e.countdown)); sfx(~_fire~[;]~~[;]0.1); sfxdamage(2 * (sum - e.countdown)); } else self.textparticle(~No effect!~);,Accelerate,COUNTDOWN,4,GRAY,,,,none,0,NO,NO,errorimmune,,,,,,,,,,,,
Segmentation Fault_downgraded,Do [sword]7 damage|Immune to errors,1,attack(7); sfx(~_fire~[;]~~[;]0.1);,Accelerate,COUNTDOWN,7,GRAY,,,,,0,NO,NO,errorimmune,,,,,,,,,,,,
Segmentation Fault_weakened,Do [sword]7 damage|Immune to errors,1,attack(7); sfx(~_fire~[;]~~[;]0.1);,Accelerate,COUNTDOWN,4,GRAY,,,,,0,NO,NO,errorimmune,,,,,,,,,,,,
Bit Flip,You take damage for|dice under 6 instead,2,,Catapult,,,YELLOW,reducesize,noeffect,,,0,NO,NO,excludefromrandomlists|skillcard|skill:Bit Flip@skill,,,,self.setvar(~ll2statusoverride~[;]1);,inflictself(~alternate_anticheat~);,,,,,,,
Bit Flip@skill,You take damage for|dice under 6 instead,2,,Catapult,,,YELLOW,reducesize,noeffect,,,0,NO,NO,excludefromrandomlists|skillcard,,,,self.setvar(~ll2statusoverride~[;]1);,inflictself(~alternate_anticheat~);,,,,,,,
Bad Gateway Drug,Inflict [addiction]<var:errorsthisturnx2> addiction|+2 per error this turn|Immune to errrors,1,inflict(~addiction~|self.getvar(~errorsthisturnx2~)); sfx(~_poison~);,,EVEN,,RED,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlist|errorimmune,,,,,,,,,,,,
Bad Gateway Drug_upgraded,Inflict [addiction]2 addiction|+2 per error this turn|Immune to errrors,1,inflict(~addiction~|self.getvar(~errorsthisturnx2+2~)); sfx(~_poison~);,,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlist|errorimmune,,e.fulldescription = ~Inflict [addiction]<var:errorsthisturnx2+2> addiction[newline]+2 per error this turn[newline]Immune to errrors~; ,,,,,,,,,,
Microdicing,Inflict [addiction]1 addiction|[gray](reusable),1,inflict(~addiction~|1); sfx(~_poison~);,,REQUIRE1,,RED,simplify,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Microdicing_downgraded,Inflict [addiction]1 addiction|[gray](reusable),1,inflict(~addiction~|1); sfx(~_poison~);,,REQUIRE1,,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Cosmic Ray Gun,Do [sword]2 damage|(You take damage for|dice under 6 instead)|[gray](reusable),2,attack(2); sfxdamage(target[;] 2);,Catapult,REQUIRE6,,RED,reducesize,noeffect,,,-1,NO,NO,excludefromrandomlists|skillcard|skill:Cosmic Ray Gun@skill,,,,self.setvar(~ll2statusoverride~[;]1);,inflictself(~alternate_anticheat~);,,,,,,,
Cosmic Ray Gun@skill,Do [sword]2 damage|(You take damage for|dice under 6 instead)|[gray](reusable),2,attack(2); sfxdamage(target[;] 2);,Catapult,REQUIRE6,,RED,reducesize,noeffect,,,-1,NO,NO,excludefromrandomlists|skillcard,,,,self.setvar(~ll2statusoverride~[;]1);,inflictself(~alternate_anticheat~);,,,,,,,
Divine Steinway Axe,Do [sword]<d6> damage every|turn for the next [jinx]4 turns,2,jinx(~Divine Steinway Axe~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]1[;]d); jinx(~Divine Steinway Axe~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d); jinx(~Divine Steinway Axe~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]3[;]d); jinx(~Divine Steinway Axe~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]4[;]d); sfx(~_thinghappens~);,,REQUIRE6,,PINK,add2,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Steinway Axe_downgraded,Do [sword]<d6> damage every|turn for the next [jinx]2 turns,2,jinx(~Divine Steinway Axe~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]1[;]d); jinx(~Divine Steinway Axe~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d); sfx(~_thinghappens~);,,REQUIRE6,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Divine Spiked Shield,Do [sword] equal to lowest dice[;]|gain [shield] equal to highest dice,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } attack(smalldice); sfxdamage(target[;] smalldice); inflictself(SHIELD[;]bigdice); sfx(~_shield~);,,NORMAL|NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Divine Spiked Shield_upgraded,Do [sword] equal to highest dice[;]|gain [shield] equal to lowest dice,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } attack(bigdice); sfxdamage(target[;] bigdice); inflictself(SHIELD[;]smalldice); sfx(~_shield~);,,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Patch Notes,Lady Luck Episode 2 v1.1:|- Changed loadouts to work|better with 3 dice|- Increased dousiness by 5%|- Removed Paul||[gray](do not equip this please),2,,,,,GRAY,reducesize,noeffect,,,0,NO,NO,excludefromrandomlists|skillcard|skill:Patch Notes@skill,,,,,,,,,,,,
Patch Notes@skill,[gray](Wh- I explicitly said not|[gray]to equip this. Why?)||[gray](...gah[;] [gray]I guess I have to|[gray]give you something now...)||Gain [heal]2 max health|after each combat. [gray](There.),2,,,,,GRAY,reducesize,noeffect,,,0,NO,NO,excludefromrandomlists|skillcard,,inflictself(~patchnotes~);,,,,,,,,,,
Holding The Note,Do [sword]5 damage|Gain [bluenote] blue note|Next turn lose [bluenote]blue notes,2,inflictself(~bluenote~); attack(5); sfxdamage(target[;] 5); sfx(~_thinghappens~); jinx(~Done Holding~[;]~lose all [bluenote]blue notes~[;]~Lose all [bluenote]blue notes~[;]~removestatus(\~bluenote\~);~[;]self[;]self[;]1[;]1);,,EVEN|REQUIRE6,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
What Is That Melody?,Gain 1 of every note|[gray](Once per battle),2,inflictself(~rednote~); inflictself(~greennote~); inflictself(~bluenote~); inflictself(~yellownote~); inflictself(~purpnote~); inflictself(~reennote~); inflictself(~bownote~); inflictself(~blacknote~); inflictself(~orangenote~); sfx(~thinghappens~);,,EVEN|EVEN|ODD|ODD,,,simplify,complicate,,,0,YES,YES,,,,,,,,,,,,,
Opera,Do [shock]<d6> damage[;]|Gain 1 [rednote]red note if you |don't already have one,2,attack(d[;] SHOCK); sfxdamage(target[;] d); if(getstatusself(~rednote~) == 0){ inflictself(~rednote~); sfx(~thinghappens~); },,MAX3,,YELLOW,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Emotions,[70%]If <var:half> is more than health do [ice]5 damage[;]|gain [bluenote] blue note|[90%]If health > <var:half> do [sword]5 damage[;]|gain [greennote] green note,2,if(self.getvar(~half~) > self.hp){ attack(5[;] ICE); sfx(~_ice~); sfxdamage(target[;] 5); inflictself(~bluenote~); } else { attack(5); sfx(~_heal~); sfxdamage(target[;] 5); inflictself(~greennote~); },,COUNTDOWN,10,CYAN,change_power,change_power,,,0,NO,NO,,,self.setvar(~half~[;] self.maxhp / 2);,,self.setvar(~half~[;] self.maxhp / 2);,self.setvar(~half~[;] self.maxhp / 2);,self.setvar(~half~[;] self.maxhp / 2);,,,,,,
Emotions_upgraded,[70%]If <var:half> is more than health do [ice]7 damage[;]|gain [bluenote] blue note|[90%]If health > <var:half> do [sword]5 damage[;]|gain [greennote] 2 green notes,2,if(self.getvar(~half~) > self.hp){ attack(7[;] ICE); sfxdamage(target[;] 7); sfx(~_ice~); inflictself(~bluenote~); } else { attack(5); sfx(~_heal~); sfxdamage(target[;] 5); inflictself(~greennote~[;] 2); },,COUNTDOWN,10,CYAN,change_power,change_power,,,0,NO,NO,,,self.setvar(~half~[;] self.maxhp / 2);,,,self.setvar(~half~[;] self.maxhp / 2);,self.setvar(~half~[;] self.maxhp / 2);,,,,,,
Emotions_downgraded,[70%]If <var:half> is more than health do [ice]2 damage[;]|gain [bluenote] blue note|[90%]If health > <var:half> do [sword]2 damage[;]|gain [greennote] green note,2,if(self.getvar(~half~) > self.hp){ attack(2[;] ICE); sfx(~_ice~); sfxdamage(target[;] 2); inflictself(~bluenote~); } else { attack(2); sfx(~_heal~); sfxdamage(target[;] 2); inflictself(~greennote~); },,COUNTDOWN,10,CYAN,change_power,change_power,,,0,NO,NO,,,self.setvar(~half~[;] self.maxhp / 2);,,self.setvar(~half~[;] self.maxhp / 2);,self.setvar(~half~[;] self.maxhp / 2);,self.setvar(~half~[;] self.maxhp / 2);,,,,,,
Divine Clod,Do [weaken]10 damage|[gray](once per battle),2,attack(10[;] WEAKEN); sfxdamage(target[;] 10);,,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,ORANGE,reducesize,noeffect,,,0,NO,YES,excludefromrandomlists|skillcard|skill:Divine Clod@skill,,,,,,,,,,,,
Divine Clod@skill,Do [weaken]10 damage|[gray](once per battle),2,attack(10[;] WEAKEN); sfxdamage(target[;] 10);,,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,ORANGE,reducesize,noeffect,,,0,NO,YES,excludefromrandomlists|skillcard,,,,,,,,,,,,
Ballad Of Fire And Ice,Do [fire]<d6> damage[;]|If 5 gain [bluenote] blue note,2,if(d == 5){ inflictself(~bluenote~); sfx(~_ice~); } attack(d[;] FIRE); sfxdamage(target[;] d);,,ODD,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ballad Of Fire And Ice_upgraded,Do [ice]<d6> damage[;]|On 6 gain [rednote] red note,2,if(d == 6){ inflictself(~rednote~); sfx(~_fire~); } attack(d[;] ICE); sfxdamage(target[;] d);,,EVEN,,BRIGHTCYAN,,change_function,,,0,NO,NO,,,,,,,,,,,,,
Ballad Of Fire And Ice_weakened,Do [ice]<d6> damage,2,attack(d[;] ICE); sfxdamage(target[;] d);,,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Ballad Of Fire And Ice_downgraded,Do [fire]<d6> damage,2,attack(d[;] FIRE); sfxdamage(target[;] d);,,ODD,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Baton,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d);,,MAX4,,RED,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Chord,Do [sword]8 damage|Gain [bownote]3 [red]Ra[green]in[black]bo[orange]w_N[blue]ot[yellow]es|[gray](Once Per Battle),2,attack(8); sfxdamage(target[;] 8); inflictself(~bownote~[;] 3); sfx(~_thinghappens~);,,COUNTDOWN,3,PINK,change_power,noeffect,,,0,NO,YES,,,,,,,,,,,,,
Chord_upgraded,Do [sword]9 damage|Gain [bownote]4 [red]Ra[green]in[black]bo[orange]w_N[blue]ot[yellow]es|[gray](Once Per Battle),2,attack(9); sfxdamage(target[;] 9); inflictself(~bownote~[;] 4); sfx(~_thinghappens~);,,COUNTDOWN,3,PINK,,,,,0,NO,YES,,,,,,,,,,,,,
Curtain Call,Remove all notes you have|[gray](Once per battle),2,removestatusself(~rednote~[;] ALL); removestatusself(~reennote~[;] ALL); removestatusself(~greennote~[;] ALL); removestatusself(~bownote~[;] ALL); removestatusself(~yellownote~[;] ALL); removestatusself(~orangenote~[;] ALL); removestatusself(~bluenote~[;] ALL); removestatusself(~blacknote~[;] ALL); removestatusself(~purpnote~[;] ALL);,,COUNTDOWN,12,ORANGE,change_power,noeffect,,,0,NO,YES,finale,,,,,,,,,,,,
Curtain Call_upgraded,Remove all notes you have|[gray](Once per battle),2,removestatusself(~rednote~[;] ALL); removestatusself(~reennote~[;] ALL); removestatusself(~greennote~[;] ALL); removestatusself(~bownote~[;] ALL); removestatusself(~yellownote~[;] ALL); removestatusself(~orangenote~[;] ALL); removestatusself(~bluenote~[;] ALL); removestatusself(~blacknote~[;] ALL); removestatusself(~purpnote~[;] ALL);,,COUNTDOWN,10,ORANGE,,,,,0,NO,YES,finale,,,,,,,,,,,,
Pocket Rocket,Do [sword]1 damage for|each status inflicted|[gray](once per battle),2,var statuseffectcount = getstatus(ALL); if(statuseffectcount == 0) { target.textparticle(~No effect!~); } else{ attack(statuseffectcount ); sfxdamage(target[;] statuseffectcount); },,REQUIRE6,,RED,reducesize,noeffect,,,0,NO,YES,excludefromrandomlists|skillcard|skill:Pocket Rocket@skill,,,,,,,,,,,,
Pocket Rocket@skill,Do [sword]1 damage for|each status inflicted|[gray](once per battle),2,var statuseffectcount = getstatus(ALL); if(statuseffectcount == 0) { target.textparticle(~No effect!~); } else{ attack(statuseffectcount); sfxdamage(target[;] statuseffectcount); },,REQUIRE6,,RED,reducesize,noeffect,,,0,NO,YES,excludefromrandomlists|skillcard,,,,,,,,,,,,
Killer Karaoke,Do [weaken]3 damage|If enemy has less than 50%|health gain [orangenote] orange note,2,attack(3[;] WEAKEN); sfxdamage(target[;] 3); if(target.hp < target.maxhp / 2){ inflictself(~orangenote~); sfx(~_weaken~); },,MIN3,,ORANGE,increaserange,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Pitch Poison,Inflict [poison]1 poison|Gain [purplenote]Purple note if|you dont already have one,2,inflict(POISON); sfx(~_poison~); if(getstatusself(~purpnote~) == 0){ inflictself(~purpnote~); sfx(~thinghappens~); },,COUNTDOWN,4,PURPLE,halfcountdown,noeffect,,,0,NO,NO,,,,,,,,,,,,,
