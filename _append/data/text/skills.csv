Name,Description,Script
Slushie,Inflicts [shiver]3 slush,inflict(~Slush~[;] 3); sfx(~_ice~);
Regenative Ablity,Gain [grace]1 regeneration,inflictself(~regeneration~[;] 1); sfx(~_cure~);
Hibernate,+[heal]2 health[;] +[shield]2 shield,attackself(-2); inflictself(SHIELD[;] 2); sfx(~_shield~); sfx(~_heal~);
Candy Spear,Do [sword]2 dmg[;] +[heal]2 health,attack(2); sfxdamage(target[;] 2); attackself(-2); sfx(~_heal~);
AGAIN!,Take another turn,inflictself(EXTRATURN); sfx(~_thinghappens~);
Card Redraw,Reroll all random cards,sfx(~_thinghappens~); runscript(~christmasspecial/warrior_dotide~[;][self[;]target[;]true]);
Blue Flame,Do [ice]3 and [fire]3 damage,attack(3[;] ICE); attack(3[;] FIRE); sfx(~_fire~); sfx(~_ice~);
Snow Catapult,Do [ice]4 damage,attack(4[;] ICE); sfxdamage(target[;] 4); sfx(~_ice~);
Whelm (2 Uses),Do [sword]2 dmg[;] inflict [bleed],inflict(~Bleed~); sfx(~_poison~); attack(2); sfxdamage(target[;] 2); Gadget.changegadget(self[;] ~Whelm 2 Uses~[;] ~Whelm 1 Use~); Gadget.reactivate(self[;] ~Whelm 1 Use~);
Whelm (1 Use),Do [sword]2 dmg[;] inflict [bleed],inflict(~Bleed~); sfx(~_poison~); attack(2); sfxdamage(target[;] 2); Gadget.changegadget(self[;] ~Whelm 1 Use~[;] ~Whelm 0 Uses~); Gadget.reactivate(self[;] ~Whelm 0 Uses~);
Whelm (0 Uses),Get [quote]Whelm (2 Uses)[quote] next turn,jinx(~Gadget~[;]~Gain whelm 2 uses~[;]~Gain Whelm 2 uses~[;]~inflict(\~Whelm\~[;]%VAR%); sfx(\~_thinghappens\~);~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);
Boom!,[fire]2 dmg to both,attack(2[;]FIRE); sfx(~_fire~); attackself(2[;]FIRE);
Moderatewhelm,[sword]1 dmg[;] +1 each use,attack(1 + getstatusself(~moderatewhelm~)); inflictself(~moderatewhelm~); sfxdamage(target[;]1+getstatusself(~moderatewhelm~));
Coin Clippers,[]+[shield]1 per dice you have,var s = 0; for(d in self.dicepool){ if(d.available()){ s+=1; }; }; if(s > 0){ sfx(~_shield~); inflictself(SHIELD[;]s); };
Safeguard,Shield a random amount,var r = rand([2[;]3[;]3[;]3[;]3[;]4[;]4[;]5]); inflictself(SHIELD[;]r); sfx(~_shield~);
Rollout,Reroll a random amount,var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } var numlist = []; if(dicelist.length > 0) { sfx(~diceroll~); dicelist = shuffle(dicelist); numlist = [0]; for(i in 0...dicelist.length) { numlist.push(numlist[numlist.length - 1] + 1); } numlist.shift(); var r = rand(numlist); for(i in 0...r) { dicelist[i].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); } }
Electrify,Shock a random amount,var r = rand([1[;]1[;]1[;]1[;]1[;]1[;]2[;]2[;]2[;]2[;]2[;]2[;]3[;]3[;]3[;]3[;]4[;]5]); inflict(SHOCK[;] r); sfx(~_shock~);
Light Switch,Copy a dice for next turn,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); }
Proximity Mine,Reroll dice nearest to this,if(!self.isplayer) { self.textparticle(~No effect!~); } else { var proximy = self.getskillcard().y + (self.getskillcard().height / 2) - 132; var proximx = self.getskillcard().x + (self.getskillcard().width / 2) - 110; var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } if(dicelist.length != 0) { var proxlist = []; for(mydice in dicelist) { proxlist.push(((mydice.x - proximx) * (mydice.x - proximx)) + ((mydice.y - proximy) * (mydice.y - proximy))); if(proxlist[proxlist.length - 1] < 0) { proxlist[proxlist.length - 1] = proxlist[proxlist.length - 1] * -1; } } var min = [0[;]999999999999999999999]; for(prox in proxlist) { trace(prox); trace(min[1]); trace(~---~); if(prox < min[1]) { min[1] = prox; min[0] = proxlist.indexOf(prox); } } sfx(~diceroll~); dicelist[min[0]].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); } else { self.textparticle(~No dice!~); } }
Demise,Take 1 damage,pierceattackself(1); sfxdamage(target[;] 1);
Cruciroll,Roll 2 burning dice,inflictself(FIRE[;]2); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]);
Redemption,Get rid of [curse]Curse (once),self.setvar(~sin~[;]0); removestatusself(CURSE[;]getstatusself(CURSE)); sfx(~_survive~); Gadget.changegadget(self[;]~Redemption~[;]~Broken Gadget[][]~);
Bearish Spell,Turn enemy into a bear,inflict(~instanttransform~); sfx(~_thinghappens~); Gadget.changegadget(self[;] ~Bearish Spell~[;] ~Broken Gadget[][]~);
Ice Cream Truck,Freeze everyone,var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } inflict(ICE); self.symbolparticle(ICE); sfx(~_ice~[;]~~[;]0.2);
Frying Pan,Burn everyone,if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } inflict(FIRE); sfx(~_fire~[;]~~[;]0.2); self.symbolparticle(FIRE);
Perfect Cut,[95%]-1 to all dice[;] roll a 1 per each,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue > 1){ extradice.push(1); mydice.animatereroll((mydice.basevalue - 1)[;] self.screenposition()[;] c * 0.05); c++; } } givedice(extradice);
Snow Cover,Roll a few ones,var diceamt = rand([1| 2| 2| 3| 3| 3| 4| 4| 4| 5| 5| 6]); var dicearray = [for(i in 0...diceamt) 1]; givedice(dicearray);
Stress,Gain [heal][]2 max hp (once),self.maxhp += 2; attackself(-2); Gadget.changegadget(self[;] ~Stress~[;] ~Broken Gadget[][]~);
Infinity Fantasy,Get a temporary gadget,Gadget.givegadget(self[;]rand([~Pea Gun~[;]~Stardust~[;]~Power Up~[;]~Throw Dice~[;]~Stress~[;]~Blood Sip~[;]~Snake Eyes~[;]~Magic Dice~[;]~Bubble Gun~[;]~Lucky Shot~[;]~Dramatic Pause~[;]~Teleport~[;]~Random Roll~[;]~Cruciroll~[;]~Ice Cream Truck~[;]~Zap~[;]~Frying Pan~[;]~Mumble~[;]~Needle~[;]~Hook~[;]~Harvest~[;]~Magic Spanner~[;]~Replicate~[;]~Flash Freeze~])[;]true);
Randomizer,Get a temporary gadget (once),var newgadget = rand([~Pea Gun~[;]~Stardust~[;]~Power Up~[;]~Throw Dice~[;]~Stress~[;]~Blood Sip~[;]~Snake Eyes~[;]~Magic Dice~[;]~Bubble Gun~[;]~Lucky Shot~[;]~Dramatic Pause~[;]~Teleport~[;]~Random Roll~[;]~Cruciroll~[;]~Ice Cream Truck~[;]~Zap~[;]~Frying Pan~[;]~Mumble~[;]~Needle~[;]~Hook~[;]~Harvest~[;]~Magic Spanner~[;]~Replicate~[;]~Flash Freeze~]); Gadget.changegadget(self[;] ~Randomizer~[;] newgadget);
Globe,Roll 4 extra dice,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])][;]~~[;]true); sfx(~useitem~);
Random Hit,Do 1-6 dmg of a random type,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); var dam = rand([1[;]2[;]3[;]4[;]5[;]6]); attack(dam[;] type); sfxdamage(target[;] dam); sfx(~_~ + type);
Telescope,+1 dice this fight; get a new dice,givedice(); self.extradice++; sfx(~magic_gaindice~);
thiefyboi,AAAAAAAAAAAAAAAAAAAAAAAAA,var a = ~Thieving Tools@~ + rand([~roll~[;]~vise~[;]~dupli~[;]~spanner~[;]~screw~[;]~bump~[;]~nudge~[;]~pick~]); self.replaceskillcard(a); self.getskillcard().animate(~error~);
Shuffle,Gain a random mod,var effect = rand([~grabbag~[;]~morefluff~[;]~rs~]); removestatusself(~grabbag~); removestatusself(~morefluff~); removestatusself(~rs~); inflictself(effect);
grabbag_internal,(should not appear),for(eq in self.equipment) { if(eq !=self.getskillcard()){ roboterror(self[;][eq]); } } var item1 = rand(getequipmentlist(null[;][~gb~][;][])); var item2 = rand(getequipmentlist(null[;][~gb~][;][])); var item3 = rand(getequipmentlist(null[;][~gb~][;][])); giveequipment([item1[;]item2[;]item3][;]true[;]false);
morefluff_internal,(should not appear),for(eq in self.equipment) { if(eq !=self.getskillcard()){ roboterror(self[;][eq]); } } var item1 = rand(getequipmentlist(null[;][~morefluff~][;][])); var item2 = rand(getequipmentlist(null[;][~morefluff~][;][])); var item3 = rand(getequipmentlist(null[;][~morefluff~][;][])); giveequipment([item1[;]item2[;]item3][;]true[;]false);
rs_internal,(should not appear),for(eq in self.equipment) { if(eq !=self.getskillcard()){ roboterror(self[;][eq]); } } var item1 = rand(getequipmentlist(null[;][~rs~][;][])); var item2 = rand(getequipmentlist(null[;][~rs~][;][])); var item3 = rand(getequipmentlist(null[;][~rs~][;][])); giveequipment([item1[;]item2[;]item3][;]true[;]false);
Delude,Inflict [vanish]1 fade,inflict(~fade~); sfx(~_vanish~);
Emulator,Mimic a card's gadget,if(!self.isplayer) { self.textparticle(~No effect!~); } else { var exceptionlist = [~Emulator~[;]~Boltzmann Brain~[;]~N/A~]; var gadgpool = []; for(eq in self.equipment) { if(eq.isready(true) && !eq.hastag(~skillcard~) && exceptionlist.indexOf(eq.gadget) == -1) { gadgpool.push(eq); } } shuffle(gadgpool); gadgpool[0].animate(~flashandshake~); var gadgettomimic = gadgpool[0].gadget; var emulategadget = new elements.Skill(gadgettomimic); if(emulategadget.name == ~Mirror Smash~) { pierceattackself(3); sfx(~_heal~); givedice(); self.setvar(~smashuses~[;]self.getvar(~smashuses~) - 1); if(self.getvar(~smashuses~) > 0) { if(!self.usecpuinsteadofdice) { Gadget.reactivate(self[;]~Emulator~); } else { self.roll_jackpotbonus++; self.getskillcard().animate(~flashandshake~); var tw = new motion.actuators.SimpleActuator(null[;]0.01[;]null); var s = new elements.Skill(~Against all odds_old~); s.script = ~  for(i in 0...self.getskillcard().skills.length) {   if(self.getskillcard().skills[i].name == \~Emulator\~) {    self.getskillcard().skillsavailable[i] = true;   }  } ~; tw.onComplete(s.execute[;][self[;]target]); tw.move(); } } } else if(emulategadget.name == ~Gadget Roll~) { var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { trace(~hi~); shuffle(availdice); availdice[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); sfx(~diceroll~); } self.setvar(~grolluses~[;]self.getvar(~grolluses~) - 1); if(self.getvar(~grolluses~) > 0) { if(!self.usecpuinsteadofdice) { Gadget.reactivate(self[;]~Emulator~); } else { self.roll_jackpotbonus++; self.getskillcard().animate(~flashandshake~); var tw = new motion.actuators.SimpleActuator(null[;]0.01[;]null); var s = new elements.Skill(~Against all odds_old~); s.script = ~  for(i in 0...self.getskillcard().skills.length) {   if(self.getskillcard().skills[i].name == \~Emulator\~) {    self.getskillcard().skillsavailable[i] = true;   }  } ~; tw.onComplete(s.execute[;][self[;]target]); tw.move(); } } } else { var j = emulategadget.script.split(~Gadget.changegadget(self[;] \~~ + emulategadget.name + ~\~~); if(j.length > 1) { if(!self.usecpuinsteadofdice) { emulategadget.script = j.join(~Gadget.changegadget(self[;] \~Emulator\~~); } else { emulategadget.script = j.join(~self.innate.push(\~Emulator\~); self.innate.push(~); } } emulategadget.execute(self[;]target); } self.getskillcard().animation = []; self.getskillcard().animate(~particleblah~); self.getskillcard().animation[0].addcommand(~textparticle~[;] emulategadget.name + ~!~[;] 16777215); }
Rejuvenate,Heal a random amount,var r = rand([1[;]2[;]2[;]3[;]3[;]3[;]4[;]4[;]5]); attackself(-r); sfx(~_heal~);
Regenerative Ablity,Gain [grace]1 regen,inflictself(~Regen~[;] 1); sfx(~_cure~);
Oh Shit!,Take [sword]1 damage,attackself(1); sfxdamage(self[;]1);
Throwing Knife,Deal [sword]9 damage (once),attack(9); sfxdamage(target[;]9); Gadget.changegadget(self[;] ~Throwing Knife~[;] ~Broken Gadget[][]~);
Magic Lantern,[]+1 dice next turn,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Toxic,Inflict [poison]5 poison (once),inflict(POISON[;]5); sfx(~_poison~); Gadget.changegadget(self[;] ~Toxic~[;] ~Broken Gadget[][]~);
Stinger,Inflict [poison]1 poison,inflict(POISON); sfx(~_poison~);
Cheat,Set all dice to 6[;] roll a 6,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(6[;] self.screenposition()[;] c * 0.05); c++; } } givedice(6); sfx(~_ladysnap~);
Catalog,Replace each item with the next item alphabetically,runscript(~christmasspecial/thesaurus~[;][self]);
Ignition,3 to all counts,boostcountdowns(3);
Disorient,Swap enemy's next target,inflict(~reversenexttarget~); sfx(~_cure~);
Limit Charge,Charge limit break by 2,self.limitvalue += 2; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);
Flash,Blind [blind]1 dice,inflict(BLIND); sfx(~_blind~);
Zapthwack,[shock]1 item + [weaken]1 item,inflict(SHOCK); inflict(WEAKEN); sfx(~_weaken~); sfx(~_shock~);
Unlimited Limit,Gain [confuse]5 limit break charge,self.limitvalue+=5; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; }; sfx(~_thinghappens~);
Whacksies,Deal [sword]10 dmg in [jinx]2 turns,jinx(~Whacksies~[;]~take [sword]10 damage~[;]~take [sword]10 damage~[;]~attack(10); sfxdamage(null[;]10);~[;]target[;]self[;]2[;]2); sfx(~_thinghappens~);
Padlock,Lock all dice (once),inflict(LOCK[;]ALL); sfx(~_lock~); Gadget.changegadget(self[;] ~Padlock~[;] ~Broken Gadget[][]~);
Revitalize,Heal [heal]2[;] add [shield]2 shield,inflictself(SHIELD[;]2); sfx(~_shield~); attackself(-2); sfx(~_heal~);
Confiscate,Lock [lock]1 dice,inflict(LOCK); sfx(~_lock~);
Copyright Strike,[lock]Counter with nearest dice,if(!self.isplayer) { self.textparticle(~No effect!~); } else { var proximy = self.getskillcard().y + (self.getskillcard().height / 2) - 132; var proximx = self.getskillcard().x + (self.getskillcard().width / 2) - 110; var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } if(dicelist.length != 0) { var proxlist = []; for(mydice in dicelist) { proxlist.push(((mydice.x - proximx) * (mydice.x - proximx)) + ((mydice.y - proximy) * (mydice.y - proximy))); if(proxlist[proxlist.length - 1] < 0) { proxlist[proxlist.length - 1] = proxlist[proxlist.length - 1] * -1; } } var min = [0[;]999999999999999999999]; for(prox in proxlist) { trace(prox); trace(min[1]); trace(~---~); if(prox < min[1]) { min[1] = prox; min[0] = proxlist.indexOf(prox); } } inflict(~counter_~ + dicelist[min[0]].basevalue); sfx(~_magic~); } else { self.textparticle(~No dice!~); } }
Hadoken,Do [vanish]3 damage,attack(3[;]VANISH); sfx(~_vanish~); sfxdamage(target[;]3);
Dice Bash,Do [sword] with one of your dice,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); attack(dicelist[0]); sfxdamage(target[;]dicelist[0]); dicelist[0].animate(~flashshake~); }
Omegaflip,Flip dice under 4,var c = 0; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue < 4){ mydice.animatereroll((7 - mydice.basevalue)[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~useitem~);
Razor Blade,Split all dice,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { sfx(~splitdice~); for(mydice in dicelist) { mydice.removedice(self.screenposition()); givedice(split(mydice.basevalue)); } }
Boltzmann Brain,Mimic a random gadget,var gadgpool = loadtext(~ncrmod/boltzmannbrainrandomgadget~); if(chance(33)) gadgpool.push(~Broken Gadget[][]~); gadgpool = shuffle(gadgpool); var emulategadget = new elements.Skill(gadgpool[0]); emulategadget.execute(self[;]target); if(!self.isplayer) var self = target; self.getskillcard().animation = []; self.getskillcard().animate(~particleblah~); self.getskillcard().animation[0].addcommand(~textparticle~[;] emulategadget.name + ~!~[;] 16777215);
Drunken Boxing,Do [sword]1-10 damage,var r = rand([1[;]2[;]2[;]3[;]3[;]3[;]4[;]4[;]4[;]4[;]5[;]5[;]5[;]5[;]5[;]6[;]6[;]6[;]6[;]6[;]7[;]7[;]7[;]7[;]8[;]8[;]8[;]9[;]9[;]10]); attack(r); sfxdamage(target[;]r);
Mirror Smash,-3 [heart][][;] get dice (uses: 3),pierceattackself(3); sfx(~_heal~); givedice(); if(!self.isplayer) var self = target; if(self.getvar(~smashuses~) > 0) { self.setvar(~smashuses~[;]self.getvar(~smashuses~) - 1); } for(myskill in self.getskillcard().skills) { if(myskill.name == ~Mirror Smash~) { var a = ~~ + self.getvar(~smashuses~); var b = ~~ + (self.getvar(~smashuses~) + 1); var m = myskill.description.split(b); myskill.description = m.join(a); if(myskill.description.split(~-2 [~).length > 1) { myskill.description = myskill.description.split(~-2 [~).join(~-3 [~); } } } if(self.getvar(~grolluses~) > 0) { if(!self.usecpuinsteadofdice) { Gadget.reactivate(self[;]~Mirror Smash~); } else { self.roll_jackpotbonus++; self.getskillcard().animate(~flashandshake~); var tw = new motion.actuators.SimpleActuator(null[;]0.01[;]null); var s = new elements.Skill(~Against all odds_old~); s.script = ~  for(i in 0...self.getskillcard().skills.length) {   if(self.getskillcard().skills[i].name == \~Mirror Smash\~ && self.getskillcard().skills[i].description.indexOf(\~uses: 0\~) == -1) {    self.getskillcard().skillsavailable[i] = true;   }  } ~; tw.onComplete(s.execute[;][self[;]target]); tw.move(); } }
Parity Flip,Bump odds[;] nudge evens,var c = 0; if(self.dicepool.length > 0) { sfx(~diceroll~); for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue % 2 == 0){ mydice.animatereroll((mydice.basevalue - 1)[;] self.screenposition()[;] c * 0.05); c++; } if (mydice.available() && mydice.basevalue % 2 == 1){ mydice.animatereroll((mydice.basevalue + 1)[;] self.screenposition()[;] c * 0.05); c++; } } }
Gadget Roll,Reroll a dice (uses: 3),if(self.dicepool.length > 0) { var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); sfx(~diceroll~); } } if(!self.isplayer) var self = target; if(self.getvar(~grolluses~) > 0) { self.setvar(~grolluses~[;]self.getvar(~grolluses~) - 1); } for(myskill in self.getskillcard().skills) { if(myskill.name == ~Gadget Roll~) { var a = ~~ + self.getvar(~grolluses~); var b = ~~ + (self.getvar(~grolluses~) + 1); var m = myskill.description.split(b); myskill.description = m.join(a); } } if(self.getvar(~grolluses~) > 0) { if(!self.usecpuinsteadofdice) { Gadget.reactivate(self[;]~Gadget Roll~); } else { self.roll_jackpotbonus++; self.getskillcard().animate(~flashandshake~); var tw = new motion.actuators.SimpleActuator(null[;]0.01[;]null); var s = new elements.Skill(~Against all odds_old~); s.script = ~  for(i in 0...self.getskillcard().skills.length) {   if(self.getskillcard().skills[i].name == \~Gadget Roll\~ && self.getskillcard().skills[i].description.indexOf(\~uses: 0\~) == -1) {    self.getskillcard().skillsavailable[i] = true;   }  } ~; tw.onComplete(s.execute[;][self[;]target]); tw.move(); } }
Double Whammy,Reroll 2 lowest dice,if(self.dicepool.length > 0) { for(i in 1...3) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && !mydice.intween()) { dicelist.push(mydice); } } if(dicelist.length < 1) { break; } if(dicelist.length == 1) { sfx(~diceroll~); dicelist[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); break; } sfx(~diceroll~); dicelist.sort(function(a[;]b) return a.basevalue - b.basevalue); for(mydice in dicelist) { if(mydice.basevalue > dicelist[0].basevalue) { dicelist.remove(mydice); } } var dicelistcopy = dicelist.copy(); for(mydice in dicelist) { if(mydice.burn) { dicelist.remove(mydice); } } for(mydice in dicelist) { if(mydice.blind) { dicelist.remove(mydice); } } if(dicelist.length > 0) { dicelist[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); } else { dicelist = dicelistcopy.copy(); for(mydice in dicelist) { if(mydice.blind) { dicelist.remove(mydice); } } if(dicelist.length > 0) { dicelist[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); } else { dicelist = dicelistcopy.copy(); for(mydice in dicelist) { if(mydice.burn) { dicelist.remove(mydice); } } if(dicelist.length > 0) { dicelist[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); } else { dicelist = dicelistcopy.copy(); if(dicelist.length > 0) { dicelist[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); } } } } } }
Trinity,+3 to a random dice,var extradice = []; var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { sfx(~diceroll~); var randdice = rand(availdice); if((randdice.basevalue + 3) > 6) { randdice.animatereroll(6[;] self.screenposition()); extradice.push(randdice.basevalue - 3); } else { randdice.animatereroll(randdice.basevalue + 3[;] self.screenposition()); } givedice(extradice); }
Anthrax,Poison a random amount,var r = rand([1[;]1[;]2[;]2[;]2[;]2[;]3[;]3[;]4[;]5]); inflict(POISON[;] r); sfx(~_poison~);
Comedy,Error [ncr_error]1 card,inflict(~ncr_error~); sfx(~roboterror~);
Keyring,Lock [lock]2 dice,inflict(LOCK[;]2); sfx(~_lock~);
Fun Fact!,Get a fun fact,var e = self.getskillcard(); e.availablethisturn = false; e.unavailabletext = ~Fun Fact!~; e.unavailabledetails = rand(loadtext(~ncrmod/funfacts~)).split(~#~.substr(0[;]1)); e.animate(~flashandshake~);
Improvise,Get a temporary item,giveequipment(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])));
Waltzer Quine,,jinx(~Waltzer~|~take [sword]%VAR% damage[;] repeat jinx~|~Take [sword]%VAR% damage[;] repeat jinx~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine\~); s.execute(self|target);~|target|self|3|3); 
Waltzer Quine Upgraded,,jinx(~Waltzer+~|~take [sword]%VAR% damage[;] repeat jinx~|~Take [sword]%VAR% damage[;] repeat jinx~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine Upgraded\~); s.execute(self|target);~|target|self|2|3); 
Waltzer Quine Downgraded,,jinx(~Waltzer-~|~take [sword]%VAR% damage[;] repeat jinx~|~Take [sword]%VAR% damage[;] repeat jinx~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine Downgraded\~); s.execute(self|target);~|target|self|4|3); 
Heat,Weaken all ice items,inflict(~heater~); sfx(~_ice~); sfx(~_weaken~);
Invent,All items are randomized,self.destroyallequipment(); giveequipment(rand(getequipmentlist(null[;][][;][~alternateversion~[;]~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~]))[;] -1); giveequipment(rand(getequipmentlist(null[;][][;][~alternateversion~[;]~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~]))[;] -1); giveequipment(rand(getequipmentlist(null[;][][;][~alternateversion~[;]~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~]))[;] -1); sfx(~_thinghappens~);
Laser Eyes,Unblind & unlock all dice,for(dice in self.dicepool) { if(dice.blind || dice.locked) { dice.blind = false; dice.locked = false; dice.animate(~flashshake~); } } sfx(~_plasma~);
Plexiglass,-1 dice for you and enemy,if(self.dice + self.extradice == 1 # target.dice + target.extradice == 1) { self.textparticle(~Can't go lower!~); } else { self.extradice--; target.extradice--; sfx(~magic_gaindice~); }
Pirate Glove,Re-equip next [recycle]1?,sfx(~magic_gaindice~);inflictself(ALTERNATE + REEQUIPNEXT);self.symbolparticle(REEQUIPNEXT);
Broken Gadget[][],No effect,/*IT DOESNT DO ANYTHING. COPY OF BROKEN GADGET THAT IS USED INSTEAD OF BROKEN GADGET IN SOME INSTANCES BECAUSE REALLY COMPLICATED STUFF THAT NECESSITATED THE KLUDGE IN BEFORE COMBAT IN INVENTOR GADGETS. NAMED BROKEN GADGET[][] BECAUSE BROKEN GADGET[] IS THE NAME OF AN NCRMOD GADGET (INFLICTS CONFUSE) AND THAT MIGHT CAUSE VERY VERY DISTANT COMPATIBILITY ISSUES IDK*/
Underwhelm,Do [sword]<var:underwhelm> dmg[;] dmg -1,if(!self.isplayer) var self = target; if(!self.getvar(~underwhelm~) > 0) {self.setvar(~underwhelm~|5);} attack(self.getvar(~underwhelm~)); sfxdamage(target|self.getvar(~underwhelm~)); if(self.getvar(~underwhelm~) > 1) {self.setvar(~underwhelm~|self.getvar(~underwhelm~)-1);} /* base value of underwhelm; 5; was _merged into inventor gadgets*/
Royalties,Deal 2 damage per unique status you have,var amount = 2; var total = 0; for(note in self.status){ if(!note.invisible){ total+=amount; } }; if(total > 0){ attack(total); sfxdamage(target[;]total); };
Calculate,[80%]Roll dice 40% to error a random item,if(chance(60)){ var rolls = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); } else { var rolls = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); inflictself(~ncr_error~); sfx(~_curse~); } Gadget.reactivate(self[;] ALL);
Full roll,Roll 3 unique dice,var rolls = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); var rolls2 = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); var rolls3 = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); givedice([rolls[;]rolls2[;]rolls3]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]);
Knock Your Socks,Loosens the equipment requirments,for(e in self.getcurrentequipment()) {e.changeslots(["NORMAL"]);} sfx(~levelup~);
Calculate@35,[80%]Roll dice 35% to error a random item,if(chance(65)){ var rolls = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); } else { var rolls = rand([-6[;]-5[;]-4[;]-3[;]-2[;]-1[;]7[;]8[;]9[;]10[;]11[;]12]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); inflictself(~ncr_error~); sfx(~_curse~); } Gadget.reactivate(self[;] ALL);
Calculate@big,[80%]Roll dice 40% to error a random item,if(chance(60)){ var rolls = rand([7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); } else { var rolls = rand([7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); inflictself(~ncr_error~); sfx(~_curse~); } Gadget.reactivate(self[;] ALL);
Locked,[lock]till next turn,self.textparticle(~[lock]Locked~); Gadget.reactivate(self[;] ALL);
Calculate@bg,[80%]Roll dice 35% to error a random item,if(chance(65)){ var rolls = rand([7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); } else { var rolls = rand([7[;]8[;]9[;]10[;]11[;]12[;]13[;]14[;]15[;]16[;]17]); givedice([rolls]); runscript(~christmasspecial/mqspecialdice~[;][self[;]target[;]~onstartturn_player~[;]turn]); inflictself(~ncr_error~); sfx(~_curse~); } Gadget.reactivate(self[;] ALL);
Locked1,[lock]till next turn,self.textparticle(~[lock]Locked~); Gadget.reactivate(self[;] ALL);
Locked2,[lock]till next turn,self.textparticle(~[lock]Locked~); Gadget.reactivate(self[;] ALL);
Locked3,[lock]till next turn,self.textparticle(~[lock]Locked~); Gadget.reactivate(self[;] ALL);

