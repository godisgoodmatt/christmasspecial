Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Unwanted Present,Confuse enemy,1,inflict(CONFUSE); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Unwanted Present_downgraded,Blind enemy,1,inflict(BLIND); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Unwanted Present_weakened,Blind enemy,1,inflict(BLIND); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,9,ORANGE,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Curse Remote,[sword]<d6> dmg[;] consume [curse]Curse|to cast it on the enemy,1,attack(d); sfxdamage(target[;]d); if(self.getvar(~willremovecurse~) == 1) { inflict(CURSE); sfx(~_curse~[;]~~[;]0.1); self.setvar(~willremovecurse~[;]0); },Cackle,MAX4,,PURPLE,change_power,complicate,,,0,NO,NO,fd,1,,,,,,,,if(getstatusself(CURSE) >= 1) { removestatusself(CURSE); self.setvar(~willremovecurse~[;]1); },,,
Curse Remote_upgraded,[sword]<d6>[;] consume all [curse]Curse|to cast it on the enemy,1,attack(d); self.setvar(~willremovecurse~[;]0); },Cackle,MAX4,,PURPLE,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,if(getstatusself(CURSE) >= 1) { self.setvar(~willremovecurse~[;]getstatusself(CURSE)); removestatusself(CURSE[;]getstatusself(CURSE)); },,,
Luck Prayer,Reduce [curse]Curse odds|this turn to 25%,1,inflictself(~cursesuppressor~); sfx(~useitem~);,Dramatic Pause,EVEN,,PURPLE,simplify,complicate,,,0,YES,NO,fd,1,,,,,,,,,,,
Nimble Hands,Do [sword]<d6>[;] steal an item with|[sword] symbol until next turn,2,attack(d); sfxdamage(target[;]d); if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn && eq.fulldescription.indexOf(~[sword]~) != -1){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Borrowed~; randomequipment.unavailabledetails = [~Say goodbye to Christmas!~[;]~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); } } } else { bonus(1000 + (self.dicepool.length * 500)); },Reversal,MAX5,,PINK,simplify,complicate,,,0,NO,NO,fd|excludefromrandomlists|cannotsteal|curseavoid|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Heater,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Heater_upgraded,Weaken all equipment|that are cyan,1,inflict(~heater+~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Heater_downgraded,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,REQUIRE3|REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Artificial Snow,Do [ice]<d6> damage[;] on 4[;]|swap Broken Gadgets|with Flash Freeze,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); if(d == 4) Gadget.changegadget(self[;] ~Broken Gadget~[;]~Flash Freeze~);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Artificial Snow_upgraded,Do [ice]<d6> damage[;] on even[;]|swap Broken Gadgets|with Flash Freeze,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); if(d % 2 == 0) Gadget.changegadget(self[;] ~Broken Gadget~[;]~Flash Freeze~);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Artificial Snow_downgraded,Do [ice]<d6> damage,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,MAX3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Flame Whip,Do [fire]<d6> damage[;]|burn yourself,2,attack(d[;]FIRE); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2);
Flame Whip_upgraded,Do [fire]<d6> damage[;]|roll a burning dice,2,attack(d[;]FIRE); inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);
Frozen Gloves,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d[;]ICE); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);
Frozen Gloves_upgraded,Do [ice]<d6> damage[;]|roll a one,2,attack(d[;]ICE); givedice(1); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,givedice(1); sfx(~_ice~[;]~~[;]0.1);
Night By The Fireplace,[90%]When you are hit by fire[;] it|[90%]will heal you instead of damage,1,inflictself(~fireplace~); sfx(~_cure~); sfx(~_cure~);,Cruciroll,COUNTDOWN,12,PINK,threequartercountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Keyflare,Do [fire]3 damage[;]|return burning <d6>,1,inflictself(FIRE); givedice(d); attack(3[;]FIRE); sfxdamage(target[;]3); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Keyflare_upgraded,Do [fire]4 damage[;]|return burning <d6>,1,inflictself(FIRE); givedice(d); attack(4[;]FIRE); sfxdamage(target[;]4); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Keyflare_downgraded,Return burning <d6>,1,inflictself(FIRE); givedice(d); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Snowball Launcher,Do [ice]<double> dmg[;] roll a 1|[gray](Reuseable),1,inflict(ICE); givedice(1); attack(d * 2[;]ICE); sfxdamage(target[;]d * 2); sfx(~_ice~[;]~~[;]0.1);,Very Unlucky Roll,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,removereusable,,,-1,NO,NO,,,,,,,,,,,,,
Snowball Launcher_upgraded,Do [ice]<triple> dmg[;] roll a 1|[gray](Reuseable),1,inflict(ICE); givedice(1); attack(d * 3[;]ICE); sfxdamage(target[;]d * 3); sfx(~_ice~[;]~~[;]0.1);,Very Unlucky Roll,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,removereusable,,,-1,NO,NO,,,,,,,,,,,,,
Scoop,Do [sword]<d6> damage|Flip the dice on its side,1,var returnval = [1[;]2[;]3[;]4[;]5[;]6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval)); attack(d); sfxdamage(target[;]d);,Random Roll,MAX3,,RED,increaserange,change_function,,,0,NO,NO,,,,,,,,,,,,,
Scoop_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Random Roll,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Snowdrift,Enemy goes first|(Always offered as scrap),1,,Time Stop,,,GRAY,change_power,,,,0,NO,NO,weakenavoid|shockavoid|excludefromrandomlists|appearsforparts,,if(turn == 1) { target.innate.remove(~goesfirst~); target.innate.push(~goesfirst~); e.animate(~flashandshake~); },,,,,,,,,,
Snowdrift_upgraded,Enemy goes first[;] but|you take an extra turn (Always offered as scrap),1,,Time Stop,,,GRAY,change_power,weakenavoid|shockavoid,,,0,NO,NO,weakenavoid|shockavoid|excludefromrandomlists|appearsforparts,,if(turn == 1) { target.innate.remove(~goesfirst~); target.innate.push(~goesfirst~); e.animate(~flashandshake~); },if(turn == 1) { e.animate(~flashandshake~); e.changecolour(~BLACK~); inflictself(EXTRATURN); sfx(~_recycle~[;]~~[;]0.1); },,,,,,,,,
Wizard's Hat,Turn the enemy|into an animal,1,var enemylist = [~Loud Bird~[;]~Dire Wolf~[;]~Baby Squid~[;]~Rat King~[;]~Sneezy~[;]~Bear~]; sfx(~_thinghappens~); var lvl = target.level; var totaldice = target.dice; var totalbonusdice =  target.bonusdice; var totalextradice =  target.extradice; var randomanimal = rand(enemylist); if(randomanimal == ~Bear~) { inflict(~instanttransform~); } else { switchenemy(target[;]randomanimal); target.dice == totaldice; target.bonusdice == totalbonusdice; target.extradice == totalextradice; target.level = lvl; },Bearish Spell,COUNTDOWN,14,PINK,threequartercountdown,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Bear's Cusre,Turn the enemy into|a bear[;] curse him each turn,2,inflict(~bearcurse~); sfx(~_curse~[;]~~[;]0.1); sfx(~_roar~);,Bearish Spell,COUNTDOWN,20,ORANGE,reducesize,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Mortal Sin,Do [sword]<triple> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d * 3); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d * 3);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Mortal Sin_upgraded,Do [sword]<quadruple> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d * 4); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d * 4);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Mortal Sin_downgraded,Do [sword]<d6> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Spare Parts,Permanently delete random|equipment[;] make a gadget out of it,1,if(!simulation){ if(target != null) { var selfequipment = []; var scrapequipment = []; for (eq in self.equipment){ if(!eq.hastag(~appearsforparts~) && !eq.hastag(~skillcard~) && eq.ready){ selfequipment.push(eq); } }  for (eq in self.equipment){ if(eq.hastag(~appearsforparts~) && eq.ready){ scrapequipment.push(eq) ; } } if(scrapequipment.length > 0){ var randomscrapequipment = rand(scrapequipment); randomscrapequipment.animate(~delete~); sfx(~jester_delete~[;]~~[;]0.2); Gadget.givegadget(self[;]randomscrapequipment.gadget[;]true); removeequipment(randomscrapequipment[;]self); } else if(selfequipment.length > 0){ var randomequipment = rand(selfequipment); randomequipment.animate(~delete~); sfx(~jester_delete~[;]~~[;]0.2); Gadget.givegadget(self[;]randomequipment.gadget[;]true); removeequipment(randomequipment[;]self); } } } else { bonus(-1000); self.textparticle(~No effect!~); },Stardust,COUNTDOWN,8,GRAY,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sticker,Combine dice|[gray](Reuseable),1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~);,Magic Spanner,MAX2|MAX2,,GREEN,increaserange,removereusable,,,3,YES,NO,,1,,,,,,,,,,,
Contract,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]12 gold,2,if(self.gold > 12){ self.gold -= 12 ; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 12) { Rules.upgradeplayerequipment = true; },,,
Contract_upgraded,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]9 gold,2,if(self.gold > 9){ self.gold -= 9; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 9) { Rules.upgradeplayerequipment = true; },,,
Contract_downgraded,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]24 gold,2,if(self.gold > 24){ self.gold -= 24; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 24) { Rules.upgradeplayerequipment = true; },,,
Better Yourself,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Better Yourself_upgraded,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Better Yourself_downgraded,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,REQUIRE6|REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dune,Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,ODD,,ORANGE,change_power,change_power,,,0,NO,NO,,,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~;,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened~;,e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]0);,,,,,,,,
Dune_downgraded,Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,REQUIRE5,,ORANGE,,,,,0,NO,NO,,,,,,self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]1);,,,,,,,
Dune_upgraded,Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,,,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~;,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened~;,e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]0);,,,,,,,,
Dune_weakened,Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,,,,,,self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]1);,,,,,,,
Boar Spear,Do [sword]<d6> damage[;]|[fire]Burn and [shock]Shock both,1,attack(d); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_fire~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); inflict(SHOCK); inflict(FIRE); delay(0.3);,Blowtorch,MAX4,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Boar Spear_downgraded,Do [sword]<d6> damage[;]|[95%][fire]Burn and [shock]Shock yourself,1,attack(d); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_fire~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); delay(0.3);,Blowtorch,REQUIRE5,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stabbing Blade,Do [sword]<d6> damage[;]|[ice]Freeze and [shock]Shock both,1,attack(d); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_ice~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); inflict(SHOCK); inflict(ICE); delay(0.3);,Flash Freeze,MAX4,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stabbing Blade_downgraded,Do [sword]<d6> damage[;]|[95%][ice]Freeze and [shock]Shock yourself,1,attack(d); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_ice~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); delay(0.3);,Flash Freeze,REQUIRE5,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Shock Absorber,[90%]Unshock all shocked equipment[comma]|[90%]do [shock]<d6> per each unshocked,1,if (self.equipment.length > 0) { var dmgamount = 0; var unshockdelay = 2; for (eq in self.equipment) { if (eq.shockedsetting > 0) { eq.unshockingtimer = unshockdelay * 0.1; dmgamount += 1; unshockdelay += 2; } } if(dmgamount > 0) { bonus(100000); attack(dmgamount * d[;]SHOCK); sfxdamage(target[;]dmgamount * d); sfx(~_shock~[;]~~[;]0.1); delay(0.3); } else { bonus(-1000); } },Jackhammer,MAX3,,YELLOW,increaserange,decreaserange,,,0,NO,NO,,1,,,,,,,,,,,
Banhammer,Do [shock]9 damage|(Gain [shock]6 shock if not used),2,attack(9[;]SHOCK); sfxdamage(target[;]9); sfx(~_shock~[;]~~[;]0.1);,Zap,COUNTDOWN,12,YELLOW,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,if(e.timesused == 0) { jinx(e.name + e.namemodifier[;]~gain [shock]6 shock~[;]~Gain [shock]6 shock~[;]~inflict(SHOCK[;]%VAR%);sfx(\~_shock\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]6); } else { e.timesused = 0; },,,,
Banhammer_downgraded,Do [shock]6 damage|(Gain [shock]6 shock if not used),2,attack(6[;]SHOCK); sfxdamage(target[;]6); sfx(~_shock~[;]~~[;]0.1);,Zap,COUNTDOWN,12,YELLOW,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,if(e.timesused == 0) { jinx(e.name + e.namemodifier[;]~gain [shock]6 shock~[;]~Gain [shock]6 shock~[;]~inflict(SHOCK[;]%VAR%);sfx(\~_shock\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]6); } else { e.timesused = 0; },,,,
Aftershock,[95%]Roll a dice per each shocked|[95%]equipment you have,1,if (self.equipment.length > 0) { var dicepush = []; for (eq in self.equipment) { if (eq.shockedsetting > 0) { dicepush.push(rand([1[;]2[;]3[;]4[;]5[;]6])); } } if(dicepush.length > 0) { bonus(100000); givedice(dicepush); sfx(~_shock~[;]~~[;]0.1); delay(0.3); } else { bonus(-1000); } },Zap,EVEN,,YELLOW,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Evangel,Do [weaken]<d6> damage|75% chance to gain [weaken]2,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); } } attack(d[;] WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.1);,Theremin,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Evangel_upgraded,Do [weaken]<d6> damage|75% chance to gain [weaken]3,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); eqlist.remove(itemtoweakensec); } if(eqlist.length > 2) { var itemtoweakenth = rand(eqlist); if(itemtoweakenth.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakenth.animate(WEAKEN); eqlist.remove(itemtoweakenth); } } attack(d[;] WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.1);,Theremin,MAX5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Evangel_downgraded,75% chance to gain [weaken]2,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; }self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); } },Theremin,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Clock Hands,Reduce countdown on|all equipment by half,1,if(!simulation){ var selfequipment = []; sfx(~useitem~); for (eq in self.equipment){ if(eq.countdown > 1 && eq.slots.indexOf(~COUNTDOWN~) == 0 && eq.availablethisturn && eq.ready){ selfequipment.push(eq); } } if(selfequipment.length > 0){ boostcountdowns(0); for(eq in selfequipment) { eq.reducecountdownby = eq.remainingcountdown * 0.5; } } else { bonus(1000 + (self.dicepool.length * 500)); } },Accelerate,REQUIRE6,,GREEN,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Haunted House,Do [sword]15 damage[;] reset|countdown if not used,2,attack(15); sfxdamage(target[;]15);,Accelerate,COUNTDOWN,20,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 20;,,,,,,,,
Haunted House_upgraded,Do [sword]15 damage[;] reset|countdown if not used,2,attack(15); sfxdamage(target[;]15);,Accelerate,COUNTDOWN,15,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 15;,,,,,,,,
Haunted House_downgraded,Do [sword]10 damage[;] reset|countdown if not used,2,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,20,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 20;,,,,,,,,
Haunted House_weakened,Do [sword]10 damage[;] reset|countdown if not used,2,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,15,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 15;,,,,,,,,
LOL Sword,XD,1,var odds = 20; if(getstatusself(~luck~) > 0){ odds = 10; } if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = rand([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
LOL Sword_downgraded,ha ha very funny,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds = 5; if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = ([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,MAX3,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
LOL Sword_upgraded,LMAO,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds = 5; if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = ([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,NORMAL|FREE1,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
