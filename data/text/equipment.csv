Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
[BEGIN ESSENTIALS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Robot Calculate,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Inventor Gadgets,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,if(self.getvar(~consumerismusedever~)) { var skillamt = 0; var fillerpassed = false; var i = e.skills.length - 1; while(i > -1) { if(e.skills[i].name != ~Broken Gadget~ # fillerpassed) { fillerpassed = true; skillamt++; } i--; } e.height = 468 + ((skillamt - 1) * 270); /*tHERE ARE TWO BUGS IN PLAY: A BUG WHERE SKILLCARD ISN'T RESCALED PROPERLY TO ACCOUNT FOR MORE GADGETS; AND A BUG WHERE IT JUST YEETS INVISIBLE BROKEN GADGET(S) INTO YOUR SKILLS ARRAY IF YOU DO RULES.INVENTOR_SETGADGETS(2) AFTER HAVING ANY HIGHER AMOUNT OF GADGETS. tHIS BREAKS IF YOU HAVE SOME WACKY EQUIPMENT WHOSE GADGET IS BROKEN GADGET; OR AN EQUIPMENT WITH NO GADGET; BUT FUCK IT*/ self.resetvar(~consumerismused~); } self.setvar(~underwhelm~[;]5); self.setvar(~invgadgets_eqsused~[;]0); self.setvar(~invgadgets_eqsused_display~[;]0); /*var goldgadgets = loadtext(~gadgetsthatshowgold~); for(skill in self.getskillcard().skills) if(goldgadgets.indexOf(skill.name) != -1) self.getskillcard().addtag(~showgold~); */ for(skill in self.getskillcard().skills) if(skill.script.indexOf(self.gold) != -1) self.getskillcard().addtag(~showgold~); self.setvar(~ncr_briefcase~[;]rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])));,if(self.getvar(~consumerismusedever~)) { if(self.getvar(~consumerismused~) == 0) { Rules.inventor_setgadgets(2); } else { Rules.inventor_setgadgets(self.getvar(~consumerismused~)); } } /*while(self.getvar(~giveblades~) > 0) { giveequipment(~Everblade~); self.setvar(~giveblades~[;]self.getvar(~giveblades~) - 1); }*/ self.setvar(~invgadgets_eqsused~[;]0); self.setvar(~invgadgets_eqsused_display~[;]0); self.getskillcard().removetag(~showgold~);,var e = self.getskillcard(); /*while(self.getvar(~giveblades~) > 0) { giveequipment(~Everblade~[;]true[;]false); self.setvar(~giveblades~[;]self.getvar(~giveblades~) - 1); } while(self.getvar(~givebladesplus~) > 0) { giveequipment(~Everblade+~[;]true[;]false); self.setvar(~givebladesplus~[;]self.getvar(~givebladesplus~) - 1); }*/ self.setvar(~phillip~[;]false); self.setvar(~grolluses~[;]3); self.setvar(~smashuses~[;]3); for(myskill in e.skills) { if(myskill.name == ~Gadget Roll~) { myskill.description = ~Reroll a dice (uses: 3)~; } if(myskill.name == ~Mirror Smash~) { myskill.description = ~-3 [heart][][;] get dice (uses: 3)~; } } /* for(myskill in e.skills) { if(myskill.name == ~Emulator~) { self.setvar(~emulatorchange~[;]e.skills.indexOf(myskill)); } } */ if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.script.split(~Gadget.reactivate(self[;] ALL);~).length > 1) { eq.script = eq.script.split(~Gadget.reactivate(self[;] ALL);~).join(~Gadget.reactivate(self[;]ALL); for(myskill in self.getskillcard().skills) { if(myskill.name == \~Gadget Roll\~) { self.setvar(\~grolluses\~[;]self.getvar(\~grolluses\~) + 1); var a = \~\~ + self.getvar(\~grolluses\~); trace(a); var b = \~\~ + (self.getvar(\~grolluses\~) - 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); } if(myskill.name == \~Mirror Smash\~) { self.setvar(\~smashuses\~[;]self.getvar(\~smashuses\~) + 1); var a = \~\~ + self.getvar(\~smashuses\~); trace(a); var b = \~\~ + (self.getvar(\~smashuses\~) - 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); if(myskill.description.split(\~-4 [\~).length > 1) { myskill.description = myskill.description.split(\~-4 [\~).join(\~-3 [\~); } } }~); } } } self.setvar(~invgadgets_eqsused~[;]0); self.setvar(~invgadgets_eqsused_display~[;]0);,var docursesfx = false; var doflashnshake = false; for(myskill in e.skills) { if(myskill.description.indexOf(~[sword]7 dmg (passive: get [curse]1[])~) != -1) { docursesfx = true; doflashnshake = true; inflictself(CURSE); } } if(self.limitbreak.description.indexOf(~[sword]7 dmg (passive: get [curse]1[])~) != -1) { docursesfx = true; inflictself(CURSE); } if(docursesfx) sfx(~_curse~); if(doflashnshake) e.animate(~flashandshake~);,if(self.hasstatus(~ncr_lessfluff~)) { removestatusself(~ncr_lessfluff~); } self.setvar(~invgadgets_eqsused~[;]self.getvar(~invgadgets_eqsused~) + 1); if(self.getvar(~invgadgets_eqsused~) % 2 == 0) { self.setvar(~invgadgets_eqsused_display~[;]self.getvar(~invgadgets_eqsused_display~) + 1); },,/*if(target.hp <= 0 && self.layout == ~DECK~) { self.setvar(~equipmenttoscrap~[;]self.equipment); }*/ for(eq in self.equipment) if(eq.hastag(~preservesgadget~)) eq.gadget = Gadget.getcurrentgadget(self);,,,,
Thief Stolen Card,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Witch Spellbook,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,if(self.getvar(~unusedmana~) > 0){ inflictself(MANA[;]self.getvar(~unusedmana~)); self.setvar(~unusedmana~[;]0); } self.setvar(~spellbook1unavailable~[;]0); self.setvar(~spellbook2unavailable~[;]0); self.setvar(~spellbook3unavailable~[;]0);,self.setvar(~spellbook1unavailable~[;]0); self.setvar(~spellbook2unavailable~[;]0); self.setvar(~spellbook3unavailable~[;]0); if(self.gamevar.exists(~upgradecastactuator~)) self.getvar(~upgradecastactuator~)._repeat = 0; self.resetvar(~upgradecastactuator~); self.resetvar(~upgradecastx~); self.resetvar(~upgradecasty~); if(self.gamevar.exists(~shockcastactuator~)) self.getvar(~shockcastactuator~)._repeat = 0; self.resetvar(~shockcastactuator~); self.resetvar(~shockcastx~); self.resetvar(~shockcasty~); if(self.gamevar.exists(~weakencastactuator~)) self.getvar(~weakencastactuator~)._repeat = 0; self.resetvar(~weakencastactuator~); self.resetvar(~weakencastx~); self.resetvar(~weakencasty~);,if(self.getvar(~spellbook1unavailable~) > 0) self.setvar(~spellbook1unavailable~[;]self.getvar(~spellbook1unavailable~) - 1); if(self.getvar(~spellbook2unavailable~) > 0) self.setvar(~spellbook2unavailable~[;]self.getvar(~spellbook2unavailable~) - 1); if(self.getvar(~spellbook3unavailable~) > 0) self.setvar(~spellbook3unavailable~[;]self.getvar(~spellbook3unavailable~) - 1); if(self.getvar(~spellbook~+self.getvar(~currentspellbook~)+~unavailable~) > 0){ e.availablethisturn = false; if(self.getvar(~currentspellbook~) == 1){ e.unavailabletext = ~First spellbook~; } else if(self.getvar(~currentspellbook~) == 2){ e.unavailabletext = ~Second spellbook~; } else if(self.getvar(~currentspellbook~) == 3){ e.unavailabletext = ~Third spellbook~; } e.unavailabledetails = [~Disabled (~+self.getvar(~spellbook~+self.getvar(~currentspellbook~)+~unavailable~)+~ turns left)~]; };,,if(self.getvar(~spellbook~+self.getvar(~currentspellbook~)+~unavailable~) > 0 && e.availablethisturn != false){ e.availablethisturn = false; var ordinalpostfix = ~rd~; if(self.getvar(~currentspellbook~) == 2) ordinalpostfix = ~nd~; if(self.getvar(~currentspellbook~) == 1) ordinalpostfix = ~st~; e.unavailabletext = self.getvar(~currentspellbook~) + ordinalpostfix + ~ spellbook~; e.unavailabledetails = [~Disabled (~+self.getvar(~spellbook~+self.getvar(~currentspellbook~)+~unavailable~)+~ turns left)~]; e.animate(~flashandshake~); } else if(self.getvar(~spellbook~+self.getvar(~currentspellbook~)+~unavailable~) == 0){ e.availablethisturn = true; },,,,,,
Witch Deck,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Jester Deck,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Combat Roll,Reroll a dice|[gray](Reuseable),2,givedice();,Random Roll,NORMAL,,GRAY,,,,,3,YES,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
[END ESSENTIALS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN ENEMY EQUIPMENT],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Magic Missile,Do [sword]5 damage,1,attack(5);,Magic Dice,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Magic Missile_upgraded,Do [sword]8 damage,1,attack(8);,Magic Dice,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Shield,Add [shield]3 shield,1,inflictself(SHIELD[;] 3);,Barricade,ODD,,ORANGE,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Magic Shield_upgraded,Add [shield]4 shield,1,inflictself(SHIELD[;] 4);,Barricade,ODD,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Infliction,Do [sword]3 damage,1,attack(3);,Bubble Gun,NORMAL,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Infliction_upgraded,Do [sword]4 damage,1,attack(4);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Cannon,Do [sword]10 damage,1,attack(10);,Accelerate,COUNTDOWN,20,RED,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Cannon_weakened,Do [sword]5 damage,1,attack(5);,Accelerate,COUNTDOWN,15,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Cannon_downgraded,Do [sword]5 damage,1,attack(5);,Accelerate,COUNTDOWN,20,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shovel,Do [weaken]<d6> damage[;]|on 6[;] inflict [weaken]1 weaken,2,attack(d[;] WEAKEN); if(d == 6) inflict(WEAKEN); if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.2); },Burrower,NORMAL,,ORANGE,change_power,change_power,weaken,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shovel_upgraded,Do [weaken]<d6> damage[;]|on even[;] inflict [weaken]1 weaken,2,attack(d[;] WEAKEN); if(d % 2 == 0) inflict(WEAKEN); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.2); },Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shovel_downgraded,Do [weaken]<d6> damage,2,attack(d[;] WEAKEN);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 1);,Hellfire,EVEN,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball_upgraded,Deal [fire]<d6> damage|Burn [fire]2 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Hellfire,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball_downgraded,Deal [sword]<d6> damage,1,attack(d);,Hellfire,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Breath,Do [fire]4 damage|Burn [fire]1 dice,2,attack(4[;] FIRE); inflict(FIRE[;] 1);,Hellfire,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Breath_upgraded,Do [fire]6 damage|Burn [fire]1 dice,2,attack(6[;] FIRE); inflict(FIRE[;] 1);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Breath_downgraded,Do [sword]4 damage,2,attack(4);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Breath,Do [ice]4 damage|Inflict [ice]1 freeze,2,attack(4[;] ICE); inflict(ICE[;] 1);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Breath_upgraded,Do [ice]6 damage|Inflict [ice]1 freeze,2,attack(6[;] ICE); inflict(ICE[;] 1);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Breath_downgraded,Do [sword]3 damage,2,attack(3);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ray Gun,Do [sword]3 damage|[gray](Reuseable),1,attack(3);,Plasma Gun,MIN3,,RED,change_power,complicate,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ray Gun_upgraded,Do [sword]4 damage|[gray](Reuseable),1,attack(4);,Plasma Gun,MIN3,,RED,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Blaster,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,MAX5,,RED,increaserange,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Slime Ball,Add [poison]2 poison,1,inflict(POISON[;] 2);,Emetic,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Slime Ball_upgraded,Add [poison]3 poison,1,inflict(POISON[;] 3);,Emetic,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Toxic Ooze,Do [sword]<d6> damage[;]|on 6[;] add [poison]2 poison,2,attack(d); if(d == 6) inflict(POISON[;] 2); if(d >= 6) { sfx(~_poison~[;]~~[;]0.2); } sfxdamage(target[;]d);,Emetic,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Toxic Ooze_downgraded,Do [sword]<d6> damage[;]|on 6[;] add [poison]1 poison,2,attack(d); if(d == 6) inflict(POISON[;] 1); if(d >= 6) { sfx(~_poison~[;]~~[;]0.2); } sfxdamage(target[;]d);,Emetic,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Toxic Ooze_upgraded,Do [sword]<d6> damage[;]|on 6[;] add [poison]3 poison,2,attack(d); if(d == 6) inflict(POISON[;] 3); if(d >= 6) { sfx(~_poison~[;]~~[;]0.2); } sfxdamage(target[;]d);,Emetic,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Broadsword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE2,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Broadsword_upgraded,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Small Shield,Add [shield]<d6> shield,1,inflictself(SHIELD[;] d);,Protection,MAX3,,ORANGE,add1,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Two Handed Sword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|NORMAL,,RED,change_power,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Two Handed Sword_upgraded,Do [sword]<d6> damage[;]|on 12[;] lock [lock]1 dice,2,attack(d); if(d == 12) inflict(LOCK[;] 1); if(d >= 12) { sfx(~_lock~[;]~~[;]0.2); } sfxdamage(target[;]d);,Plasma Gun,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Woof Woof Woof,Repeat next action,2,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,8,RED,halfcountdown,noeffect,fury,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Wolf Puppy Bite,Do [sword]4 damage,2,attack(4);,Lucky Shot,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wolf Puppy Bite_upgraded,Do [sword]5 damage,2,attack(5);,Lucky Shot,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rosewood Spear,Do [sword]<d6> damage[;]|gain [thorns]2 thorns,2,attack(d); inflictself(THORNS[;] 2);,Needle,EVEN,,GREEN,change_power,complicate,thorns,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(THORNS[;] 2); sfx(~_thorns~[;]~~[;]0.2);
Rosewood Spear_upgraded,Do [sword]<d6> damage[;]|gain [thorns]3 thorns,2,attack(d); inflictself(THORNS[;] 3);,Needle,EVEN,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(THORNS[;] 3); sfx(~_thorns~[;]~~[;]0.2);
Poison Slingshot,Add [poison]4 poison,1,inflict(POISON[;] 4); bonus(1000);,Poison Arrow,COUNTDOWN,12,PURPLE,change_countdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Slingshot_downgraded,Add [poison]2 poison,1,inflict(POISON[;] 2); bonus(1000);,Poison Arrow,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Slingshot_upgraded,Add [poison]4 poison,1,inflict(POISON[;] 4); bonus(1000);,Poison Arrow,COUNTDOWN,9,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Venus Fly Trap,Do [sword]<d6> damage[;]|on 6[;] restore [heal]2 health,2,attack(d); if(d == 6) { bonus(2000); attackself(-2); } if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2); },Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 6) { attackself(-2); sfx(~_heal~[;]~~[;]0.2); }
Venus Fly Trap_downgraded,Do [sword]<d6> damage[;]|on 3[;] restore [heal]1 health,2,attack(d); if(d == 3) { bonus(2000); attackself(-1); } if(d < 3) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2); },Regenerate,MAX3,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 3) { attackself(-1); sfx(~_heal~[;]~~[;]0.2); }
Venus Fly Trap_upgraded,Do [sword]<d6> damage[;]|on 6[;] restore [heal]3 health,2,attack(d); if(d == 6) { bonus(2000); attackself(-3); } if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2); },Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 6) { attackself(-3); sfx(~_heal~[;]~~[;]0.2); }
Detonator,Do [sword]1 damage for|every [poison]1 on enemy,1,attack(getstatus(POISON));,Emetic,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Ink Splat,Blind [blind]1 dice,2,inflict(BLIND[;] 1);,Oh No!,ODD,,PURPLE,change_power,complicate,blind,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Ink Splat_upgraded,Blind [blind]1 dice|[gray](Reuseable),2,inflict(BLIND[;] 1);,Oh No!,ODD,,PURPLE,,,,,-1,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Headbutt,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Plasma Gun,EVEN,,PURPLE,change_power,removereusable,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Headbutt_upgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Plasma Gun,EVEN|FREE1,,PURPLE,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bump,Dice value +1,1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Bump_upgraded,Dice value +1|[gray](Reuseable),1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Pickpocket,Steals [gold]1 gold|[gray](once per battle),1,bonus(1000); self.gold += 1; target.gold -= 1; if(target.gold < 0) target.gold = 0; screenshake();,Harvest,EVEN,,GREEN,change_power,complicate,,,0,NO,YES,excludefromrandomlists|showgold,,,,,,,,,,,,
Pickpocket_upgraded,Steals [gold]2 gold|[gray](once per battle),1,bonus(1000); self.gold += 2; target.gold -= 2; if(target.gold < 0) target.gold = 0; screenshake();,Harvest,EVEN,,GREEN,,,,,0,NO,YES,excludefromrandomlists|showgold,,,,,,,,,,,,
Run away!,Run away!,2,flee();,Jetpack,COUNTDOWN,20,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Run away!_upgraded,Run away!,2,flee();,Jetpack,COUNTDOWN,15,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Run away!_downgraded,No effect,2,donothing();,Jetpack,COUNTDOWN,20,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Run away!_weakened,No effect,2,donothing();,Jetpack,COUNTDOWN,15,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spiky Potion,Do [sword]8 damage|[gray](once per battle),2,attack(8);,Shuriken,COUNTDOWN,8,GRAY,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Spiky Potion_downgraded,Do [sword]4 damage|[gray](once per battle),2,attack(4);,Shuriken,COUNTDOWN,8,GRAY,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Toxic Potion,Inflict [poison]5 poison|[gray](once per battle),2,inflict(POISON[;] 5);,Poison Arrow,COUNTDOWN,8,PURPLE,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Toxic Potion_downgraded,Inflict [poison]3 poison,2,inflict(POISON[;] 3);,Poison Arrow,COUNTDOWN,8,PURPLE,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Fire Potion,[fire]8 damage[;] burn all dice|[gray](once per battle),2,attack(8[;] FIRE); inflict(FIRE[;] ALL);,Ember,COUNTDOWN,8,RED,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Fire Potion_downgraded,Do [fire]4 damage|[gray](once per battle),2,attack(4[;] FIRE);,Ember,COUNTDOWN,8,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ice Potion,[ice]8 damage[;] freeze all dice|[gray](once per battle),2,attack(8[;] ICE); inflict(ICE[;] ALL);,Refrigerator,COUNTDOWN,8,BRIGHTCYAN,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ice Potion_downgraded,Do [ice]4 damage|[gray](once per battle),2,attack(4[;] ICE);,Refrigerator,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bear Potion,Transform into a bear[;]|recover [heal]12 health,2,attackself(-12); beartransform();,Time Stop,COUNTDOWN,8,GREEN,threequartercountdown,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,delay(1.0);,,,
Bear Potion_downgraded,Transform into a bear,2,beartransform();,Time Stop,COUNTDOWN,8,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,delay(1.0);,,,
Snowball,Do [ice]<d6> damage|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE[;] 1);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snowball_upgraded,Do [ice]<d6> damage|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE[;] 1);,Refrigerator,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snowball_downgraded,Do [sword]<d6> damage,1,attack(d);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mystery Box,Very mysterious,1,giveequipment(rand(loadtext(~diceydungeons/mysterybox~))[;] true);,Reversal,NORMAL,,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mystery Box_upgraded,Contents upgraded,1,giveequipment(rand(loadtext(~diceydungeons/mysterybox~)) + ~+~[;] true);,Reversal,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Electric Shock,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d[;] SHOCK); inflict(SHOCK);,Zap,EVEN,,YELLOW,simplify,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Electric Shock_downgraded,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d[;] SHOCK); inflict(SHOCK);,Zap,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Burning Light,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 1); bonus(1000);,Ember,MIN4,,RED,simplify,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Burning Light_downgraded,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 1);,Ember,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Shard,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,change_power,ice,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Ice Shard_downgraded,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE);,Refrigerator,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Spear,Do [sword]10 damage,1,attack(10);,Magic Six,REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Magic Spear_downgraded,Do [sword]5 damage,1,attack(5);,Magic Six,REQUIRE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Spear_upgraded,Do [sword]14 damage,1,attack(14);,Magic Six,REQUIRE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Dagger,Do [sword]2 damage|[gray](Reuseable),1,attack(2);,Shuriken,NORMAL,,RED,change_power,complicate,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Magic Dagger_upgraded,Do [sword]3 damage|[gray](Reuseable),1,attack(3);,Shuriken,NORMAL,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d[;] SHOCK); inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,change_requirements,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer_downgraded,[shock]Shocks the enemy,1,inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer_upgraded,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d[;] SHOCK); inflict(SHOCK);,Plasma Gun,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lament,Do [ice]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d[;]ICE); if(d == 6) { inflict(ICE[;] 1); } sfx(~_ice~[;]~~[;]0.2); sfxdamage(target[;]d);,Arctic Storm,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lament_upgraded,Do [ice]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d[;]ICE); if(d == 7) { inflict(ICE[;] 1); } sfx(~_ice~[;]~~[;]0.2); sfxdamage(target[;]d);,Arctic Storm,NORMAL|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lament_downgraded,Do [ice]<d6> damage,2,attack(d[;]ICE); sfx(~_ice~[;]~~[;]0.2);,Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Life Drain,Drain [heart]<d6> health,1,drain(d);,Blood Sip,MAX3,,RED,increaserange,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Inferno,Do [fire]<d6> damage[;]|Burn [fire]1 dice,1,attack(d[;] FIRE); inflict(FIRE);,Ember,NORMAL|NORMAL,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Inferno_upgraded,Do [fire]<d6> damage[;]|Burn [fire]2 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Ember,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock,2,attack(d[;] SHOCK); if(d == 6) inflict(SHOCK); if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.2); },Jackhammer,NORMAL,,YELLOW,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer_downgraded,Do [shock]<d6> damage,2,attack(d[;] SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer_weakened,Do [shock]<d6> damage,1,attack(d[;] SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer_deckupgrade,Do [shock]<d6> damage|[shock]Shocks the enemy,2,attack(d[;] SHOCK); inflict(SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Whip,Do [fire]<d6> damage[;]|on 6[;] inflict [fire]1 burn,2,attack(d[;] FIRE); if(d == 6) inflict(FIRE);,Blowtorch,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Whip_upgraded,Do [fire]<d6> damage[;]|on 6[;] inflict [fire]2 burn,2,attack(d[;] FIRE); if(d == 6) inflict(FIRE[;] 2);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Whip_downgraded,Do [fire]<d6> damage,2,attack(d[;] FIRE);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sonic Wave,Do [weaken]<d6> damage|[weaken]Weakens enemy,1,attack(d[;] WEAKEN); inflict(WEAKEN);,Plasma Gun,MAX4,,ORANGE,change_requirements,change_function,weaken,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Sonic Wave_upgraded,Do [weaken]<d6> damage|[weaken]Weakens enemy,1,attack(d[;] WEAKEN); inflict(WEAKEN);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sonic Wave_downgraded,[weaken]Weakens enemy,1,inflict(WEAKEN);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Echo Blast,Do [weaken]<d6> damage|[]+[weaken]2 weaken,2,attack(d[;] WEAKEN); inflict(WEAKEN[;] 2);,Plasma Gun,ODD,,ORANGE,change_power,complicate,weaken,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Echo Blast_upgraded,Do [weaken]<d6> damage|[]+[weaken]2 weaken,2,attack(d[;] WEAKEN); inflict(WEAKEN[;] 2);,Plasma Gun,ODD|FREE1,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freeze Spell,Deal [ice]5 damage|Freeze [ice]2 dice,1,attack(5[;] ICE); inflict(ICE[;] 2);,Refrigerator,REQUIRE1,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freeze Spell_downgraded,Deal [ice]5 damage|Freeze [ice]1 dice,1,attack(5[;] ICE); inflict(ICE[;] 1);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freeze Spell_upgraded,Deal [ice]5 damage|Freeze [ice]ALL dice,1,attack(5[;] ICE); inflict(ICE[;] ALL);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Spell,Deal [fire]5 damage|Burn [fire]2 dice,1,attack(5[;] FIRE); inflict(FIRE[;] 2);,Hellfire,REQUIRE2,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Spell_upgraded,Deal [fire]6 damage|Burn [fire]ALL dice,1,attack(6[;] FIRE); inflict(FIRE[;] ALL);,Hellfire,REQUIRE2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Spell_downgraded,Deal [sword]5 damage,1,attack(5);,Hellfire,REQUIRE2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Spell,Inflict [poison]4 poison,1,inflict(POISON[;] 4);,Poison Arrow,REQUIRE3,,PURPLE,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Spell_upgraded,Inflict [poison]5 poison,1,inflict(POISON[;] 5);,Poison Arrow,REQUIRE3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thunder Spell,Deal [shock]5 damage|Shock [shock]2 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 2);,Jackhammer,REQUIRE4,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thunder Spell_downgraded,Deal [shock]5 damage|Shock [shock]1 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 1);,Jackhammer,REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thunder Spell_upgraded,Deal [shock]5 damage|Shock [shock]3 equipment,1,attack(5[;] SHOCK); inflict(SHOCK[;] 3);,Jackhammer,REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Teleport Spell,Dodge next attack,1,inflictself(DODGE);,Quick Thinking,REQUIRE5,,YELLOW,simplify,noeffect,dodge,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Hall of Mirrors,[]+1 dice this fight,1,if(simulation) { bonus(1000); } else{ self.extradice++; },Focus,REQUIRE6,,PURPLE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Sneeze,Reduce the countdowns|on all equipment by <slotdoubles>,2,boostcountdowns(d);,Accelerate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sneeze_upgraded,Reduce the countdowns|on all equipment to zero,2,boostcountdowns(-1);,Accelerate,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sneeze_downgraded,Reduce the countdowns|on all equipment by 6,2,boostcountdowns(6);,Accelerate,REQUIRE6|REQUIRE6,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spike,Do [sword]3 damage,1,attack(3);,Pea Gun,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spike_upgraded,Do [sword]3 damage,1,attack(3);,Pea Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spike_weakened,Do [sword]1 damage,1,attack(1);,Pea Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spike_downgraded,Do [sword]1 damage,1,attack(1);,Pea Gun,COUNTDOWN,6,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Needle,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,change_power,change_power,,,3,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Poison Needle_upgraded,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,,,,,5,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Needle_downgraded,Inflict [poison]1 poison,1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pirate Hook,Do [sword]<d6> damage[;]|on 4[;] you can re-use this,2,attack(d); if(d==4) bonus(1000);,Efficiency,MAX5,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,excludefromrandomlists,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(d == 4 && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); },,if(d == 4) self.setvar(~piratehookkludge~[;]1);,
Pirate Hook_upgraded,Do [sword]<d6> damage[;]|on 5[;] you can re-use this,2,attack(d); if(d==5) bonus(1000);,Efficiency,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(d == 5 && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); },,if(d == 5) self.setvar(~piratehookkludge~[;]1);,
Pirate Hook_downgraded,Do [sword]<d6> damage,2,attack(d);,Efficiency,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cannon Fire,Deal [fire]6 damage|Burn [fire]1 dice,2,attack(6[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cannon Fire_upgraded,Deal [fire]8 damage|Burn [fire]1 dice,2,attack(8[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cannon Fire_downgraded,Deal [fire]3 damage|Burn [fire]1 dice,2,attack(3[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chocolate Cookie,Repeat next action,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,fury,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Chocolate Cookie_downgraded,Next equipment has|+1 use this turn,1,inflictself(REEQUIPNEXT);,Fury,COUNTDOWN,12,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Cauldron,Do [sword]1 damage[;]|get a new dice,1,attack(1); givedice();,Random Roll,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice();
Cauldron_upgraded,Do [sword]1 damage[;] reroll dice|[gray](Reuseable),1,attack(1); givedice();,Random Roll,NORMAL,,PURPLE,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice();
Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lock 1,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 2,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 3,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 4,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 5,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 6,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 1_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 2_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 3_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 4_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 5_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 6_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~[;]true[;]false[;]e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Keyblade,Do [sword]3 damage[;]|return the dice,1,attack(3); givedice(d);,Magic Dice,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(d);
Keyblade_upgraded,Do [sword]4 damage[;]|return the dice,1,attack(4); givedice(d);,Magic Dice,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Keyblade_downgraded,Do [sword]1 damage,1,attack(1);,Magic Dice,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rock,Do [sword]<d6> damage|[gray](once per battle),1,attack(d);,Shuriken,NORMAL,,RED,add2,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Fists,Do [sword]3 damage|[gray](Reuseable),2,attack(3); if(d <= 3) bonus(1000);,Shuriken,NORMAL,,RED,change_power,removereusable,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fists_upgraded,Do [sword]4 damage|[gray](Reuseable),2,attack(4); if(d <= 4) bonus(1000);,Shuriken,NORMAL,,RED,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Knuckle Duster,Do [sword]3 damage|[gray](Reuseable),2,attack(3); if(d <= 3) bonus(1000);,Shuriken,NORMAL,,RED,change_power,removereusable,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Knuckle Duster_upgraded,Do [sword]4 damage|[gray](Reuseable),2,attack(4); if(d <= 4) bonus(1000);,Shuriken,NORMAL,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spanner,Combine dice,1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Spanner_upgraded,Combine dice|[gray](Reuseable),1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Pea Shooter,Do [sword]2 damage|[gray](Reuseable),1,attack(2);,Pea Gun,COUNTDOWN,5,RED,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Pea Shooter_downgraded,Do [sword]1 damage|[gray](Reuseable),1,attack(1);,Pea Gun,COUNTDOWN,5,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Pea Shooter_upgraded,Do [sword]4 damage|[gray](Reuseable),1,attack(4);,Pea Gun,COUNTDOWN,5,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Ice Age,Freeze all dice,2,inflict(ICE[;] ALL); bonus(1000);,Arctic Storm,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Age_upgraded,Freeze all dice,2,inflict(ICE[;] ALL); bonus(1000);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Age_downgraded,Freeze all dice,2,inflict(ICE[;] ALL); bonus(1000);,Arctic Storm,REQUIRE1|REQUIRE1|REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blizzard,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d[;] ICE); inflict(ICE);,Arctic Storm,NORMAL|NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Blizzard_upgraded,Do [ice]<d6> damage[;]|Freeze [ice]2 dice,1,attack(d[;] ICE); inflict(ICE[;] 2);,Arctic Storm,NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Cloud,Inflict [poison]<d6> poison,1,inflict(POISON[;] d);,Poison Arrow,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Cloud_downgraded,Inflict [poison]<d6> poison,1,inflict(POISON[;] d);,Poison Arrow,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Cloud_upgraded,Inflict [poison]3 poison,1,inflict(POISON[;] 3);,Poison Arrow,MAX3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blight,Double [poison] poison,1,inflict(POISON[;] getstatus(POISON));,Poison Arrow,COUNTDOWN,24,PURPLE,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Blight_weakened,Increase [poison] poison|by 50 percent,1,inflict(POISON[;] getstatus(POISON) * 0.5);,Poison Arrow,COUNTDOWN,18,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blight_downgraded,Increase [poison] poison|by 50 percent,1,inflict(POISON[;] getstatus(POISON) * 0.5);,Poison Arrow,COUNTDOWN,24,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cactus Spear,Do [sword]<d6> damage[;]|+[sword]1 for each [thorns] thorn,2,attack(d + getstatusself(THORNS));,Needle,EVEN,,GREEN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cactus Spear_upgraded,Do [sword]<d6> damage[;]|+[sword]2 for each [thorns] thorn,2,attack(d + (getstatusself(THORNS) * 2));,Needle,EVEN,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cactus Shield,Add [thorns]1 thorns|[gray](Reuseable),2,inflictself(THORNS[;] 1);,Needle,ODD,,GREEN,simplify,complicate,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dust Cloud,Do [sword]<d6> damage[;]|on 6[;] blind [blind]2 dice,2,attack(d); if(d == 6) { bonus(2000); inflict(BLIND[;] 2); } if(d < 6) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_blind~[;]~~[;]0.2); },Regenerate,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Dust Cloud_upgraded,Do [sword]<d6> damage[;]|blind [blind]2 dice,2,attack(d); inflict(BLIND[;] 2);,Regenerate,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Dust Cloud_downgraded,Do [sword]<d6> damage,2,attack(d);,Regenerate,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Blood Suck,Drain [heart]<d6> health,2,drain(d);,Blood Sip,MAX4,,RED,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sinkhole,Inflict [weaken]3 weaken,2,inflict(WEAKEN[;] 3); bonus(-200);,Scream,COUNTDOWN,12,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sinkhole_downgraded,Inflict [weaken]2 weaken,2,inflict(WEAKEN[;] 2); bonus(-100);,Scream,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sinkhole_upgraded,Inflict [weaken]4 weaken,2,inflict(WEAKEN[;] 4); bonus(-300);,Scream,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe,Do [sword]<double> damage,2,attack(d * 2); bonus(200);,Scream,MAX4,,YELLOW,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe_downgraded,Do [sword]<double> damage,2,attack(d * 2);,Scream,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe_weakened,Do [sword]<double> damage,1,attack(d * 2);,Scream,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe_deckupgrade,Do [sword]<double> damage,2,attack(d * 2);,Scream,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beetle Headbutt,Do [sword]5 damage[;]|Lock [lock]1 dice,2,attack(5); inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beetle Headbutt_upgraded,Do [sword]8 damage[;]|Lock [lock]1 dice,2,attack(8); inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beetle Headbutt_downgraded,Lock [lock]1 dice,2,inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl,Curse enemy,2,inflict(CURSE);,Cackle,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl_upgraded,Curse enemy,2,inflict(CURSE);,Cackle,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl_downgraded,Curse enemy,2,inflict(CURSE);,Cackle,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl_weakened,No effect,2,donothing(); bonus(-10000);,Cackle,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claw,Do [sword]<d6> damage[;]|and add [poison]1 poison,1,attack(d); inflict(POISON[;] 1);,Poison Arrow,MAX3,,PURPLE,change_requirements,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claw_downgraded,Do [sword]<d6> damage,1,attack(d);,Poison Arrow,MAX3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claw_upgraded,Do [sword]<d6> damage[;]|and add [poison]1 poison,1,attack(d); inflict(POISON[;] 1);,Poison Arrow,MAX5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Camouflage,Blind [blind]2 dice,2,inflict(BLIND[;] 2); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,change_power,change_power,blind,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Camouflage_upgraded,Blind [blind]4 dice,2,inflict(BLIND[;] 4); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Camouflage_downgraded,Blind [blind]1 dice,2,inflict(BLIND); bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Deep Sea Howl,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,REQUIRE4,,PURPLE,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Deep Sea Howl_upgraded,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Overwhelm,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,EVEN,,RED,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Overwhelm_upgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,EVEN,,RED,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Overwhelm_downgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,REQUIRE6,,RED,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Crystallize,Create a random|crystal weapon,2,giveequipment(rand([~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Power~[;]~Smokey~[;]~Life~[;]~Hollow~]) + ~ Crystal~[;] true[;] false[;] e); bonus(-1000);,Magic Six,COUNTDOWN,6,GRAY,change_requirements,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize_upgraded,Create a random|crystal weapon,2,giveequipment(rand([~Earth~[;]~Fire~[;]~Air~[;]~Ice~[;]~Power~[;]~Smokey~[;]~Life~[;]~Hollow~]) + ~ Crystal+~[;] true[;] false[;] e); bonus(-1000);,Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize_downgraded,No effect,2,bonus(-1500);,Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Earth Crystal,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,attack(d[;] WEAKEN); inflict(WEAKEN);,Plasma Gun,ODD,,ORANGE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Crystal,Deal [fire]<d6> damage|Burn [fire]1 dice,2,attack(d[;] FIRE); inflict(FIRE);,Ember,EVEN,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Crystal,Do [shock]<d6> damage[;]|[]+[shock]1 shock,2,attack(d[;] SHOCK); inflict(SHOCK);,Zap,EVEN,,YELLOW,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Crystal,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,2,attack(d[;] ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,complicate,ice,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Power Crystal,Gain a random blessing,2,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD[;]FURY[;]REDUCE[;]REEQUIPNEXT[;]DODGE]); }else { randomstatus = rand([SHIELD[;]REDUCE[;]REEQUIPNEXT[;]DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus[;] a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; sfx(~_~ + randomstatus.toLowerCase()[;]~~[;]0.2);,Power Up,EVEN,,PURPLE,simplify,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,donothing();,
Smokey Crystal,Curse enemy,2,inflict(CURSE);,Cackle,ODD,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Life Crystal,Recover [heal]<d6> health,2,attackself(-d);,Regenerate,MAX4,,GREEN,increaserange,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hollow Crystal,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,GRAY,add2,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Staff,Deal [fire]9 damage|Burn [fire]2 dice,2,attack(9[;] FIRE); inflict(FIRE[;] 2);,Blowtorch,COUNTDOWN,12,RED,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Staff_weakened,Deal [fire]5 damage|Burn [fire]1 dice,2,attack(5[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,9,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Staff_downgraded,Deal [fire]5 damage|Burn [fire]1 dice,2,attack(5[;] FIRE); inflict(FIRE[;] 1);,Blowtorch,COUNTDOWN,12,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Gemstaff,Deal [ice]9 damage|Inflict [ice]2 freeze,2,attack(9[;] ICE); inflict(ICE[;] 2);,Flash Freeze,COUNTDOWN,12,BRIGHTCYAN,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Gemstaff_weakened,Deal [ice]5 damage|Inflict [ice]1 freeze,2,attack(5[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Gemstaff_downgraded,Deal [ice]5 damage|Inflict [ice]1 freeze,2,attack(5[;] ICE); inflict(ICE[;] 1);,Flash Freeze,COUNTDOWN,12,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
First Aid Kit,Heal [heal]8 health,1,attackself(-8);,Regenerate,COUNTDOWN,16,GREEN,threequartercountdown,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
First Aid Kit_downgraded,Heal [heal]4 health,1,attackself(-4);,Regenerate,COUNTDOWN,16,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
First Aid Kit_weakened,Heal [heal]4 health,1,attackself(-4);,Regenerate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Squawk,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Squawk_upgraded,Do [sword]2 damage|Silence Enemy,2,attack(2); inflict(SILENCE); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Squawk_downgraded,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Flight,Dodge next attack,2,inflictself(DODGE);,Quick Thinking,EVEN,,YELLOW,simplify,complicate,dodge,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Rotten Core,Reduce health by half,2,pierceattack((target.hp / 2));,Time Stop,COUNTDOWN,16,RED,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rotten Core_weakened,Reduce health by one third,2,pierceattack((target.hp / 3));,Time Stop,COUNTDOWN,12,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rotten Core_downgraded,Reduce health by one third,2,pierceattack((target.hp / 3));,Time Stop,COUNTDOWN,16,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worm Bite,Do [sword]1 damage,2,attack(1);,Bubble Gun,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worm Bite_downgraded,Do [sword]1 damage,2,attack(1);,Bubble Gun,MIN4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worm Bite_upgraded,Do [sword]3 damage,2,attack(3);,Bubble Gun,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fool's Fire,Inflict [vanish]Vanish,2,inflict(VANISH);,Cackle,COUNTDOWN,12,PINK,halfcountdown,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fool's Fire_downgraded,Burns [fire]1 dice,2,inflict(FIRE);,Cackle,COUNTDOWN,12,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fool's Fire_weakened,Burns [fire]1 dice,2,inflict(FIRE);,Cackle,COUNTDOWN,6,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Six Shooter,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,change_requirements,change_power,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Six Shooter_downgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Six Shooter_upgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,,,,,6,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Midnight Charm,Roll 2 sixes,1,givedice([6[;] 6]);,Focus,COUNTDOWN,10,GREEN,halfcountdown,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Midnight Charm_weakened,Roll 1 six,1,givedice(6);,Focus,COUNTDOWN,5,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Midnight Charm_downgraded,Roll 1 six,1,givedice(6);,Focus,COUNTDOWN,10,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Rat,Inflict [poison]1 poison[;]|roll a new dice,1,inflict(POISON); givedice();,Emetic,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice();
Rat_downgraded,Inflict [poison]1 poison,1,inflict(POISON);,Emetic,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rat_upgraded,Inflict [poison]1 poison[;] roll a|dice with value 3 or more,1,inflict(POISON); givedice(rand([3[;]4[;]5[;]6]));,Emetic,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(rand([3[;]4[;]5[;]6]));
Shooting Star,Do [sword]<d6> damage[;]|inflict [confuse]Confuse,2,attack(d); inflict(CONFUSE);,Stardust,ODD,,YELLOW,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,EVEN,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow_upgraded,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfxdamage(target[;]d); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,NORMAL,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow_downgraded,Add 2x random status,2,var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,EVEN,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wail,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,REQUIRE5,,PURPLE,change_requirements,doublerequirements,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Wail_upgraded,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,MIN5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Shriek,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,REQUIRE2,,PURPLE,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shriek_upgraded,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nightmare,Do [sword]999 damage,2,attack(999);,Reversal,COUNTDOWN,99,PURPLE,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nightmare_downgraded,Do [sword]998 damage,2,attack(998);,Reversal,COUNTDOWN,99,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nightmare_weakened,Do [sword]998 damage,2,attack(998);,Reversal,COUNTDOWN,74,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cardboard Sword,Do [sword]<cardboardsword> damage|Lose [sword]2 each use,2,var amount = 9 - (e.timesused * 2); if(amount >= 1){ attack(amount); } else { attack(1); },Stardust,EVEN,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cardboard Sword_upgraded,Do [sword]<upgradedcardboardsword> damage|Lose [sword]1 each use,2,var amount = 9 - (e.timesused); if(amount >= 1){ attack(amount); } else { attack(1); },Stardust,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glue,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,ODD,,PURPLE,change_power,removereusable,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glue_upgraded,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,ODD,,PURPLE,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sad Verse,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,bonus(1000); attack(d[;] WEAKEN); inflict(WEAKEN);,Scream,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sad Verse_upgraded,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,bonus(1000); attack(d[;] WEAKEN); inflict(WEAKEN);,Scream,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sad Verse_downgraded,Do [weaken]<d6> damage,2,bonus(1000); attack(d[;] WEAKEN);,Scream,MAX4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
High Note,Do [weaken]12 damage,2,attack(12[;]WEAKEN);,Scream,COUNTDOWN,20,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
High Note_upgraded,Do [weaken]12 damage|[weaken]Weakens enemy,2,attack(12[;]WEAKEN); inflict(WEAKEN);,Scream,COUNTDOWN,20,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
High Note_downgraded,Do [weaken]9 damage,2,attack(9[;]WEAKEN);,Scream,COUNTDOWN,20,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Avalanche,Do [sword]3 damage[;]|reroll with lower value,1,attack(3); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));,Shuriken,MIN3,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Avalanche_upgraded,Do [sword]4 damage[;]|reroll with lower value,1,attack(4); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));,Shuriken,MIN3,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Avalanche_downgraded,Do [sword]3 damage[;]|reroll with lower value,1,attack(3); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));,Shuriken,MIN4,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Glare,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glare_upgraded,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glare_downgraded,Lock [lock]1 dice,2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet,Do [sword]<twicetimesused> damage|Add +2 each use,2,attack((e.timesused * 2) + 4);,Magic Dice,COUNTDOWN,7,RED,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet_downgraded,Do [sword]<twicetimesused> damage,2,attack((e.timesused * 2) + 4); e.timesused--;,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet_weakened,Do [sword]<twicetimesused> damage,1,attack((e.timesused * 2) + 4); e.timesused--;,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet_deckupgrade,Do [sword]<twicetimesused_plus1> damage|Add +2 each use,2,attack((e.timesused * 2) + 5);,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Yoink,Borrow equipment|until next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I've borrowed this.~[;]~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); } } } else { bonus(1000 + (self.dicepool.length * 500)); },Reversal,EVEN,,PINK,simplify,complicate,,,0,NO,NO,excludefromrandomlists|cannotsteal|curseavoid|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Campfire,[fire]<timesused> dmg[;] burn a dice|Add +[fire]1 each use,2,attack(e.timesused + 1[;] FIRE); inflict(FIRE); bonus(1000);,Ember,EVEN,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Campfire_upgraded,[fire]<timesused> dmg[;] burn two dice|Add +[fire]1 each use,2,attack(e.timesused + 1[;] FIRE); inflict(FIRE[;] 2); bonus(1000);,Ember,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Conditioner,[ice]<timesused> dmg[;] inflict [ice]1 freeze|Add +[ice]1 each use,2,attack(e.timesused + 1[;] ICE); inflict(ICE); bonus(1000);,Flash Freeze,EVEN,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Conditioner_upgraded,[ice]<timesused> dmg[;] inflict [ice]2 freeze|Add +[ice]1 each use,2,attack(e.timesused + 1[;] ICE); inflict(ICE[;] 2); bonus(1000);,Flash Freeze,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pocket Knife,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3|FREE1,,RED,change_power,change_power,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pocket Knife_upgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3|FREE2,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pocket Knife_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3,,RED,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earthquake,Weaken [weaken]3 equipment[;]|do [weaken]6 damage,2,attack(6[;] WEAKEN); inflict(WEAKEN[;] 3);,Scream,COUNTDOWN,10,ORANGE,change_power,change_power,weaken,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earthquake_downgraded,Weaken [weaken]2 equipment[;]|do [weaken]6 damage,2,attack(6[;] WEAKEN); inflict(WEAKEN[;] 2);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earthquake_upgraded,Weaken [weaken]3 equipment[;]|do [weaken]9 damage,2,attack(9[;] WEAKEN); inflict(WEAKEN[;] 3);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tower Shield,Add [shield]<d6> shield|[gray](Reuseable),2,inflictself(SHIELD[;] d);,Protection,MAX5,,ORANGE,change_power,change_power,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Tower Shield_downgraded,Add [shield]<d6> shield,2,inflictself(SHIELD[;] d);,Protection,MAX5,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Tower Shield_upgraded,Add [shield]<d6> shield|[gray](Reuseable),2,inflictself(SHIELD[;] d);,Protection,NORMAL,,ORANGE,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Charge!,Bash with shield[;]|do [shield]<myshield> damage,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100);,Plasma Gun,COUNTDOWN,12,ORANGE,change_power,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Charge!_upgraded,Bash with shield[;]|do [shield]<myshield> damage,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100);,Plasma Gun,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Charge!_downgraded,Bash with shield[;] do [shield]<myshield>|damage[;] but lose all shield,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100); removestatusself(SHIELD[;] getstatusself(SHIELD));,Plasma Gun,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,removestatusself(SHIELD[;] getstatusself(SHIELD));
Charge!_weakened,Bash with shield[;] do [shield]<myshield>|damage[;] but lose all shield,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100); removestatusself(SHIELD[;] getstatusself(SHIELD));,Plasma Gun,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,removestatusself(SHIELD[;] getstatusself(SHIELD));
Shield Bash,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,DOUBLES|DOUBLES,,ORANGE,change_requirements,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shield Bash_downgraded,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,REQUIRE6|REQUIRE6,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shield Bash_upgraded,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,EVEN,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Smog Cloud,Inflict [poison]3 poison|and [blind]3 blind,2,inflict(POISON[;] 3); inflict(BLIND[;] 3);,Poison Arrow,COUNTDOWN,15,PURPLE,change_poison,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Smog Cloud_downgraded,Inflict [poison]3 poison,2,inflict(POISON[;] 3);,Poison Arrow,COUNTDOWN,15,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Smog Cloud_upgraded,Inflict [poison]4 poison|and [blind]4 blind,2,inflict(POISON[;] 4); inflict(BLIND[;] 4);,Poison Arrow,COUNTDOWN,15,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Curse,Do [sword]<d6> damage[;]|Inflict curse,1,attack(d); inflict(CURSE);,Cackle,REQUIRE1|FREE1,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Curse_upgraded,Do [sword]<d6> damage[;]|Inflict curse,1,attack(d); inflict(CURSE);,Cackle,REQUIRE1|FREE4,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Curse_downgraded,Inflict curse,1,inflict(CURSE);,Cackle,REQUIRE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Wind,Do [sword]<d6> damage[;]|Lock [lock]2 dice,1,attack(d); inflict(LOCK[;] 2);,Overload,REQUIRE2|FREE2,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Wind_upgraded,Do [sword]<d6> damage[;]|Lock [lock]2 dice,1,attack(d); inflict(LOCK[;] 2);,Overload,REQUIRE2|FREE4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Wind_downgraded,Lock [lock]2 dice,1,inflict(LOCK[;] 2);,Overload,REQUIRE2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Shadow,Do [sword]<d6> damage[;]|Blind [blind]3 dice,1,attack(d); inflict(BLIND[;] 3);,Overload,REQUIRE3|FREE3,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Shadow_upgraded,Do [sword]<d6> damage[;]|Blind [blind]3 dice,1,attack(d); inflict(BLIND[;] 3);,Overload,REQUIRE3|FREE5,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Shadow_downgraded,Blind [blind]3 dice,1,inflict(BLIND[;] 3);,Overload,REQUIRE3,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Cold,Do [ice]<d6> damage[;]|Freeze [ice]4 dice,1,attack(d[;] ICE); inflict(ICE[;] 4);,Arctic Storm,REQUIRE4|FREE4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Cold_upgraded,Do [ice]<d6> damage[;]|Freeze [ice]4 dice,1,attack(d[;] ICE); inflict(ICE[;] 4);,Arctic Storm,REQUIRE4|FREE5,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Cold_downgraded,Freeze [ice]4 dice,1,inflict(ICE[;] 4);,Arctic Storm,REQUIRE4,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Ashes,Do [fire]<d6> damage[;]|Burn [fire]5 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 5);,Ember,REQUIRE5|FREE5,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Ashes_upgraded,Do [fire]<d6> damage[;]|Burn [fire]5 dice,1,attack(d[;] FIRE); inflict(FIRE[;] 5);,Ember,REQUIRE5|FREE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Ashes_downgraded,Burn [fire]5 dice,1,inflict(FIRE[;] 5);,Ember,REQUIRE5,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Storm,Do [shock]<d6> damage[;]|Inflict [shock]6 shock,1,attack(d[;] SHOCK); inflict(SHOCK[;] 6);,Zap,REQUIRE6|FREE6,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Storm_upgraded,Do [shock]<d6> damage[;]|Shock [shock]6 and silence,1,attack(d[;] SHOCK); inflict(SHOCK[;] 6); inflict(SILENCE);,Zap,REQUIRE6|FREE6,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Storm_downgraded,Inflict [shock]6 shock,1,inflict(SHOCK[;] 6);,Zap,REQUIRE6,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bee Sting,Do [shock]4 damage[;]|Inflict [shock]1 shock,1,attack(4[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bee Sting_upgraded,Do [shock]6 damage[;]|Inflict [shock]1 shock,1,attack(6[;] SHOCK); inflict(SHOCK[;] 1);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bee Sting_downgraded,Do [sword]4 damage,1,attack(4);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mood Change,Change the weather[;]|recover [heal]3 health,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } attackself(-3); var weather = rand([~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~]); giveequipment([weather|weather|weather|~Mood Change~]|true|false);,Regenerate,COUNTDOWN,5,GREEN,change_power,change_power,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_upgraded,Change the weather[;]|recover [heal]6 health,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } attackself(-6); var weather = rand([~Hurricane+~|~Thunder Storm+~|~Heatwave+~|~Snowstorm+~|~Thunder Storm+~|~Heatwave+~|~Snowstorm+~]); giveequipment([weather|weather|weather|~Mood Change+~]|true|false);,Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_downgraded,Change the weather,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } var weather = rand([~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~]); giveequipment([weather|weather|weather|~Mood Change~]|true|false); sfx(~_thinghappens~);,Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_weakened,Change the weather,2,if(!simulation) { var eqcount = 0; for(e in self.equipment){ if(e.ready) { eqcount++; } } if(eqcount >= 1) { for(e in self.equipment){ if(e.name != ~Mood Change~){ e.usedthisbattle = true; e.ready = false; e.animate(~error~); } } } } var weather = rand([~Hurricane+~|~Thunder Storm+~|~Heatwave+~|~Snowstorm+~|~Thunder Storm+~|~Heatwave+~|~Snowstorm+~]); giveequipment([weather|weather|weather|~Mood Change+~]|true|false); sfx(~_thinghappens~);,Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,YES,excludefromrandomlists|curseavoid|cannotreuse|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Hurricane,Do [sword]3[;] lock [lock]1 dice|[gray](once per battle),2,attack(3); inflict(LOCK);,Random Roll,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Hurricane_upgraded,Do [sword]4[;] lock [lock]1 dice|[gray](once per battle),2,attack(4); inflict(LOCK);,Random Roll,COUNTDOWN,5,PURPLE,,,,,0,NO,YES,,,,,,,,,,,,,
Hurricane_downgraded,Lock [lock]1 dice|[gray](once per battle),2,inflict(LOCK);,Random Roll,COUNTDOWN,5,PURPLE,,,,,0,NO,YES,,,,,,,,,,,,,
Thunder Storm,Do [shock]3[;] inflict [shock]1 shock|[gray](once per battle),2,attack(3|SHOCK); inflict(SHOCK);,Zap,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Thunder Storm_upgraded,Do [shock]4[;] inflict [shock]1 shock|[gray](once per battle),2,attack(4|SHOCK); inflict(SHOCK);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,YES,,,,,,,,,,,,,
Thunder Storm_downgraded,Inflict [shock]1 shock|[gray](once per battle),2,inflict(SHOCK);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,YES,,,,,,,,,,,,,
Heatwave,Do [fire]3[;] inflict [fire]1 burn|[gray](once per battle),2,attack(3|FIRE); inflict(FIRE);,Hellfire,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Heatwave_upgraded,Do [fire]4[;] inflict [fire]1 burn|[gray](once per battle),2,attack(4|FIRE); inflict(FIRE);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,YES,,,,,,,,,,,,,
Heatwave_downgraded,Inflict [fire]1 burn|[gray](once per battle),2,inflict(FIRE);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,YES,,,,,,,,,,,,,
Snowstorm,Do [ice]3[;] inflict [ice]1 freeze|[gray](once per battle),2,attack(3|ICE); inflict(ICE);,Hellfire,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Snowstorm_upgraded,Do [ice]4[;] inflict [ice]1 freeze|[gray](once per battle),2,attack(4|ICE); inflict(ICE);,Hellfire,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,YES,,,,,,,,,,,,,
Snowstorm_downgraded,Inflict [ice]1 freeze|[gray](once per battle),2,inflict(ICE);,Hellfire,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,YES,,,,,,,,,,,,,
[END ENEMY EQUIPMENT],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN BEAR],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Bear Maul,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Bear Smash,NORMAL|FREE2,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Maul_upgraded,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Bear Smash,NORMAL|FREE4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Maul_downgraded,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Bear Smash,MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hibernate,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hibernate_upgraded,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hibernate_downgraded,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,MAX2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Roar,Weaken [weaken]3 equipment,1,inflict(WEAKEN[;] 3);,Bear Smash,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Roar_upgraded,Weaken [weaken]4 equipment,1,inflict(WEAKEN[;] 4);,Bear Smash,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Roar_downgraded,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Bear Smash,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Charge,Repeat next action,1,inflictself(FURY);,Fury,COUNTDOWN,10,PURPLE,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Picnic Basket,Keep a <d6> for next turn,1,inflictself(~stash~+d[;]1); inflictself(~illuminate~);,,NORMAL,,PINK,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Picnic Basket_upgraded,Keep a <d6> for next turn|[gray](Reuseable),1,inflictself(~stash~+d[;]1); inflictself(~illuminate~);,,NORMAL,,PINK,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Marmalade,Get a [dice]6 next turn,1,inflictself(~stash~+6[;]1); inflictself(~illuminate~);,,REQUIRE1,,ORANGE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Trap,Lock [lock]1 dice,1,inflict(LOCK[;] 1); bonus(1000);,Random Roll,REQUIRE1,,PURPLE,increaserange,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bearpick,Shred a big dice into|other[;] smaller dice,1,var splitamount = rand([2[;]2[;]2[;]3[;]3[;]4]); givedice(split(d[;]splitamount)[;] ~splitdice~);,Steal,MIN5,,GREEN,increaserange,decreaserange,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Honey,Reroll the dice[;] get a|higher value than before,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); },Megabump,MAX4,,YELLOW,increaserange,decreaserange,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Bear Swipe,Do [sword]<d6> damage[;]|return the dice,1,attack(d); givedice(d);,Shuriken,MAX3,,RED,increaserange,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Bear Hug,Do [sword]<double> damage[;]|lose a dice,2,attack(d * 2); self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1 - self.dice; sfx(~magic_gaindice~[;]~~[;]0.2);
[END BEAR],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN MISC USED IN MOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Snowblower,[ice]<d6> dmg[;] +[ice]2 freeze|[gray](once per battle),1,attack(d[;] ICE); inflict(ICE[;] 2);,Flash Freeze,NORMAL|NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Snowblower_upgraded,[ice]<d6> dmg[;] +[ice]4 freeze|[gray](once per battle),2,attack(d[;] ICE); inflict(ICE[;] 4);,Flash Freeze,NORMAL|NORMAL|NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Flamethrower,[fire]<d6> dmg[;] +[fire]2 burn|[gray](once per battle),1,attack(d[;] FIRE); inflict(FIRE[;] 2);,Blowtorch,NORMAL|NORMAL,,RED,change_power,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Flamethrower_upgraded,[fire]<d6> dmg[;] +[fire]4 burn|[gray](once per battle),2,attack(d[;] FIRE); inflict(FIRE[;] 4);,Blowtorch,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ice Shatter,Do [ice]<d6> damage[;]|+[ice]3 if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d + 3)[;] ICE); } else { attack((d)[;] ICE); },Arctic Storm,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Shatter_upgraded,Do [ice]<d6> damage[;]|double if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d * 2)[;] ICE); } else { attack((d)[;] ICE); },Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Shatter_downgraded,Do [ice]<d6> damage[;]|+[ice]3 if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d + 3)[;] ICE); } else { attack((d)[;] ICE); },Arctic Storm,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Shatter,Do [fire]<d6> damage[;]|+[fire]3 if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d + 3)[;] FIRE); } else { attack((d)[;] FIRE); },Hellfire,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Shatter_upgraded,Do [fire]<d6> damage[;]|double if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d * 2)[;] FIRE); } else { attack((d)[;] FIRE); },Hellfire,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Shatter_downgraded,Do [fire]<d6> damage[;]|+[fire]3 if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d + 3)[;] FIRE); } else { attack((d)[;] FIRE); },Hellfire,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Last Laugh,Enemy will survive the|next fatal blow,1,inflict(SURVIVE);,Still Standing,COUNTDOWN,24,PURPLE,threequartercountdown,noeffect,survive,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Last Laugh?,Enemy will survive for|the next three turns...,1,inflict(SURVIVE);,Still Standing,COUNTDOWN,24,PURPLE,threequartercountdown,noeffect,,,0,NO,YES,excludefromrandomlists|alternateversion,,,,,,,,,,,,
Iced Latte,Self inflict [ice]1 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(ICE[;]1); sfx(~_ice~);,e.animate(~flashandshake~);,,,,,,,
Iced Latte_upgraded,Roll an extra 1|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); givedice(1);,,,,,,,
Iced Latte_downgraded,Self inflict [ice]2 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(ICE[;]2); sfx(~_ice~);,e.animate(~flashandshake~);,,,,,,,
Scrap Kettle,Self inflict [fire]1 burn|(Always offered as scrap),1,,Ember,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(FIRE[;]1); sfx(~_fire~);,e.animate(~flashandshake~);,,,,,,,
Scrap Kettle_upgraded,Roll a burning dice|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); inflictself(FIRE[;]1); givedice(); sfx(~_fire~);,,,,,,,
Scrap Kettle_downgraded,Self inflict [fire]2 burns|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(FIRE[;]2); sfx(~_fire~);,e.animate(~flashandshake~);,,,,,,,
Boop,Do [sword]2 damage,2,attack(2);,Bubble Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Boop_upgraded,Do [sword]2 damage[;]|return the dice,2,attack(2); givedice(d);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Boop_downgraded,Do [sword]1 damage,2,attack(1);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bop,Do [sword]3 damage,2,attack(3); if(!simulation){ self.setvar(~bopcount~[;] self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,self.setvar(~bopcount~[;] 0);,self.setvar(~bopcount~[;] 0);,,,,,,,,,
Bop_upgraded,Do [sword]5 damage,2,attack(5); if(!simulation){ self.setvar(~bopcount~[;] self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,self.setvar(~bopcount~[;] 0);,self.setvar(~bopcount~[;] 0);,,,,,,,,,
Bop_downgraded,Do [sword]2 damage,2,attack(2); if(!simulation){ self.setvar(~bopcount~[;] self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,self.setvar(~bopcount~[;] 0);,self.setvar(~bopcount~[;] 0);,,,,,,,,,
Spiked Shield,Even: [sword]<evendice_d6> damage|Odd: [shield]<odddice_d6> shield,2,if(d%2 == 0){ attack(d); sfxdamage(target[;]d); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },Protection,MAX5,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(d%2 == 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Boomerang,Do [sword]<double> to enemy[;]|but [sword]<d6> to yourself,1,attack(2 * d); boomerang(d);,Fury,NORMAL,,RED,change_boomerang,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,attackself(d); sfxdamage(self[;]d);
Boomerang_upgraded,Do [sword]<double> to enemy[;]|but [sword]3 to yourself,1,attack(2 * d); boomerang(3);,Fury,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,attackself(3); sfxdamage(self[;]3);
Short Sword,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,MAX4,,RED,increaserange,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Call for Backup Warrior?,Warrior Charge|Add 3 to Kapow damage,2,self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 3); sfx(~_magic~);,,,,BRIGHTCYAN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior?_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior,Warrior Smash|[sword]<var:bopcount> dmg[;] +1 per bop,2,attack(self.getvar(~bopcount~));,Lucky Shot,,,BRIGHTCYAN,,change_power,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,,
Call for Backup Thief,Yoink|Borrow equipment,2,//$var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~)){ enemyequipment.push(eq);}} if(enemyequipment.length > 0){var randomequipment = rand(enemyequipment); replacemewith(randomequipment.name + randomequipment.namemodifier); }$,Steal,,,GREEN,,change_power,,none,0,NO,NO,excludefromrandomlists|cannotsteal|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot,Slot Machine|Get random equipment,2,//$replacemewith(rand(getequipmentlist(null|[]|[~skillcard~|~excludefromrandomlists~|~robotonly~|~witchonly~|~alternateversion~]))| -1);$,Reversal,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1| 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?,Black Market|Rent a powerful item|Costs [gold]1[;] you have [gold]<gold>,2,//$if(self.gold > 0){ self.gold--; replacemewith(rand([~Dark Shadow~|~Bear Maul~|~Two Handed Sword~|~Tower Shield~|~Earthquake~|~Tap Dance~|~Head of Krampus~|~Nerf Gun~|~Candy Cane Spear~])| -1); } else { self.textparticle(~Can't afford!~); }$,,,,GREEN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?,Power Surge|Add +1 to all dice|less than six,2,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue < 6){ mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,,,,GRAY,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Thief?_downgraded,Snake Eyes|Roll 2 ones,2,givedice([1| 1]);,Steal,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Robot?_downgraded,Regenerate|Heal [heal]3 health,2,attackself(-3);,Reversal,,,GRAY,,,,none,0,YES,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Buster Sword,Do [sword]<d6> damage[;]|immune to errors,1,attack(d);,Plasma Gun,NORMAL,,GRAY,add2,complicate,,,0,NO,NO,excludefromrandomlists|errorimmune|robotonly,,,,,,,,,,,,
Sun Beam,Do [sword]5 damage|(Cost [mana]2[]: double damage),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); attack(10); } else { attack(5); },,EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,if(getstatusself(MANA) >= 2) { removestatusself(MANA[;]2); }
Lucky 7,Do [sword]7[;] return a dice,1,attack(7); var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice);,Power Up,NORMAL|NORMAL,7,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice);
Lucky 7_upgraded,Do [sword]7[;] return first dice,1,attack(7); givedice(actualdice[0].basevalue);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(actualdice[0].basevalue);
Lucky 7_downgraded,Do [sword]7 damage,1,attack(7);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Moon Beam,Do [sword]5 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(10); } else { attack(5); },,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Moon Beam_upgraded,Do [sword]7 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(14); } else { attack(7); },,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cold Snap,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Cold Snap_upgraded,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2) { attack(5); inflict(ICE[;] 1); sfx(~_ice~[;]~~[;]0.2); } else { attack(5); sfxdamage(target[;]5); },Refrigerator,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Duplicate,Duplicate a dice,1,givedice([d[;] d]);,Clone Device,MIN4,,GREEN,simplify,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Lunasa,Replace the spell in slot <slotdoubles>|with a random spell,1,Spellbook.changespellflash(d[;]rand(loadtext(~diceydungeons/unexpectedspells_remix~)));,,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|witchonly,1,,,,,,,,,,,
Lunasa_upgraded,Replace the spell in slot <d6>|with a random spell,1,Spellbook.changespellflash(d[;]rand(loadtext(~diceydungeons/unexpectedspells_remix~)));,,NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Lunasa_downgraded,Replace the spell in slot 1|with a random spell,1,Spellbook.changespellflash(1[;]rand(loadtext(~diceydungeons/unexpectedspells_remix~)));,,REQUIRE1|REQUIRE1,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Mirror Cauldron,Get a new dice[;] on 6|get +1 dice this fight,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d == 6) { self.extradice++; sfx(~magic_gaindice~); } },Focus,MIN4,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Mirror Cauldron_upgraded,Get a new dice[;] on even|get +1 dice this fight,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d % 2 == 0) { self.extradice++; sfx(~magic_gaindice~); } },Focus,MIN4,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Mirror Cauldron_downgraded,Get a new dice,1,givedice();,Focus,MIN4,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Crowbar,Reduce the countdowns|on all equipment by <d6>,1,boostcountdowns(d);,Accelerate,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Crowbar_upgraded,Reduce countdowns by <d6>|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,NORMAL,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Skeleton Key,Set all dice to <slotdoubles>,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(d[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,Replicate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Skeleton Key_upgraded,Set all dice to <d6>,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(d[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,Replicate,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Skeleton Key_downgraded,Set all dice to 2,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(2[;] self.screenposition()[;] c * 0.05); c++; } } sfx(~diceroll~);,Replicate,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hacksaw,Split a dice in three,1,givedice(split(d[;] 3)[;] ~splitdice~);,Magic Lockpick,MIN3,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hacksaw_upgraded,Split a dice in three,1,givedice(split(d[;] 3)[;] ~splitdice~);,Magic Lockpick,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backfire,Lose [heart]5 health,1,pierceattackself(5);,Infinity Mirror,REQUIRE1,,PURPLE,change_backfire,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Backfire_downgraded,Lose [heart]15 health,1,pierceattackself(15);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backfire_weakened,Lose [heart]15 health,1,pierceattackself(15);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backfire_upgraded,Lose [heart]10 health,1,pierceattackself(10);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Very Good Sword,Do [sword]<double> damage,2,attack(d * 2);,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Very Good Sword_upgraded,Do [sword]<triple> damage,2,attack(d * 3);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Very Good Sword_downgraded,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spud Cannon,[sword]2 dmg[;] [sword]4 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(4); } else { attack(2); },Pea Gun,COUNTDOWN,4,YELLOW,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spud Cannon_downgraded,[sword]1 dmg[;] [sword]2 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(2); } else { attack(1); },Pea Gun,COUNTDOWN,4,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spud Cannon_upgraded,[sword]3 dmg[;] [sword]6 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(6); } else { attack(3); },Pea Gun,COUNTDOWN,4,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snapdragon,Do [sword]3 damage[;]|on 6[;] gain [mana]2 mana,1,attack(3); if(d == 6) { inflictself(MANA[;]2); sfxdamage(target[;]3); sfx(~_mana~[;]~~[;]0.2); } else { sfxdamage(target[;]3); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,if(d == 6) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Snapdragon_upgraded,Do [sword]3 damage[;]|on even[;] gain [mana]2 mana,1,attack(3); if(d % 2 == 0) { inflictself(MANA[;]2); sfxdamage(target[;]3); sfx(~_mana~[;]~~[;]0.2); } else { sfxdamage(target[;]3); },,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d % 2 == 0) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Snapdragon_downgraded,Do [sword]3 damage[;]|on 3[;] gain [mana]2 mana,1,attack(3); if(d == 3) { inflictself(MANA[;]2); sfxdamage(target[;]3); sfx(~_mana~[;]~~[;]0.2); } else { sfxdamage(target[;]3); },,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 3) { inflictself(MANA[;]2); sfx(~_mana~[;]~~[;]0.2); }
Fruit Bowl,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice),1,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); }
Fruit Bowl_upgraded,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice)|[gray](Reuseable),1,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA[;]1); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); } else { givedice(); }
Fruit Bowl_downgraded,Do [sword]1 damage,1,attack(1);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Daffodil,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,,MIN4,,YELLOW,change_power,decreaserange,,,0,YES,NO,excludefromrandomlists,1,,,,e.animate(~flashandshake~); inflictself(MANA[;]1);,,,,,,,
Daffodil_upgraded,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,,MIN2,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflictself(MANA[;]1);,,,,,,,
Dagger,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Steal,MAX3,,RED,add1,complicate,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lockpick,Split a dice in two,1,givedice(split(d)[;] ~splitdice~);,Steal,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Lockpick_downgraded,Split value in two,1,givedice(d / 2);,Steal,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lockpick_upgraded,Split a dice in two|On six[;] split into three,1,if(d==6){ givedice(split(d[;] 3)[;] ~splitdice~); } else { givedice(split(d)[;] ~splitdice~); },Steal,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,RED,add1,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Nail Bat,Do [sword]<d6> damage|(You lose [heart]2 hp each turn),2,attack(d);,Lucky Shot,NORMAL|FREE3,,RED,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Nail Bat_downgraded,Do [sword]<d6> damage|(You lose [heart]2 hp each turn),2,attack(d);,Lucky Shot,NORMAL|FREE1,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Nail Bat_weakened,Do [sword]<d6> damage|(You lose [heart]2 hp each turn),1,attack(d);,Lucky Shot,NORMAL|FREE1,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Shadow Dice,Duplicate a dice|Lose [heart]<d6> health,1,givedice([d| d]); pierceattackself(d);,Clone Device,NORMAL,,PURPLE,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Shadow Dice_upgraded,Duplicate a dice|Lose [heart]<d6> health|[gray](Reuseable),1,givedice([d| d]); pierceattackself(d);,Clone Device,NORMAL,,PURPLE,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Subdivide,Split a dice evenly,1,givedice([(d / 2)| (d / 2)]);,Clone Device,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Subdivide_upgraded,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)| (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)| (d / 2)]); }},Clone Device,MIN2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Subdivide_downgraded,Split a six evenly,1,givedice([(d / 2)| (d / 2)]);,Clone Device,REQUIRE6,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Barrier,Add [shield]5 shield,1,inflictself(SHIELD| 5);,Protection,REQUIRE5,,ORANGE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Healing Crystal,Recover [heal]<d6> health,1,attackself(-d); if(self.hp < self.maxhp) bonus(500 * d);,Regenerate,MAX3,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Healing Crystal_upgraded,Recover [heal]<d6> health[;]|reduce poison by 1,1,attackself(-d); removestatusself(POISON| 1); if(self.hp < self.maxhp) { bonus(500 * d); },Regenerate,MAX4,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Snake Eye Charm,Roll 2 ones,1,givedice([1| 1]);,Magic Dice,COUNTDOWN,6,GREEN,halfcountdown,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Snake Eye Charm_downgraded,Roll 1 one,1,givedice(1);,Magic Dice,COUNTDOWN,6,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Snake Eye Charm_weakened,Roll 1 one,1,givedice(1);,Magic Dice,COUNTDOWN,3,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Antidote,Cure [poison]<slotdoubles> poison,1,removestatusself(POISON| d);,Emetic,DOUBLES|DOUBLES,,PURPLE,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Antidote_downgraded,Cure [poison]<slotdoubles> poison|(for both you and enemy),1,removestatus(POISON| d); removestatusself(POISON| d);,Emetic,DOUBLES|DOUBLES,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,removestatusself(POISON| d);
Antidote_upgraded,Cure [poison]<d6> poison,1,removestatusself(POISON| d);,Emetic,NORMAL,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Nudge,Dice value -1,1,if(d >= 2) givedice(d - 1);,Meganudge,MIN2,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Nudge_upgraded,Dice value -1|[gray](Reuseable),1,if(d >= 2) givedice(d - 1);,Meganudge,MIN2,,GREEN,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Counter Spell,If enemy rolls <d6>[;]|that dice is locked,1,inflict(~counter_~ + d);,Quick Thinking,NORMAL,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Counter Spell_upgraded,Lock dice that roll <d6>|[gray](Reuseable),1,inflict(~counter_~ + d);,Quick Thinking,NORMAL,,PURPLE,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nightstick,[shock]Shocks the enemy|[gray](Reuseable),1,inflict(SHOCK);,Zap,EVEN,,YELLOW,change_power,removereusable,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Nightstick_upgraded,[shock]Shocks the enemy|[gray](Reuseable),1,inflict(SHOCK);,Zap,NORMAL,,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Boomerang,Do [sword]<double> to enemy[;]|but [sword]<d6> to yourself,1,attack(2 * d); boomerang(d);,Fury,NORMAL,,RED,change_boomerang,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,attackself(d); sfxdamage(self|d);
Boomerang_upgraded,Do [sword]<double> to enemy[;]|but [sword]3 to yourself,1,attack(2 * d); boomerang(3);,Fury,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,attackself(3); sfxdamage(self|3);
Leather Armor,Reduce [reduce]1 damage|from each attack,1,inflictself(REDUCE| 1);,Protection,ODD,,ORANGE,simplify,complicate,reduce,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Iron Armor,Reduce [reduce]2 damage|from each attack,1,inflictself(REDUCE| 2);,Protection,REQUIRE5,,ORANGE,simplify,change_power,reduce,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Iron Armor_downgraded,Reduce [reduce]1 damage|from each attack,1,inflictself(REDUCE| 1);,Protection,REQUIRE5,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hookshot,Next equipment has|+1 use this turn,1,inflictself(REEQUIPNEXT);,Steal,REQUIRE2,,GREEN,change_power,change_power,reequipnext,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Hookshot_upgraded,Next equipment has|+1 use this turn,1,inflictself(REEQUIPNEXT);,Steal,EVEN,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hookshot_downgraded,Next equipment has|+1 use this turn,1,inflictself(REEQUIPNEXT);,Steal,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Bandage,Heal [heal]1 health|[gray](Reuseable),1,attackself(-1);,Regenerate,ODD,,GREEN,simplify,removereusable,,,-1,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Doppeldice,Double dice value,1,givedice(d * 2| ~combinedice~);,Clone Device,MAX3,,GREEN,change_requirements,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Doppeldice_upgraded,Double dice value,1,givedice(d * 2| ~combinedice~);,Clone Device,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Matchstick,Burns [fire]1 dice|[gray](Reuseable),1,inflict(FIRE);,Blowtorch,EVEN,,RED,change_requirements,removereusable,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Matchstick_upgraded,Burns [fire]1 dice|[gray](Reuseable),1,inflict(FIRE);,Blowtorch,NORMAL,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Backstab,Do [sword]<equipmentuse> damage. Add [sword]1|on each item use.,1,attack(self.equipmentused - 1);,Time Stop,REQUIRE3,,GRAY,simplify,doublerequirements,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Lightning Bolt,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d| SHOCK); inflict(SHOCK);,Zap,NORMAL|NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Lightning Bolt_upgraded,Do [shock]<d6> damage[;]|[]+[shock]2 shock,1,attack(d| SHOCK); inflict(SHOCK| 2);,Zap,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shockwave,Do [weaken]<d6> damage[;]|[]+[weaken]1 weaken,1,attack(d| WEAKEN); inflict(WEAKEN);,Theremin,NORMAL|NORMAL,,ORANGE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Shockwave_upgraded,Do [weaken]<d6> damage[;]|[]+[weaken]2 weaken,1,attack(d| WEAKEN); inflict(WEAKEN| 2);,Theremin,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Illuminate,Get 2x[dice]<d6>s next turn,1,inflictself(~stash~+d|2); inflictself(~illuminate~);,Magic Dice,NORMAL,,YELLOW,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Illuminate_upgraded,Get 4x[dice]<slotdoubles>s next turn,1,inflictself(~stash~+d|4); inflictself(~illuminate~);,Magic Dice,DOUBLES|DOUBLES,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Reroll,Reroll unused dice,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } },Random Roll,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Meteor,Do [fire]20 damage[;]|burn all dice,1,attack(20| FIRE); inflict(FIRE| ALL);,Hellfire,COUNTDOWN,20,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Meteor_upgraded,Do [fire]25 damage[;]|burn all dice,1,attack(25| FIRE); inflict(FIRE| ALL);,Hellfire,COUNTDOWN,20,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Meteor_downgraded,Do [fire]10 damage[;]|burn a dice,1,attack(10| FIRE); inflict(FIRE| 1);,Hellfire,COUNTDOWN,20,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hex,Even: [weaken]1 weaken|Odd: [shock]1 shock,1,if(d % 2 == 1) { inflict(SHOCK); sfx(~_shock~|~~|0.2); } else{ inflict(WEAKEN); sfx(~_weaken~|~~|0.2); },Scream,NORMAL,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Hex_upgraded,Even: [weaken]2 weaken|Odd: [shock]2 shock,1,if(d % 2 == 1) { inflict(SHOCK| 2); sfx(~_shock~|~~|0.2); } else{ inflict(WEAKEN| 2); sfx(~_weaken~|~~|0.2); },Scream,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glass Cauldron,Freeze [ice]1 dice[;]|roll a one,1,inflict(ICE); givedice(1);,Random Roll,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(1);
Glass Cauldron_upgraded,Freeze [ice]1 dice[;] roll a one|[gray](Reuseable),1,inflict(ICE); givedice(1);,Random Roll,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(1);
Glass Cauldron_downgraded,Freeze [ice]1 dice,1,inflict(ICE);,Random Roll,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Gold Cauldron,Do [sword]1 damage[;]|get an even dice,1,attack(1); givedice(rand([2|4|6]));,Random Roll,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(rand([2|4|6]));
Gold Cauldron_upgraded,Do [sword]1[;] get an even dice|[gray](Reuseable),1,attack(1); givedice(rand([2|4|6]));,Random Roll,NORMAL,,YELLOW,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(rand([2|4|6]));
Gold Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Silver Cauldron,Do [sword]1 damage[;]|get an odd dice,1,attack(1); givedice(rand([1|3|5]));,Random Roll,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(rand([1|3|5]));
Silver Cauldron_upgraded,Do [sword]1[;] get an odd dice|[gray](Reuseable),1,attack(1); givedice(rand([1|3|5]));,Random Roll,NORMAL,,GRAY,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(rand([1|3|5]));
Silver Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Crucible,Roll a burning dice|[gray](Reuseable),1,inflictself(FIRE); givedice();,Random Roll,NORMAL,,RED,change_power,change_power,,,-1,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Crucible_upgraded,Roll four new burning dice,1,inflictself(FIRE| 4); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]);,Random Roll,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Crucible_downgraded,Roll a burning dice,1,inflictself(FIRE); givedice();,Random Roll,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Absolute Zero,Do [ice]25 damage[;]|freeze all dice,1,attack(25| ICE); inflict(ICE| ALL);,Arctic Storm,COUNTDOWN,24,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Absolute Zero_upgraded,Do [ice]30 damage[;]|freeze all dice,1,attack(30| ICE); inflict(ICE| ALL);,Arctic Storm,COUNTDOWN,24,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Absolute Zero_downgraded,Do [ice]12 damage[;]|freeze a dice,1,attack(12 | ICE); inflict(ICE| 1);,Arctic Storm,COUNTDOWN,24,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spatula,Flip a dice upside down,1,givedice(7-d);,Megaflip,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Spatula_downgraded,Flip a dice upside down,1,givedice(7-d);,Megaflip,MIN4,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spatula_upgraded,Flip a dice upside down|[gray](Reuseable),1,givedice(7-d);,Megaflip,NORMAL,,GREEN,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sharp Spike,Do [sword]<double> damage,1,attack(d * 2);,Pea Gun,REQUIRE1|REQUIRE1,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Sharp Spike_upgraded,Do [sword]<triple> damage,1,attack(d * 3);,Pea Gun,REQUIRE1|REQUIRE1,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sharp Spike_downgraded,Do [sword]<d6> damage,1,attack(d);,Pea Gun,REQUIRE1|REQUIRE1,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bumpblade,Do [sword]1 damage[;] get|new dice (value +1),1,attack(1); givedice(d + 1);,Megabump,MAX5,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(d + 1);
Bumpblade_upgraded,[sword]1 damage[;] bump dice|[gray](Reuseable),1,attack(1); givedice(d + 1);,Megabump,MAX5,,YELLOW,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d + 1);
Spark,Burns [fire]1 dice,1,inflict(FIRE);,Blowtorch,EVEN,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Snowflake,Freeze [ice]1 dice,1,inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Whisper,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Theremin,ODD,,ORANGE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Teleport Spell,Dodge next attack,1,inflictself(DODGE);,Quick Thinking,REQUIRE5,,YELLOW,simplify,noeffect,dodge,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Parrying Dagger,Do [sword]<d6> damage[;] lock|enemy dice that roll <d6>,1,attack(d); inflict(~counter_~ + d);,Protection,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Trident,Do [sword]<d6> damage[;]|[ice]Freeze and [shock]Shock,1,attack(d); inflict(ICE| 1); inflict(SHOCK| 1);,Flash Freeze,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Trident_upgraded,Do [sword]<d6> damage[;]|[ice]Freeze and [shock]Shock,1,attack(d); inflict(ICE| 1); inflict(SHOCK| 1);,Flash Freeze,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Trident_downgraded,Do [sword]<d6> damage,1,attack(d);,Flash Freeze,REQUIRE5,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Capacitor,[shock]2 damage + [shock]1 shock|[gray](Reuseable),1,attack(2| SHOCK); inflict(SHOCK| 1);,Zap,COUNTDOWN,5,YELLOW,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Capacitor_upgraded,[shock]3 damage + [shock]1 shock|[gray](Reuseable),1,attack(3| SHOCK); inflict(SHOCK| 1);,Zap,COUNTDOWN,5,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Capacitor_downgraded,[shock]1 damage + [shock]1 shock|[gray](Reuseable),1,attack(1| SHOCK); inflict(SHOCK| 1);,Zap,COUNTDOWN,5,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pickaxe,[weaken]<d6> damage + [weaken]1 weaken|[gray](Reuseable),1,attack(d| WEAKEN);  inflict(WEAKEN| 1);,Theremin,MAX3,,ORANGE,change_power,change_power,,,3,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Pickaxe_upgraded,[weaken]1 weaken + [weaken]<d6> damage|[gray](Reuseable),1,inflict(WEAKEN| 1); attack(d| WEAKEN);,Theremin,MAX3,,ORANGE,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pickaxe_downgraded,[weaken]<d6> damage + [weaken]1 weaken|[gray](Reuseable),1,attack(d| WEAKEN);  inflict(WEAKEN| 1);,Theremin,REQUIRE1,,ORANGE,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Kite Shield,Add [shield]8 to shield,1,inflictself(SHIELD| 8);,Protection,COUNTDOWN,14,ORANGE,threequartercountdown,change_power,,,0,YES,NO,excludefromrandomlists,2,,,,,,,,,,,
Kite Shield_weakened,Add [shield]4 to shield,1,inflictself(SHIELD| 4);,Protection,COUNTDOWN,10,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Kite Shield_downgraded,Add [shield]4 to shield,1,inflictself(SHIELD| 4);,Protection,COUNTDOWN,14,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Thick Skin,Add [shield]<d6> to shield[;]|return the dice,1,inflictself(SHIELD| d); givedice(d);,Protection,MAX3,,ORANGE,change_power,decreaserange,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Thick Skin_upgraded,[]+[shield]<d6> shield[;] +[reduce]1 reduce[;]|return the dice,1,inflictself(SHIELD| d); inflictself(REDUCE| 1); givedice(d);,Protection,MAX3,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Fishing Net,Do [sword]<d6> damage[;]|lock [lock]1 dice on 3,1,attack(d); if(d == 3) { inflict(LOCK); } if(d != 3) { sfxdamage(target|d); } else {  sfxdamage(target|d); sfx(~_lock~|~~|0.2); },Regenerate,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Fishing Net_downgraded,Do [sword]<d6> damage[;]|lock [lock]1 dice on 2,1,attack(d); if(d == 2) { inflict(LOCK); } if(d != 2) { sfxdamage(target|d); } else {  sfxdamage(target|d); sfx(~_lock~|~~|0.2); },Regenerate,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fishing Net_upgraded,Do [sword]<d6> damage[;]|lock [lock]1 dice on 5,1,attack(d); if(d == 5) { inflict(LOCK); } if(d != 5) { sfxdamage(target|d); } else {  sfxdamage(target|d); sfx(~_lock~|~~|0.2); },Regenerate,MAX5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ignite,Inflict [fire]1 burn[;]|return both dice,1,inflict(FIRE); givedice([d| d]);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice([d| d]);
Ignite_upgraded,Inflict [fire]1 burn[;]|return the dice,1,inflict(FIRE); givedice(d);,Hellfire,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Ignite_downgraded,Inflict [fire]1 burn,1,inflict(FIRE);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Elastic Heart,Do [sword]<d6> damage[;]|recover [heal]1 health,1,attack(d); attackself(-1);,Regenerate,MAX3,,GREEN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,attackself(-1); sfx(~_heal~|~~|0.2);
Elastic Heart_upgraded,Do [sword]<d6> damage[;]|recover [heal]<d6> health,1,attack(d); attackself(-d);,Regenerate,MAX3,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,attackself(-d); sfx(~_heal~|~~|0.2);
Lucky Roll,Reroll the dice[;] get a|higher value than before,1,if(d == 1) { givedice(rand([2|3|4|5|6])); } else if(d == 2) { givedice(rand([3|4|5|6])); } else if(d == 3) { givedice(rand([4|5|6])); } else if(d == 4) { givedice(rand([5|6])); } else if(d >= 5) { givedice(6); },Megabump,MAX5,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Lucky Roll_upgraded,Reroll with higher value|[gray](Reuseable),1,if(d == 1) { givedice(rand([2|3|4|5|6])); } else if(d == 2) { givedice(rand([3|4|5|6])); } else if(d == 3) { givedice(rand([4|5|6])); } else if(d == 4) { givedice(rand([5|6])); } else if(d >= 5) { givedice(6); },Megabump,MAX5,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sine Wave,First dice value +1|Second dice value -1,1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1);} if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); }givedice(dicearray);,Meganudge,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Sine Wave_upgraded,Both dice values +1,1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); dicearray.push(actualdice[1].basevalue + 1);  if(dicearray[1] == 7) { dicearray[1] = 6; dicearray.push(1); }  if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); } givedice(dicearray);,Meganudge,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sine Wave_downgraded,Both dice values -1,1,var dicearray = []; if(actualdice[0].basevalue - 1 > 0) {dicearray.push(actualdice[0].basevalue - 1);} if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1);} if(dicearray.length > 0) { givedice(dicearray);},Meganudge,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Candle,Dice value -1[;] Lose [heart]1 hp|[gray](Reuseable),1,pierceattackself(1); if(d >= 2) givedice(d - 1);,Meganudge,MIN2,,RED,change_power,complicate,,,-1,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Candle_upgraded,Dice value +1[;] Lose [heart]1 hp|[gray](Reuseable),1,pierceattackself(1); givedice(d + 1);,Meganudge,MAX5,,RED,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Slingshot,Do [sword]6 damage[;]|reroll the dice,1,attack(6); givedice();,Random Roll,REQUIRE1,,PURPLE,increaserange,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice();
Slingshot_downgraded,Do [sword]6 damage,1,attack(6);,Random Roll,REQUIRE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Key,Split a dice in two,1,givedice(split(d)| ~splitdice~);,Steal,EVEN,,GREEN,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Magic Key_downgraded,Split value in two,1,givedice(d / 2);,Steal,EVEN,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Key_upgraded,Split a dice in two,1,givedice(split(d)| ~splitdice~);,Steal,MIN2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sword Hilt,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,REQUIRE1|FREE6,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Sword Hilt_upgraded,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,REQUIRE4|FREE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sword Hilt_downgraded,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,REQUIRE1|FREE3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Starspear,Do [sword]6 damage[;]|add 2x random status,1,attack(6); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfxdamage(target|d); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,,REQUIRE6,,PINK,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Starspear_upgraded,Do [sword]<d6> damage[;]|add 2x random status,1,attack(d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfxdamage(target|d); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,,MIN5,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lucky Star,Do [sword]1 damage[;] roll a 5|[gray](Reuseable),1,attack(1); givedice(5);,Quick Thinking,COUNTDOWN,6,PINK,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(5);
Lucky Star_upgraded,Do [sword]3 damage[;] roll a 5|[gray](Reuseable),1,attack(3); givedice(5);,Quick Thinking,COUNTDOWN,6,PINK,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(5);
Lucky Star_downgraded,Do [sword]1 damage[;] roll a 1|[gray](Reuseable),1,attack(1); givedice(1);,Quick Thinking,COUNTDOWN,6,PINK,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(1);
Ungeradedice,Double dice value[;]|then subtract 1,1,givedice(((d * 2) - 1)| ~combinedice~);,Clone Device,MAX5,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Ungeradedice_upgraded,Double dice value[;]|then add 1,1,givedice(((d * 2) + 1)| ~combinedice~);,Clone Device,MAX5,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Vise Grip,Return two of the|difference between dice,1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)|(bigdice - smalldice)]| ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Vise Grip_upgraded,Return three of the|difference between dice,1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)|(bigdice - smalldice)|(bigdice - smalldice)]| ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Vise Grip_downgraded,Return the difference|between the dice,1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)]| ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Saw Wave,Returns a 6 and a 1,1,givedice(7);,Stardust,NORMAL|NORMAL,7,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Saw Wave_upgraded,Returns two sixes,1,givedice(12);,Stardust,NORMAL|NORMAL,7,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Saw Wave_downgraded,Returns two ones,1,givedice([1|1]);,Stardust,NORMAL|NORMAL,7,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Premium Heart,Do [sword]<d6> damage|10% chance of Fury,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds += 10 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~|~~|0.2); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,donothing();,var odds = 10; if(getstatusself(~luck~) > 0){ odds += 10 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~|~~|0.2); }
Premium Heart_upgraded,Do [sword]<d6> damage|25% chance of Fury,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~|~~|0.2); },,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,donothing();,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~|~~|0.2); }
Premium Heart_downgraded,Do [sword]<d6> damage,1,attack(d);,,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,donothing();,
Missing Score,Do [sword]<d6> damage|25% chance to return dice,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); givedice(d); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missing Score_upgraded,Do [sword]<d6> damage|75% chance to return dice,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); givedice(d); },,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missing Score_downgraded,Do [sword]<d6> damage,1,attack(d);,,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lollipop,Dice value -1. On 1[;]|instead return two 1s,1,if(d >= 2) { givedice(d - 1); } else { givedice([1|1]);},Meganudge,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Lollipop_upgraded,Dice value -1. On 1[;]|instead return two dice,1,if(d >= 2) { givedice(d - 1); } else { givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]);},Meganudge,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Blood Let,Lose [heart]2 hp[;] then heal [heart]1,1,pierceattackself(2); attackself(-1);,,ODD,,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Blood Let_upgraded,Lose [heart]4 hp[;] then heal [heart]2,1,pierceattackself(4); attackself(-2);,,ODD,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Blood Let_downgraded,Lose [heart]2 hp|[gray](Reuseable),1,pierceattackself(2);,,ODD,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Gumball Machine,Recover [heal]1 health[;]|get a new dice,1,attackself(-1); givedice();,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Gumball Machine_upgraded,Recover [heal]<d6> health[;]|get a new dice,1,attackself(-d); givedice();,Regenerate,MAX3,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Gumball Machine_downgraded,Recover [heal]1 health,1,attackself(-1);,Regenerate,MAX3,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Princess Guard,Do [sword]<d6> damage|25% chance to add [shield]<d6>,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d); ,,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); }
Princess Guard_upgraded,Do [sword]<d6> damage|75% chance to add [shield]<d6>,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d);,,MAX4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); }
Princess Guard_downgraded,Do [sword]<d6> damage,1,attack(d);,,MAX4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Venus Gospel,Do [weaken]<d6> damage|25% chance +[weaken]2 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN| 2); } attack(d| WEAKEN);,,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Venus Gospel_upgraded,Do [weaken]<d6> damage|25% chance +[weaken]3 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN| 3); } attack(d| WEAKEN);,,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Venus Gospel_downgraded,Do [weaken]<d6> damage,1,attack(d| WEAKEN);,,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Doppeltwice,Double dice value|[gray](Reuseable),1,givedice(d * 2| ~combinedice~);,Magic Six,MAX3,,GREEN,change_requirements,complicate,,,2,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Doppeltwice_upgraded,Double dice value|[gray](Reuseable),1,givedice(d * 2| ~combinedice~);,Magic Six,MAX5,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Enchanted Bolt,Do [sword]4 damage|(At start of turn: Do [sword]3),1,attack(4);,Throw Dice,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,e.animate(~flashandshake~); attack(3); sfx(~_damage~);,,,,,,,
Enchanted Bolt_upgraded,Do [sword]5 damage|(At start of turn: Do [sword]4),1,attack(5);,Throw Dice,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); attack(4); sfx(~_damage~);,,,,,,,
Spring Equinox,Place two copies of the|next spell you cast,1,inflictself(~doublecast~);,,ODD,,YELLOW,simplify,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Bronze Cauldron,Do [sword]2[;] get an odd dice|[gray](Reuseable),1,attack(2); givedice(rand([1|3|5]));,,EVEN,,ORANGE,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(rand([1|3|5]));
Bronze Cauldron_upgraded,Do [sword]3[;] get an odd dice|[gray](Reuseable),1,attack(3); givedice(rand([1|3|5]));,,EVEN,,ORANGE,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(rand([1|3|5]));
Bronze Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,,EVEN,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nunchucks,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Harvest,MAX3|MAX3,,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Nunchucks_upgraded,[sword]<d6>[;] return difference|[gray](Reuseable),1,attack(d); var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)]| ~combinedice~);,Harvest,MAX3|MAX3,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)]| ~combinedice~);
Nunchucks_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Harvest,MAX2|MAX2,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Master Key,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)| (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)| (d / 2)]); }},Steal,MIN4,,GREEN,change_requirements,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Master Key_upgraded,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)| (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)| (d / 2)]); }},Steal,MIN2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Master Key_downgraded,Split a dice as|evenly as possible,1,if(d % 2 == 0) { givedice([(d / 2)| (d / 2)]); } else { if(d > 1) { d = d - 1; givedice([((d / 2) + 1)| (d / 2)]); }},Steal,MIN5,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Cowbell,Inflict [weaken]1 weaken|[gray](Reuseable),1,inflict(WEAKEN | 1);,Mumble,MAX2,,ORANGE,change_requirements,change_power,,,3,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Cowbell_upgraded,Inflict [weaken]1 weaken|[gray](Reuseable),1,inflict(WEAKEN | 1);,Mumble,MAX3,,ORANGE,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cowbell_downgraded,Inflict [weaken]1 weaken|[gray](Reuseable),1,inflict(WEAKEN | 1);,Mumble,REQUIRE1,,ORANGE,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chisel,Dice value -1[;] roll a 1 ,1,givedice([d-1|1]| ~splitdice~);,Meganudge,MIN2,,GREEN,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Chisel_upgraded,Dice value -1[;] roll a 1|[gray](Reuseable),1,givedice([d-1|1]| ~splitdice~);,Meganudge,MIN2,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Chisel_downgraded,Dice value -1,1,givedice(d-1| ~splitdice~);,Meganudge,MIN2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Signal Jammer,Split a dice unevenly,1,var result = []; if(d == 3){ result.push([2|1]); result.push([1|2]); } else if(d == 4){ result.push([3|1]); result.push([1|3]);} else if(d == 5){ result.push([1|4]); result.push([2|3]); result.push([3|2]); result.push([4|1]);} else if(d == 6){ result.push([1|5]); result.push([2|4]); result.push([4|2]); result.push([5|1]);} else{ result.push([d]); } shuffle(result); givedice(result[0] | ~splitdice~);,Magic Lockpick,MIN3,,GREEN,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Signal Jammer_downgraded,Split a dice unevenly,1,var result = []; if(d == 3){ result.push([2|1]); result.push([1|2]); } else if(d == 4){ result.push([3|1]); result.push([1|3]);} else if(d == 5){ result.push([1|4]); result.push([2|3]); result.push([3|2]); result.push([4|1]);} else if(d == 6){ result.push([1|5]); result.push([2|4]); result.push([4|2]); result.push([5|1]);} else{ result.push([d]); } shuffle(result); givedice(result[0] | ~splitdice~);,Magic Lockpick,MIN5,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Signal Jammer_upgraded,Split a dice unevenly|[gray](Reuseable),1,var result = []; if(d == 3){ result.push([2|1]); result.push([1|2]); } else if(d == 4){ result.push([3|1]); result.push([1|3]);} else if(d == 5){ result.push([1|4]); result.push([2|3]); result.push([3|2]); result.push([4|1]);} else if(d == 6){ result.push([1|5]); result.push([2|4]); result.push([4|2]); result.push([5|1]);} else{ result.push([d]); } shuffle(result); givedice(result[0] | ~splitdice~);,Magic Lockpick,MIN3,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Blast Chiller,[ice]4 damage + [ice]1 freeze|[gray](Reuseable),1,attack(4| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Blast Chiller_upgraded,[ice]6 damage + [ice]1 freeze|[gray](Reuseable),1,attack(6| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blast Chiller_downgraded,[ice]2 damage + [ice]1 freeze|[gray](Reuseable),1,attack(2| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,8,BRIGHTCYAN,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Paper Lantern,Get 3x<slotdoubles> next turn,1,inflictself(~stash~+d|3); inflictself(~lantern~);,Infinity Mirror,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Paper Lantern_upgraded,Get 2x<d6> next turn,1,inflictself(~stash~+d|2); inflictself(~lantern~);,Infinity Mirror,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Paper Lantern_downgraded,Get a <d6> next turn,1,inflictself(~stash~+d|1); inflictself(~lantern~);,Infinity Mirror,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Cloak,Gain [reduce]1 reduce|[gray](Reuseable),1,inflictself(REDUCE| 1);,Protection,COUNTDOWN,4,ORANGE,change_power,change_power,,,3,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Cloak_upgraded,Gain [reduce]1 reduce|[gray](Reuseable),1,inflictself(REDUCE| 1);,Protection,COUNTDOWN,4,ORANGE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Cloak_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE| 1);,Protection,COUNTDOWN,4,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Plaster,Heal [heal]1 health|[gray](Reuseable),1,attackself(-1);,Regenerate,COUNTDOWN,2,GREEN,change_power,removereusable,,,-1,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Plaster_upgraded,Heal [heal]2 health|[gray](Reuseable),1,attackself(-2);,Regenerate,COUNTDOWN,2,GREEN,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Gong,Do [sword]4 damage per [weaken]1|Enemy loses all weaken,1,attack(getstatus(WEAKEN) * 4); removestatus(WEAKEN| getstatus(WEAKEN));,Scream,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Gong_upgraded,Do [sword]5 damage per [weaken]1|Enemy loses all weaken,1,attack(getstatus(WEAKEN) * 5); removestatus(WEAKEN| getstatus(WEAKEN));,Scream,DOUBLES|DOUBLES,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Gong_downgraded,Do [sword]2 damage per [weaken]1|Enemy loses all weaken,1,attack(getstatus(WEAKEN) * 2); removestatus(WEAKEN| getstatus(WEAKEN));,Scream,DOUBLES|DOUBLES,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dramatic Exit,Do [sword]1. If this is the final|blow[;] gain [heal] 2 max hp,1,attack(1); if(target.hp <= 0){ self.maxhp +=2; attackself(-2); },Regenerate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Dramatic Exit_upgraded,Do [sword]1. If this is the final|blow[;] gain [heal] 2 max hp,1,attack(1); if(target.hp <= 0){ self.maxhp +=2; attackself(-2); },Regenerate,EVEN,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dramatic Exit_downgraded,Do [sword]1. If this is the final|blow[;] gain [heal] 2 max hp,1,attack(1); if(target.hp <= 0){ self.maxhp +=2; attackself(-2); },Regenerate,REQUIRE6|REQUIRE6,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Berlin Key,Set a random dice to <d6>|Return the dice,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); } givedice(d); },Reversal,NORMAL,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Berlin Key_upgraded,Set dice to <d6>[;] return dice|[gray](Reuseable),1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()| 0); } givedice(d); },Reversal,NORMAL,,PINK,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Berlin Key_downgraded,Set a random dice to <d6>|Return the dice,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); } givedice(d); },Reversal,MAX3,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Square Pair,Roll 2 fours,1,givedice([4| 4]);,Magic Dice,COUNTDOWN,8,GREEN,halfcountdown,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Square Pair_downgraded,Roll 1 four,1,givedice(4);,Magic Dice,COUNTDOWN,8,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Square Pair_weakened,Roll 1 four,1,givedice(4);,Magic Dice,COUNTDOWN,4,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Wrecking Ball,Do [sword]<d6> damage[;]|reduce countdowns by <d6>,1,attack(d); boostcountdowns(d);,Accelerate,MAX4,,GREEN,change_power,decreaserange,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,boostcountdowns(d);
Wrecking Ball_upgraded,[sword]<d6>[;] reduce counts by <d6>|[gray](Reuseable),1,attack(d); boostcountdowns(d);,Accelerate,MAX4,,GREEN,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,boostcountdowns(d);
Determination,Do [sword]4 damage[;]|add random status,1,attack(4); inflict(rand([CURSE| LOCK| FIRE| ICE| WEAKEN| SHOCK| POISON]));,Stardust,COUNTDOWN,10,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Determination_upgraded,Do [sword]4 damage[;]|add 2x random status,1,attack(4); inflict(rand([CURSE| LOCK| FIRE| ICE| WEAKEN| SHOCK| POISON])| 2);,Stardust,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Determination_downgraded,Add random status,1,inflict(rand([CURSE| LOCK| FIRE| ICE| WEAKEN| SHOCK| POISON]));,Stardust,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tetraphobia,Do [sword]4 damage,1,attack(4);,Shuriken,COUNTDOWN,4,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Tetraphobia_upgraded,Do [sword]1 damage[;]|four times,1,attack(1); attack(1); attack(1); attack(1);  var takedamage = false; if(target != null){ if(target.isplayer) takedamage = true; } if(takedamage){ sfx(~_takedamage~|~light~|0.3); sfx(~_takedamage~|~light~|0.5); sfx(~_takedamage~|~light~|0.7); } else { sfx(~_damage~|~light~|0.3); sfx(~_damage~|~light~|0.5); sfx(~_damage~|~light~|0.7); } //This works because the json has the fourth sfx at 0.1,Shuriken,COUNTDOWN,4,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,attack(1); attack(1); attack(1); var takedamage = false; if(target != null){ if(target.isplayer) takedamage = true; } if(takedamage){ sfx(~_takedamage~|~light~|0.1); sfx(~_takedamage~|~light~|0.3); sfx(~_takedamage~|~light~|0.5); } else { sfx(~_damage~|~light~|0.1); sfx(~_damage~|~light~|0.3); sfx(~_damage~|~light~|0.5); }
Tetraphobia_downgraded,Do [sword]3 damage,1,attack(3);,Shuriken,COUNTDOWN,4,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Secret Weapon,Gain a random blessing,1,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); }else { randomstatus = rand([SHIELD|REDUCE|REEQUIPNEXT|DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus | a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; sfx(~_~ + randomstatus.toLowerCase()|~~|0.2);,Power Up,COUNTDOWN,10,PURPLE,halfcountdown,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,donothing();,
Secret Weapon_weakened,Gain [shield]4 shield,1,inflictself(SHIELD|4);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Secret Weapon_downgraded,Gain [shield]4 shield,1,inflictself(SHIELD|4);,Power Up,COUNTDOWN,10,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lighter,Do [fire]2 damage[;]|burn [fire]1 dice,1,attack(2| FIRE); inflict(FIRE| 1);,Ember,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Lighter_upgraded,Do [fire]3 damage[;]|burn [fire]1 dice,1,attack(3| FIRE); inflict(FIRE| 1);,Ember,COUNTDOWN,5,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lighter_downgraded,Do [fire]1 damage[;]|burn [fire]1 dice,1,attack(1| FIRE); inflict(FIRE| 1);,Ember,COUNTDOWN,5,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Knitting Needle,Gain [thorns]1 thorns,1,inflictself(THORNS| 1);,Needle,ODD,,GREEN,simplify,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Chainsaw,Do [sword]<d6> damage[;] if|enemy hp is full[;] do double,1,if(target.hp == target.maxhp) { attack(d*2); } else { attack(d); },Dial Up Sounds,REQUIRE6|REQUIRE6,,RED,change_power,change_function,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Chainsaw_upgraded,Do [sword]<d6> damage[;] if|enemy hp is full[;] do double,1,if(target.hp == target.maxhp) { attack(d*2); } else { attack(d); },Dial Up Sounds,EVEN|EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chainsaw_downgraded,Do [sword]<d6> damage[;] if|enemy hp is full[;] do double,1,if(target.hp == target.maxhp) { attack(d*2); } else { attack(d); },Dial Up Sounds,REQUIRE3|REQUIRE3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Giant Spatula,Flip all your dice|upside down,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(7 - mydice.basevalue| self.screenposition()| c * 0.05); c++; } },Megaflip,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Giant Spatula_downgraded,Flip all your dice|upside down,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(7 - mydice.basevalue| self.screenposition()| c * 0.05); c++; } },Megaflip,REQUIRE1,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Giant Spatula_upgraded,Flip all dice upside|down[;] return this one,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(7 - mydice.basevalue| self.screenposition()| c * 0.05); c++; } } givedice(d);,Megaflip,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Blood Cauldron,Drain [heart]1 health[;]|get a new dice,1,drain(1); givedice();,Random Roll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice();
Blood Cauldron_upgraded,Drain [heart]1 health[;] reroll dice|[gray](Reuseable),1,drain(1); givedice();,Random Roll,NORMAL,,RED,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice();
Blood Cauldron_downgraded,Drain [heart]1 health,1,drain(1);,Random Roll,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Icecube,Inflict [ice]1 freeze|[gray](Reuseable),1,inflict(ICE);,Flash Freeze,EVEN,,BRIGHTCYAN,simplify,removereusable,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Cold Wind,Inflict [ice]1 freeze[;]|return both dice,1,inflict(ICE); givedice([d| d]);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice([d| d]);
Cold Wind_upgraded,Inflict [ice]1 freeze[;]|return the dice,1,inflict(ICE); givedice(d);,Arctic Storm,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Cold Wind_downgraded,Inflict [ice]1 freeze,1,inflict(ICE);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Icicle,Do [ice]2 damage[;]|inflict [ice]1 freeze,1,attack(2| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Icicle_upgraded,Do [ice]3 damage[;]|inflict [ice]1 freeze,1,attack(3| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Icicle_downgraded,Do [ice]1 damage[;]|inflict [ice]1 freeze,1,attack(1| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pitchfork,Do [sword]<d6> damage[;]|[fire]Burn and [shock]Shock,1,attack(d); inflict(FIRE| 1); inflict(SHOCK| 1);,Blowtorch,MAX4,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Pitchfork_upgraded,Do [sword]<d6> damage[;]|[fire]Burn and [shock]Shock,1,attack(d); inflict(FIRE| 1); inflict(SHOCK| 1);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pitchfork_downgraded,Do [sword]<d6> damage,1,attack(d);,Blowtorch,REQUIRE5,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Furnace,[fire]4 damage + [fire]1 burn|[gray](Reuseable),1,attack(4| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,8,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Furnace_upgraded,[fire]6 damage + [fire]1 burn|[gray](Reuseable),1,attack(6| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,8,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Furnace_downgraded,[fire]2 damage + [fire]1 burn|[gray](Reuseable),1,attack(2| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,8,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Catastrophe,Inflict [shock] shock[;]|[fire] burn[;] and [ice] freeze,1,inflict(SHOCK); inflict(ICE); inflict(FIRE);,Oh No!,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Catastrophe_upgraded,Inflict [shock]2 shock[;]|[fire]2 burn[;] [ice]2 freeze,1,inflict(SHOCK| 2); inflict(ICE| 2); inflict(FIRE| 2);,Oh No!,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Catastrophe_downgraded,Inflict [shock] shock[;]|[fire] burn[;] or [ice] freeze,1,var randstatus = rand([SHOCK|FIRE|ICE]); inflict(randstatus|1); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,Oh No!,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fury Spell,Repeat next action,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,REQUIRE6,,PURPLE,simplify,noeffect,,,0,YES,NO,,2,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
[END MISC USED IN MOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Gatling Pea,Do [sword]2 damage[;] roll a 1|,1,attack(2); sfxdamage(target[;]2); givedice(1);,Pea Gun,COUNTDOWN,3,RED,change_power,change_power,,,-1,NO,NO,rs,,,,,,,,,,,,
Gatling Pea_upgraded,[sword]2 damage[;] return excess|,1,var dice = self.getvar(~dice~); attack(2); sfxdamage(target[;]2); if(dice > 0) { givedice(dice); };,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,self.setvar(~dice~[;]e.dicehistory[e.dicehistory.length-1].basevalue - e.remainingcountdown); trace(~excess: ~ + self.getvar(~dice~) + ~ cd: ~ + e.remainingcountdown);,,,,,
Gatling Pea_downgraded,Do [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,,,,,,
Bloody Drill,Do [sword]<d6> damage[;] drain|[heart]1 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_upgraded,Do [sword]<d6> damage[;] drain|[heart]2 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Blood Sip,NORMAL,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu,Inflict [ice]2 freeze|On double 3: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d == 3) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Frosty Bufu_upgraded,Inflict [ice]2 freeze|On double odd: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d % 2 == 1) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu_downgraded,Do [ice]6 damage,1,attack(6[;]ICE); sfxdamage(target[;]6);,Arctic Storm,REQUIRE3|REQUIRE3,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi,Inflict [fire]2 burn|On double 3: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d == 3) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Burning Agi_upgraded,Inflict [fire]2 burn|On double odd: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d % 2 == 1) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi_downgraded,Do [fire]6 damage,1,attack(6[;]FIRE); sfxdamage(target[;]6);,Hellfire,REQUIRE3|REQUIRE3,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 3[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 3) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_upgraded,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 5[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 5) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX5,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_downgraded,Do [weaken]<d6> damage[;]|inflict [weaken]1 weaken,1,attack(d[;]WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Quake Sigma,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX3|MAX3,,PURPLE,change_power,decreaserange,,,0,NO,NO,rs,1,,,,,,,,,,,
Quake Sigma_upgraded,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX4|MAX4,,PURPLE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler,Inflict [shock]<d6> shock[;]|reroll the dice,2,inflict(SHOCK[;]d); sfx(~_shock~); givedice(rand([1[;]2[;]3[;]4[;]5[;]6]));,Zap,MAX3,,YELLOW,change_power,decreaserange,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler_upgraded,Inflict [shock]<d6> shock[;]|reroll with higher value,2,inflict(SHOCK[;]d); sfx(~_shock~); var finalv = []; for(dicev in (d+1)...7) { finalv.push(dicev); }; givedice(rand(finalv));,Zap,MAX3,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade,Do [sword]<d6> damage[;]|on 1 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 5 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX4|FREE1,,ORANGE,change_power,change_power,weaken,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_upgraded,Do [sword]<d6> damage[;]|on 1 or 6[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 7 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_downgraded,Do [sword]<d6> damage[;]|on 2 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 2 # d == 4) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX2|MAX2,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch,Do [sword]2 damage 3-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_upgraded,Do [sword]2 damage 5-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_downgraded,Do [sword]2 damage 3-6 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch,Do [sword]7 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(14); sfxdamage(target[;]14); self.textparticle(~Success!~); } else { attack(7); sfxdamage(target[;]7); };,Power Up,NORMAL|NORMAL,7,PINK,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Lucky Punch_upgraded,Do [sword]9 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(18); sfxdamage(target[;]18); self.textparticle(~Success!~); } else { attack(9); sfxdamage(target[;]9); };,Power Up,NORMAL|NORMAL,9,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch_downgraded,Do [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele,Do [shock]<d6> damage[;]|on 5[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 5) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_downgraded,Do [shock]<d6> damage|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_upgraded,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 6) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Worm Scarf,At the start of each turn[;]|gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_magic~);,Protection,,,PURPLE,change_power,change_power,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,1,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Worm Scarf_upgraded,At the start of each turn[;]|gain [reduce]1 reduce[;] [thorns]1 thorn,1,inflictself(REDUCE); inflictself(THORNS); sfx(~_magic~);,Protection,,,PURPLE,,,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Worm Scarf_downgraded,No effect,1,,Protection,,,PURPLE,,,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,,,,,,,,,,,,
Melon Cauldron,Do [sword]3 damage[;]|get two new dice,1,attack(3); sfxdamage(target[;]3); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);,Random Roll,REQUIRE6,,GREEN,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);
Melon Cauldron_upgraded,Do [ice]3 dmg[;] +[ice]1 freeze[;]|get two new dice,1,attack(3[;] ICE); inflict(ICE); sfxdamage(target[;]3); sfx(~_ice~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);,Random Roll,REQUIRE6,,GREEN,,,,,0,NO,NO,rs,,,,,,,,,,,,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);
Melon Cauldron_downgraded,Do [sword]3 damage[;]|get a new dice,1,attack(3); sfxdamage(target[;]3); givedice();,Random Roll,REQUIRE6,,GREEN,,,,,0,NO,NO,rs,,,,,,,,,,,,givedice();
Eternity Cannon,Do [sword]5 damage now[;] and|at the start of each turn|[gray](once per battle),1,attack(5); sfxdamage(target[;] 5); inflictself(~eternitycannon~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,change_power,change_power,,,0,NO,YES,rs,2,,,,,,,,,,,
Eternity Cannon_upgraded,Do [sword]5 damage now[;] and|at the start of each turn,1,attack(5); sfxdamage(target[;]5); inflictself(~eternitycannon~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Eternity Cannon_downgraded,Do [sword]3 damage now[;] and|at the start of each turn|[gray](once per battle),1,attack(3); sfxdamage(target[;]3); inflictself(~eternitycannondowngraded~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,,,,,0,NO,YES,rs,,,,,,,,,,,,
Enchanted Missile,Do [sword]<evar:enchantedmissiledmg> dmg on start turn|Use to add [sword]3,1,e.setvar(~enchantedmissiledmg~[;]e.getvar(~enchantedmissiledmg~)+3); sfx(~_mana~);,Plasma Gun,EVEN|EVEN,,YELLOW,simplify,change_power,,,0,YES,NO,excludefromrandomlists|rs,1,e.resetvar(~enchantedmissiledmg~);,e.resetvar(~enchantedmissiledmg~);,,var enchdmg = e.getvar(~enchantedmissiledmg~); if(enchdmg > 0) { attack(enchdmg); sfxdamage(target[;]enchdmg); e.animate(~flashandshake~); },,,,,,,
Enchanted Missile_downgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target[;]5);,Plasma Gun,EVEN|EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|rs,,e.resetvar(~enchantedmissiledmg~);,e.resetvar(~enchantedmissiledmg~);,,,,,,,,,
Chain Knife,Do [sword]<d6> damage[;]|reduce countdowns by 2|,1,attack(d); boostcountdowns(2); sfxdamage(target[;]d);,Plasma Gun,MAX2,,RED,change_power,change_power,,,3,NO,NO,,1,,,,,,,,,,,boostcountdowns(2);
Chain Knife_upgraded,Do [sword]<d6> damage[;]|reduce countdowns by <double>|,1,attack(d); boostcountdowns(d*2); sfxdamage(target[;]d);,Plasma Gun,MAX2,,RED,,,,,3,NO,NO,,,,,,,,,,,,,boostcountdowns(d*2);
Chain Knife_downgraded,Do [sword]<d6> damage[;]|reduce countdowns by 2,1,attack(d); boostcountdowns(2); sfxdamage(target[;]d);,Plasma Gun,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Cloak and Dagger,Gain [shield]<d6> shield[;]|replace this with Shiv,1,inflictself(SHIELD[;]d); sfx(~_shield~); giveequipment(~Shiv~[;]true[;]false[;]e);,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,cannotreuse,1,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Cloak and Dagger_upgraded,Gain [shield]<d6> shield[;]|replace this with Shiv+,1,inflictself(SHIELD[;]d); sfx(~_shield~); giveequipment(~Shiv+~[;]true[;]false[;]e);,Barricade,MAX5,,ORANGE,,,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Cloak and Dagger_downgraded,Gain [shield]1 shield[;]|replace this with Shiv,1,inflictself(SHIELD[;]1); sfx(~_shield~); giveequipment(~Shiv~[;]true[;]false[;]e);,Barricade,REQUIRE1,,ORANGE,,,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Cloak and Dagger_weakened,Gain [shield]1 shield[;]|replace this with Shiv+,1,inflictself(SHIELD[;]1); sfx(~_shield~); giveequipment(~Shiv+~[;]true[;]false[;]e);,Barricade,REQUIRE1,,ORANGE,,,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Shiv,At the start of your turn[;] do|[sword]2 damage and replace this|with Cloak and Dagger,1,attack(2); sfxdamage(target[;]2); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e);,Pea Gun,,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Shiv_upgraded,At the start of your turn[;] do|[sword]3 damage and replace this|with Cloak and Dagger+,1,attack(3); sfxdamage(target[;]3); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e);,Pea Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Shiv_downgraded,At the start of your turn[;] do|[sword]1 damage and replace this|with Cloak and Dagger,1,attack(1); sfxdamage(target[;]1); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e);,Pea Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Shiv_weakened,At the start of your turn[;] do|[sword]1 damage and replace this|with Cloak and Dagger+,1,attack(1); sfxdamage(target[;]1); e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e);,Pea Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,e.animate(~flashandshake~); giveequipment(~Cloak and Dagger+~[;]true[;]false[;]e); if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; };
Adamant Rail,Do [sword]3 damage[;]|33% chance to repeat|,2,attack(3); sfxdamage(target[;]3);,Lucky Shot,COUNTDOWN,3,RED,threequartercountdown,change_power,,,4,NO,NO,,,,,,,,,,var odds = 33; if(getstatusself(~luck~) > 0){ odds += 33; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) inflictself(FURY);,,,
Adamant Rail_downgraded,Do [sword]3 damage|,2,attack(3); sfxdamage(target[;]3);,Lucky Shot,COUNTDOWN,3,RED,,,,,4,NO,NO,,,,,,,,,,,,,
Old Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Old Nail@1~[;]true[;]false[;]e);,Pea Gun,MAX2,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Old Nail@1~[;]true[;]false[;]e);
Old Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Old Nail@1+~[;]true[;]false[;]e);,Pea Gun,MAX2|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Old Nail@1+~[;]true[;]false[;]e);
Old Nail@2_downgraded,No effect|Use this twice to|permanently upgrade,1,if(e.originallyupgraded == true) { giveequipment(~Old Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Old Nail@1~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,YES,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Old Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);,Pea Gun,MAX2,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Old Nail@2~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);
Old Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);,Pea Gun,MAX2|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Old Nail@2+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);
Old Nail@1_downgraded,No effect|Use this once to|permanently upgrade,1,if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,YES,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Sharpened Nail@3,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e);,Pea Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e);
Sharpened Nail@3_upgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e);,Pea Gun,MAX3|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e);
Sharpened Nail@3_downgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@2~[;]true[;]false[;]e); };
Sharpened Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e);,Pea Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e);
Sharpened Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e);,Pea Gun,MAX3|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e);
Sharpened Nail@2_downgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Sharpened Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Sharpened Nail@1~[;]true[;]false[;]e); };
Sharpened Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,Pea Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);
Sharpened Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,Pea Gun,MAX3|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Sharpened Nail@3+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);
Sharpened Nail@1_downgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@4~[;]true[;]false[;]e); };,Pea Gun,MAX2,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@4~[;]true[;]false[;]e); };
Channelled Nail@4,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@3~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@3~[;]true[;]false[;]e);
Channelled Nail@4_upgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e);
Channelled Nail@4_downgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@3~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@3~[;]true[;]false[;]e); };
Channelled Nail@3,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@2~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@2~[;]true[;]false[;]e);
Channelled Nail@3_upgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e);
Channelled Nail@3_downgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@2~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@2~[;]true[;]false[;]e); };
Channelled Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@1~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@1~[;]true[;]false[;]e);
Channelled Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e);
Channelled Nail@2_downgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@1~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Channelled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Channelled Nail@1~[;]true[;]false[;]e); };
Channelled Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,Pea Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);
Channelled Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,Pea Gun,MAX4|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Channelled Nail@4+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);
Channelled Nail@1_downgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@6~[;]true[;]false[;]e); };,Pea Gun,MAX3,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@6~[;]true[;]false[;]e); };
Coiled Nail@6,Do [sword]<d6> damage|Use this six times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@5~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@5~[;]true[;]false[;]e);
Coiled Nail@6_upgraded,Do [sword]<d6> damage|Use this six times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e);
Coiled Nail@6_downgraded,Do [sword]<d6> damage|Use this six times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@5~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@5+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@5~[;]true[;]false[;]e); };
Coiled Nail@5,Do [sword]<d6> damage|Use this five times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@4~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@4~[;]true[;]false[;]e);
Coiled Nail@5_upgraded,Do [sword]<d6> damage|Use this five times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e);
Coiled Nail@5_downgraded,Do [sword]<d6> damage|Use this five times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@4~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@4+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@4~[;]true[;]false[;]e); };
Coiled Nail@4,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@3~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@3~[;]true[;]false[;]e);
Coiled Nail@4_upgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e);
Coiled Nail@4_downgraded,Do [sword]<d6> damage|Use this four times to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@3~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@3+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@3~[;]true[;]false[;]e); };
Coiled Nail@3,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@2~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@2~[;]true[;]false[;]e);
Coiled Nail@3_upgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e);
Coiled Nail@3_downgraded,Do [sword]<d6> damage|Use this thrice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@2~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@2+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@2~[;]true[;]false[;]e); };
Coiled Nail@2,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@1~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@1~[;]true[;]false[;]e);
Coiled Nail@2_upgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e);
Coiled Nail@2_downgraded,Do [sword]<d6> damage|Use this twice to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@1~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Coiled Nail@1+~[;]true[;]false[;]e); } else { giveequipment(~Coiled Nail@1~[;]true[;]false[;]e); };
Coiled Nail@1,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Pure Nail~[;]true[;]false[;]e);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Pure Nail~[;]true[;]false[;]e);
Coiled Nail@1_upgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); giveequipment(~Pure Nail+~[;]true[;]false[;]e);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,giveequipment(~Coiled Nail@6+~[;]true[;]false[;]e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; giveequipment(~Pure Nail+~[;]true[;]false[;]e);
Coiled Nail@1_downgraded,Do [sword]<d6> damage|Use this once to|permanently upgrade,1,attack(d); sfxdamage(target[;]d); if(e.originallyupgraded == true) { giveequipment(~Pure Nail+~[;]true[;]false[;]e); } else { giveequipment(~Pure Nail~[;]true[;]false[;]e); };,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(e.getvar(~reeq~) > 0) { for(mystat in self.status) { if(mystat.type == ~reequipnext~) { mystat.value = e.getvar(~reeq~); e.resetvar(~reeq~); }; }; }; if(e.originallyupgraded == true) { giveequipment(~Pure Nail+~[;]true[;]false[;]e); } else { giveequipment(~Pure Nail~[;]true[;]false[;]e); };
Pure Nail,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,change_power,decreaserange,,,2,NO,NO,,,,,,,,,,,,,
Pure Nail_upgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL|FREE1,,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Tyrant's Glare,In [jinx]<d6> turns[;]|inflict [lock]<d6> lock,2,jinx(~Tyrant's Glare~[;]~gain [lock]%VAR% lock~[;]~Gain [lock]%VAR% lock~[;]~inflict(LOCK[;]%VAR%); sfx(\~_lock\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Padlock,MIN3,,PINK,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Brimstone,In three turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]3[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL,,RED,change_power,change_power,,,0,NO,NO,notblade,,,,,,,,,,,,
Brimstone_upgraded,In three turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]3[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL|FREE1,,RED,,,,,0,NO,NO,notblade,,,,,,,,,,,,
Brimstone_downgraded,In four turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]4[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL,,RED,,,,,0,NO,NO,notblade,,,,,,,,,,,,
Brimstone_weakened,In four turns[;] do|[sword]<double> damage|Pierces shields,2,jinx(~Brimstone~[;]~take [sword]%VAR% piercing damage~[;]~Take [sword]%VAR% piercing damage~[;]~pierceattack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]4[;]d * 2); sfx(~_thinghappens~);,Blood Sip,NORMAL|FREE1,,RED,,,,,0,NO,NO,notblade,,,,,,,,,,,,
Storm Reactor,Fully charge your limit break,2,self.limitvalue = self.limitmax; sfx(~_shock~); screenshake();,Jackhammer,MIN4|MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Storm Reactor_upgraded,Fully charge your limit break,2,self.limitvalue = self.limitmax; sfx(~_shock~); screenshake();,Jackhammer,MIN3|MIN3,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Storm Reactor_downgraded,Fully charge your limit break,2,self.limitvalue = self.limitmax; sfx(~_shock~); screenshake();,Jackhammer,MIN5|MIN5,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Stygian Blade,[sword]<d6> dmg[;] on double 1[;]|gain [reduce]3 reduce and make|this unavailable next turn,2,attack(d); if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; } sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; }
Stygian Blade_upgraded,[sword]<d6> dmg[;] on doubles[;]|gain [reduce]3 reduce and make|this unavailable next turn,2,attack(d); if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; } sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(REDUCE[;]3); sfx(~_shield~); e.availablenextturn = false; }
Stygian Blade_downgraded,[sword]<d6> dmg[;] on double 1[;]|gain [shield]3 shield and make|this unavailable next turn,2,attack(d); if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(SHIELD[;]3); sfx(~_shield~); e.availablenextturn = false; } sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){ inflictself(SHIELD[;]3); sfx(~_shield~); e.availablenextturn = false; }
Devilsknife,Do [fire]<d6> damage[;] +[fire]1 burn|,2,attack(d[;]FIRE); inflict(FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Devilsknife_upgraded,Do [fire]<d6> damage[;] +[fire]1 burn|,2,attack(d[;]FIRE); inflict(FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Devilsknife_downgraded,Do [fire]<d6> damage|,2,attack(d[;]FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,,,,,3,NO,NO,,,,,,,,,,,,,
Devilsknife_weakened,Do [fire]<d6> damage|,2,attack(d[;]FIRE); sfxdamage(target[;]d); sfx(~_fire~);,Plasma Gun,MAX3,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Permapick,Split the dice in two[;]|return the dice,2,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,MIN2,,GREEN,reducesize,change_power,,,0,YES,NO,,,,,,,,,,,,,
Permapick_downgraded,Split the dice in two[;]|return the dice,2,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,REQUIRE3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Permapick_weakened,Split the dice in two[;]|return the dice,1,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,REQUIRE3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Permapick_deckupgrade,Split the dice in two[;]|return the dice,2,var dicearray = split(d); dicearray.push(d); givedice(dicearray);,Steal,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Deva Form,+1 dice this fight[;]|roll 2 extra dice next turn,2,self.extradice++; for(x in 0...2) { inflictself(~illuminate~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~);,Clone Device,COUNTDOWN,15,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Deva Form_upgraded,+1 dice this fight[;]|roll 3 extra dice next turn,2,self.extradice++; for(x in 0...3) { inflictself(~illuminate~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~);,Clone Device,COUNTDOWN,15,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Deva Form_downgraded,Roll 2 extra dice next turn,2,for(x in 0...2) { inflictself(~illuminate~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~);,Clone Device,COUNTDOWN,15,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Sand Hawk,Do [weaken]6 damage[;]|inflict [weaken]3 weaken|[80%][gray]In. Not unlike Errol.,2,attack(6[;]WEAKEN); inflict(WEAKEN[;]3); sfxdamage(target[;]6); sfx(~_weaken~);,Plasma Gun,NORMAL|NORMAL,9,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sand Hawk_upgraded,Do [weaken]8 damage[;]|inflict [weaken]3 weaken|[80%][gray]In. Not unlike Errol.,2,attack(8[;]WEAKEN); inflict(WEAKEN[;]3); sfxdamage(target[;]6); sfx(~_weaken~);,Plasma Gun,NORMAL|NORMAL,9,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Sand Hawk_downgraded,Do [weaken]6 damage[;]|inflict [weaken]3 weaken|[80%][gray]In. Not unlike Errol.,2,attack(6[;]WEAKEN); inflict(WEAKEN[;]3); sfxdamage(target[;]6); sfx(~_weaken~);,Plasma Gun,NORMAL|NORMAL,11,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Pigstep,Pay [gold]2 to gain [dodge]2 dodge|You have [gold]<gold> gold,1,if(self.gold >= 2) { self.gold -= 2; inflictself(DODGE[;]2); sfx(~_dodge~); } else { self.textparticle(~Not enough gold!~); },Quick Thinking,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Pigstep_upgraded,Pay [gold]2 to gain [dodge]3 dodge|You have [gold]<gold> gold,1,if(self.gold >= 2) { self.gold -= 2; inflictself(DODGE[;]3); sfx(~_dodge~); } else { self.textparticle(~Not enough gold!~); },Quick Thinking,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Pigstep_downgraded,Pay [gold]2 to gain [shield]6 shield|You have [gold]<gold> gold,1,if(self.gold >= 2) { self.gold -= 2; inflictself(SHIELD[;]6); sfx(~_shield~); } else { self.textparticle(~Not enough gold!~); },Quick Thinking,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
[END REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Brace,Gain [shield]2 shield[;]|on 4[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d==4){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,change_requirements,change_power,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_upgraded,Gain [shield]2 shield[;]|on even[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d%2 == 0){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_downgraded,Gain [shield]2 shield,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Electric Arc,[shock]2 damage to everyone|Return the dice,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_upgraded,[shock]2 damage to everyone|Dice value +1,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d+1);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_downgraded,[shock]1 damage to everyone|Return the dice,1,attack(1[;]SHOCK); attackself(1[;]SHOCK); sfxdamage(target[;]1); sfxdamage(self[;]1); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Matchbook,Burn [fire]<d6> dice,1,inflict(FIRE[;]d); sfx(~_fire~);,Hellfire,MAX3,,RED,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Matchbook_upgraded,Burn [fire]<d6> dice|Do [fire]2 damage,1,inflict(FIRE[;]d); sfx(~_fire~); attack(2[;]FIRE); sfxdamage(target[;]d);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Matchbook_downgraded,Burn a dice,1,inflict(FIRE); sfx(~_fire~);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Ice Tray,Freeze [ice]<d6> dice,1,inflict(ICE[;]d); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,change_power,change_power,ice,none,0,NO,NO,gb,1,,,,,,,,,,,
Ice Tray_upgraded,Freeze [ice]<d6> dice|Do [ice]2 damage,1,inflict(ICE[;]d); sfx(~_ice~); attack(2[;]ICE); sfxdamage(target[;]2);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Ice Tray_downgraded,Freeze a dice,1,inflict(ICE); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Wide Spatula,Flip this dice and|another random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } givedice(7-d); if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Wide Spatula_upgraded,Flip this dice and your|lowest remaining dice,1,var poss = []; var low = 7; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue < low){ poss.push(mydice); low = mydice.basevalue; } } givedice(7-d); if(poss.length > 0){ var rdice = poss[poss.length - 1]; rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Wide Spatula_downgraded,Flip a random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron,Gain [thorns]1 thorn[;]|get a new dice,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Cactus Cauldron_upgraded,Gain [thorns]1 thorn[;] reroll dice|,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron_downgraded,Get a new dice,1,givedice();,Needle,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
False Swipe,Do [sword]10 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(10); sfxdamage(target[;]10);,Blood Sip,COUNTDOWN,8,GREEN,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_upgraded,Do [sword]12 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(12); sfxdamage(target[;]12);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_downgraded,Do [sword]5 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(5); sfxdamage(target[;]5);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting,Do [sword]<d6> damage[;]|25% chance to add [poison]2,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_upgraded,Do [sword]<d6> damage[;]|75% chance to add [poison]2,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver,Do [sword]<d6> damage[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL,,PURPLE,reducesize,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_deckupgrade,Do [sword]<d6> dmg[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL|FREE1,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_weakened,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Pin Missile,Do [sword]1 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,change_power,change_power,,none,2,NO,NO,gb,1,,,,,,,,,,,
Pin Missile_upgraded,Do [sword]2 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(2); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,2,NO,NO,gb,,,,,,,,,,,,
Pin Missile_downgraded,Do [sword]1 damage 2-5 times,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Wave,Do [sword]<d6> damage[;]|Inflict [poison]2 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,change_power,complicate,,none,0,NO,NO,gb,1,,,,,,,,,,,
Sludge Wave_upgraded,Do [sword]<d6> damage[;]|Inflict [poison]3 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]3); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Caustic Cauldron,Inflict [poison]1 poison[;]|get a new dice,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,,,,,givedice();
Caustic Cauldron_upgraded,Inflict [poison]1[;] reroll dice|,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,2,NO,NO,gb,,,,,,,,,,,,givedice();
Caustic Cauldron_downgraded,Inflict [poison]1 poison,1,inflict(POISON); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sealing Stamp,Do [sword]4 damage|(At end of turn: do [sword]2),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,if(target.hp > 0){ attack(2); sfxdamage(target[;]2); },,,,
Sealing Stamp_upgraded,Do [sword]4 damage|(At end of turn: do [sword]3),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,if(target.hp > 0){ attack(3); sfxdamage(target[;]3); },,,,
Sealing Stamp_downgraded,Do [sword]4 damage,1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Decantation,Both dice values -1[;]|roll a 2,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Decantation_upgraded,Both values -1[;] roll a 2|,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Decantation_downgraded,Both dice values -1,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror,In [jinx]2 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Fogged Mirror_upgraded,In [jinx]2 turns[;] +1 dice|,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror_downgraded,In [jinx]3 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]3[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Sludge Spear,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,REQUIRE6,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,2,,,,,,,,,,,
Sludge Spear_upgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,MIN4,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Spear_downgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,REQUIRE6|REQUIRE6,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Transporter,Duplicate part of a dice,1,var parts = split(d); givedice([d[;]parts[0]]);,Clone Device,MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Transporter_upgraded,Duplicate most of a dice,1,if(d > 1){ givedice([d[;]d-1]); } else{ givedice([d[;]d]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Transporter_downgraded,Duplicate a small|part of a dice,1,var parts = split(d); if(parts[0] < parts[1]){ givedice([d[;]parts[0]]); } else{ givedice([d[;]parts[0]]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Pocket Pistil,[sword]1 dmg[;] gain [thorns]1 thorn|[gray](Reuseable),1,inflictself(THORNS); attack(1); sfxdamage(target[;]1); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,change_power,change_power,thorns,none,-1,NO,NO,gb,,,,,,,,,,,,inflictself(THORNS); sfx(~_thorns~[;]~~[;]0.2);
Pocket Pistil_upgraded,[sword]2 dmg[;] gain [thorns]1 thorn|[gray](Reuseable),1,inflictself(THORNS); attack(2); sfxdamage(target[;]2); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,NO,NO,gb,,,,,,,,,,,,inflictself(THORNS); sfx(~_thorns~[;]~~[;]0.2);
Pocket Pistil_downgraded,Gain [thorns]1 thorn|[gray](Reuseable),1,inflictself(THORNS); sfx(~_thorns~);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,YES,NO,gb,,,,,,,,,,,,
Pocket Pistil?,Gain [thorns]1 thorn[;] [sword]1 dmg|,1,inflictself(THORNS); attack(1); sfxdamage(target[;]1); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,change_power,change_power,,none,-1,NO,NO,alternateversion|gb,,,,,,,,,,,,
Pocket Pistil?_upgraded,Gain [thorns]1 thorn[;] [sword]2 dmg|,1,inflictself(THORNS); attack(2); sfxdamage(target[;]2); sfx(~_thorns~[;]~~[;]0.2);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,NO,NO,alternateversion|gb,,,,,,,,,,,,
Pocket Pistil?_downgraded,Gain [thorns]1 thorn|,1,inflictself(THORNS); sfx(~_thorns~);,Needle,COUNTDOWN,5,GREEN,,,,none,-1,YES,NO,alternateversion|gb,,,,,,,,,,,,
Flea Shooter,Drain [heart]1 health or add [poison]1|[gray](Reuseable),1,if(chance(50)){ drain(1); sfx(~_drain~); } else{ inflict(POISON); sfx(~_poison~); },Blood Sip,COUNTDOWN,5,RED,change_power,change_power,,NONE,-1,NO,NO,,,,,,,,,,,,,
Flea Shooter_upgraded,Drain [heart]1 health[;] add [poison]1|[gray](Reuseable),1,drain(1); sfx(~_drain~); inflict(POISON); sfx(~_poison~|~~|0.2);,Blood Sip,COUNTDOWN,5,RED,,,,NONE,-1,NO,NO,,,,,,,,,,,,,
Flea Shooter_downgraded,Drain [heart]1 health|[gray](Reuseable),1,drain(1); sfx(~_drain~);,Blood Sip,COUNTDOWN,5,RED,,,,NONE,-1,NO,NO,,,,,,,,,,,,,
Washcloth,Unblind a dice,1,givedice(d); self.dicepool[self.dicepool.length-1].blind = false;,Hook,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Washcloth_upgraded,Unblind a dice|,1,givedice(d); self.dicepool[self.dicepool.length-1].blind = false;,Hook,NORMAL,,GREEN,,,,none,3,YES,NO,,,,,,,,,,,,,
Washcloth_downgraded,Return the dice,1,givedice(d);,Hook,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Create Opening,Do [sword]<double> damage[;]|until next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~restore~[;]d*2);,Burrower,MAX3,,ORANGE,increaserange,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Create Opening_downgraded,Do [sword]<d6> damage[;]|until next turn,1,attack(d); sfxdamage(target[;]d); inflict(~restore~[;]d);,Burrower,MAX3,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Sharpie,Roll a blind dice|with a higher value,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); } self.dicepool[self.dicepool.length-1].blind = true; sfx(~_blind~);,Reroll,MAX4,,PURPLE,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Sharpie_upgraded,Roll a blind dice|with a higher value,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); } self.dicepool[self.dicepool.length-1].blind = true; sfx(~_blind~);,Reroll,MAX5,,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Sharpie_downgraded,Roll a blind dice|with a higher value,1,if(d == 1) { givedice(rand([2[;]3[;]4[;]5[;]6])); } else if(d == 2) { givedice(rand([3[;]4[;]5[;]6])); } else if(d == 3) { givedice(rand([4[;]5[;]6])); } else if(d == 4) { givedice(rand([5[;]6])); } else if(d >= 5) { givedice(6); } self.dicepool[self.dicepool.length-1].blind = true; sfx(~_blind~);,Reroll,MAX2,,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Safety Scissors,Do [sword]3 damage[;]|split the dice in two,1,attack(3); sfxdamage(target[;]3); givedice(split(d));,Magic Lockpick,MIN4,,GREEN,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,givedice(split(d));
Safety Scissors_upgraded,Do [sword]4 damage[;]|split the dice in two,1,attack(4); sfxdamage(target[;]4); givedice(split(d));,Magic Lockpick,MIN4,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,givedice(split(d));
Safety Scissors_downgraded,Do [sword]3 damage[;]|split value in two,1,attack(3); sfxdamage(target[;]3); givedice(d/2);,Magic Lockpick,MIN4,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,givedice(split(d));
Rising Dagger,Do [sword]<d6> damage[;] triple|on the final use|,2,if(e.usesleft == 0){ attack(d*3); sfxdamage(target[;]d*3); } else{ attack(d); sfxdamage(target[;]d); },Steal,MAX3,,RED,change_power,change_power,,none,4,NO,NO,,,,,,,,,,,,,
Rising Dagger_upgraded,Do [sword]<d6> damage[;] triple|on the final use|,2,if(e.usesleft == 0){ attack(d*3); sfxdamage(target[;]d*3); } else{ attack(d); sfxdamage(target[;]d); },Steal,MAX3,,RED,,,,none,3,NO,NO,,,,,,,,,,,,,
Rising Dagger_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Steal,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Burst Beam,Do damage equal to limit|charge ([sword]<var:burstbeamdamage>); reduce it by 5,1,attack(self.limitvalue); sfxdamage(target[;]self.limitvalue); self.limitvalue -= 5; if(self.limitvalue < 0) self.limitvalue = 0;,Focus,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,inflictself(~watchburstbeam~);,,,,,,,,self.limitvalue -= 5; if(self.limitvalue < 0) self.limitvalue = 0;
Burst Beam_upgraded,Do damage equal to|your limit charge ([sword]<var:burstbeamdamage>),1,attack(self.limitvalue); sfxdamage(target[;]self.limitvalue);,Focus,DOUBLES|DOUBLES,,YELLOW,,,,none,0,NO,NO,,,,,inflictself(~watchburstbeam~);,,,,,,,,
Burst Beam_downgraded,Do damage equal to limit|charge ([sword]<var:burstbeamdamage>)[;] but deplete it,1,attack(self.limitvalue); sfxdamage(target[;]self.limitvalue); self.limitvalue = 0;,Focus,DOUBLES|DOUBLES,,YELLOW,,,,none,0,NO,NO,,,,,inflictself(~watchburstbeam~);,,,,,,,,self.limitvalue = 0;
Dice Pump,Odd: roll a higher odd dice|Even: roll a higher even dice,1,if(d==1){ givedice(rand([3[;]5])); } else if(d==2){ givedice(rand([4[;]6])); } else if(d==3 # d==5){ givedice(5); } else if(d==4 # d==6){ givedice(6); } else{ givedice(d); },Megabump,MAX4,,GREEN,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Dice Pump_upgraded,Odd: roll a 5|Even: roll a 6,1,if(d%2 == 0){ givedice(6); } else{ givedice(5); },Megabump,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Dice Pump_downgraded,Dice value +1,1,givedice(d+1);,Megabump,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Supersonic,Reverse the target of|the enemy's next action,1,inflict(~reversenexttarget~); sfx(~_cure~);,Disorient,DOUBLES|DOUBLES,,GRAY,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Supersonic_upgraded,Reverse the target of|the enemy's next action,1,inflict(~reversenexttarget~); sfx(~_cure~);,Disorient,EVEN,,GRAY,,,,none,0,NO,NO,,,,,,,,,,,,,
Supersonic_downgraded,Reverse the target of|the enemy's next action,1,inflict(~reversenexttarget~); sfx(~_cure~);,Disorient,REQUIRE6|REQUIRE6,,GRAY,,,,none,0,NO,NO,,,,,,,,,,,,,
Zeus Dagger,Do [shock]<d6> damage[;] shock this|,1,attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~);,Static Shock,NORMAL,,YELLOW,change_power,change_power,,none,-1,NO,NO,,1,var shocks = ~shock~; var dummy = new elements.Fighter(~Frog~); dummy.addstatus(~shock~[;]1); for(stat in dummy.status){ if(stat.type == ~alternate_shock~){ shocks = ~alternate_shock~; } } self.setvar(~shocktype~[;]shocks); dummy.dispose();,,,,,,,e.animate(self.getvar(~shocktype~));,,,
Zeus Dagger_upgraded,[shock]<d6> damage[;] shock this|,1,attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~);,Static Shock,NORMAL|FREE1,,YELLOW,,,,none,-1,NO,NO,,,var shocks = ~shock~; var dummy = new elements.Fighter(~Frog~); dummy.addstatus(~shock~[;]1); for(stat in dummy.status){ if(stat.type == ~alternate_shock~){ shocks = ~alternate_shock~; } } self.setvar(~shocktype~[;]shocks); dummy.dispose();,,,,,,,e.animate(self.getvar(~shocktype~));,,,
Zeus Dagger_downgraded,Do [shock]<d6> damage[;] shock this|,1,attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~);,Static Shock,MAX3,,YELLOW,,,,none,-1,NO,NO,,,var shocks = ~shock~; var dummy = new elements.Fighter(~Frog~); dummy.addstatus(~shock~[;]1); for(stat in dummy.status){ if(stat.type == ~alternate_shock~){ shocks = ~alternate_shock~; } } self.setvar(~shocktype~[;]shocks); dummy.dispose();,,,,,,,e.animate(self.getvar(~shocktype~));,,,
God's Pick,Flip a dice and split it[;]|then flip the results,1,var f = split(7-d); givedice([7-f[0][;]7-f[1]][;]~splitdice~);,Megaflip,MAX3,,GREEN,change_requirements,change_power,,none,0,YES,NO,,,,,,,,,,,,,
God's Pick_upgraded,Flip a dice and split it[;]|then flip the results,1,var f = split(7-d); givedice([7-f[0][;]7-f[1]][;]~splitdice~);,Megaflip,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
God's Pick_downgraded,Flip a dice and split it[;]|then flip the results,1,var f = split(7-d); givedice([7-f[0][;]7-f[1]][;]~splitdice~);,Megaflip,MAX2,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Ubersaw,Do [sword]<d6> damage[;]|charge limit break by 3,2,attack(d); sfxdamage(target[;]d); self.limitvalue += 3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);,Limit Charge,MAX4,,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,self.limitvalue += 3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);
Ubersaw_upgraded,Do [sword]<d6> damage[;]|charge limit break by 4,2,attack(d); sfxdamage(target[;]d); self.limitvalue += 4; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);,Limit Charge,MAX4,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,self.limitvalue += 4; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);
Ubersaw_downgraded,Do [sword]<d6> damage[;]|charge limit break by 1,2,attack(d); sfxdamage(target[;]d); self.limitvalue += 1; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);,Limit Charge,MAX3,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,self.limitvalue += 1; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; } sfx(~levelup~);
Pocket Sand,Blind [blind]1 dice,1,inflict(BLIND); sfx(~_blind~);,Flash,COUNTDOWN,2,PURPLE,change_power,change_power,blind,none,0,NO,NO,,,,,,,,,,,,,
Pocket Sand_upgraded,Blind [blind]2 dice,1,inflict(BLIND[;]2); sfx(~_blind~);,Flash,COUNTDOWN,2,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Pocket Sand_downgraded,No effect,1,,Flash,COUNTDOWN,2,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Chain Link,Reduce countdowns by 4,1,boostcountdowns(4); sfx(~useitem~);,Ignition,COUNTDOWN,5,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Chain Link_upgraded,Reduce countdowns by 5,1,boostcountdowns(5); sfx(~useitem~);,Ignition,COUNTDOWN,5,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Chain Link_downgraded,Reduce countdowns by 1,1,boostcountdowns(1); sfx(~useitem~);,Ignition,COUNTDOWN,5,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Spirit Shield,Gain [shield]1 shield for each|unused dice ([shield]<unassigneddice> total),1,var t = 1; for(d in self.dicepool){ if(d.available()) t++; } inflictself(SHIELD[;]t); sfx(~_shield~);,Barricade,ODD,,ORANGE,change_requirements,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Spirit Shield_upgraded,[shield]1 per unused dice ([shield]<unassigneddice>[])|[gray](2 uses this turn),1,var t = 1; for(d in self.dicepool){ if(d.available()) t++; } inflictself(SHIELD[;]t); sfx(~_shield~);,Barricade,ODD,,ORANGE,,,,none,2,YES,NO,,,,,,,,,,,,,
Spirit Shield_downgraded,Gain [shield]1 shield for each|unused dice ([shield]<unassigneddice> total),1,var t = 1; for(d in self.dicepool){ if(d.available()) t++; } inflictself(SHIELD[;]t); sfx(~_shield~);,Barricade,REQUIRE5,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Endless Pond,[]+1 dice this fight,1,self.extradice++; sfx(~magic_gaindice~);,Infinity Mirror,NORMAL|NORMAL,6,PURPLE,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Endless Pond_upgraded,[]+1 dice[;] return first dice,1,self.extradice++; sfx(~magic_gaindice~); givedice(actualdice[0].basevalue);,Infinity Mirror,NORMAL|NORMAL,6,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Endless Pond_downgraded,[]+1 dice this fight,1,self.extradice++; sfx(~magic_gaindice~);,Infinity Mirror,MAX3|MAX3,6,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Betelgeuse,Do [sword]20 damage[;]|add 2x random status,1,var rstatus = rand([FIRE[;]ICE[;]LOCK[;]POISON[;]SHOCK[;]WEAKEN[;]CURSE]); attack(20); sfxdamage(target[;]20); inflict(rstatus[;]2); sfx(~_~ + rstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,21,PINK,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Betelgeuse_upgraded,Do [sword]25 damage[;]|add 3x random status,1,var rstatus = rand([FIRE[;]ICE[;]LOCK[;]POISON[;]SHOCK[;]WEAKEN[;]CURSE]); attack(25); sfxdamage(target[;]25); inflict(rstatus[;]3); sfx(~_~ + rstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,21,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Betelgeuse_downgraded,Do [sword]10 damage[;]|add a random status,1,var rstatus = rand([FIRE[;]ICE[;]LOCK[;]POISON[;]SHOCK[;]WEAKEN[;]CURSE]); attack(10); sfxdamage(target[;]10); inflict(rstatus[;]1); sfx(~_~ + rstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,21,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Halfula,Flip one dice[;]|return the other,1,var one = 0; var other = 0; one = actualdice[rand([0[;]1])].basevalue; if(one == actualdice[0].basevalue){ other = actualdice[1].basevalue; } else{ other = actualdice[0].basevalue; } givedice([7 - one[;]other]); sfx(~useitem~);,Megaflip,NORMAL|NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Halfula_upgraded,Flip one[;] return the other|[gray](3 uses this turn),1,var one = 0; var other = 0; one = actualdice[rand([0[;]1])].basevalue; if(one == actualdice[0].basevalue){ other = actualdice[1].basevalue; } else{ other = actualdice[0].basevalue; } givedice([7 - one[;]other]); sfx(~useitem~);,Megaflip,NORMAL|NORMAL,,GREEN,,,,none,3,YES,NO,,,,,,,,,,,,,
Halfula_downgraded,Flip one dice[;]|return the other,1,var one = 0; var other = 0; one = actualdice[rand([0[;]1])].basevalue; if(one == actualdice[0].basevalue){ other = actualdice[1].basevalue; } else{ other = actualdice[0].basevalue; } givedice([7 - one[;]other]); sfx(~useitem~);,Megaflip,MIN4|MIN4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Giga Drain,Drain [heart]<d6> health|[gray](once per battle),1,drain(d); sfx(~_drain~);,Blood Sip,NORMAL,,RED,change_power,change_power,,none,0,NO,YES,,,,,,,,,,,,,
Giga Drain_upgraded,Drain [heart]<d6> health|[gray](once per battle),1,drain(d); sfx(~_drain~);,Blood Sip,NORMAL|FREE2,,RED,,,,none,0,NO,YES,,,,,,,,,,,,,
Giga Drain_downgraded,Drain [heart]<d6> health|[gray](once per battle),1,drain(d); sfx(~_drain~);,Blood Sip,MAX4,,RED,,,,none,0,NO,YES,,,,,,,,,,,,,
Bubble Burster,Do [sword]<d6> damage[;] +[sword]3|if enemy has a blessing,1,if(getstatus(SHIELD)>0 # getstatus(REEQUIPNEXT)>0 # getstatus(FURY)>0 # getstatus(REDUCE)>0 # getstatus(THORNS)>0 # getstatus(DODGE)>0 # getstatus(VAMPIRE)>0){attack(d+3); sfxdamage(target|d+3); } else{attack(d); sfxdamage(target|d); },Power Up,MAX5,,YELLOW,change_power,change_power,,NONE,0,NO,NO,,,,,,,,,,,,donothing();,
Bubble Burster_upgraded,Do [sword]<d6> damage[;] +[sword]3|if enemy has a blessing,1,if(getstatus(SHIELD)>0 # getstatus(REEQUIPNEXT)>0 # getstatus(FURY)>0 # getstatus(REDUCE)>0 # getstatus(THORNS)>0 # getstatus(DODGE)>0 # getstatus(VAMPIRE)>0){attack(d+3); sfxdamage(target|d+3); } else{attack(d); sfxdamage(target|d); },Power Up,NORMAL,,YELLOW,,,,NONE,0,NO,NO,,,,,,,,,,,,donothing();,
Bubble Burster_downgraded,Do [sword]<d6> damage[;] +[sword]3|if enemy has a blessing,1,if(getstatus(SHIELD)>0 # getstatus(REEQUIPNEXT)>0 # getstatus(FURY)>0 # getstatus(REDUCE)>0 # getstatus(THORNS)>0 # getstatus(DODGE)>0 # getstatus(VAMPIRE)>0){attack(d+3); sfxdamage(target|d+3); } else{attack(d); sfxdamage(target|d); },Power Up,MAX3,,YELLOW,,,,NONE,0,NO,NO,,,,,,,,,,,,donothing();,
Stink Bomb,Inflict [poison]1 poison for|each dice used on this,1,if(simulation) { inflict(POISON|2); } else { var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){inflict(POISON|a); sfx(~_poison~); e.setvar(~furyvalue~|a);} else{inflict(POISON|e.getvar(~furyvalue~)); sfx(~_poison~);} e.dicehistory = []; },Toxic,COUNTDOWN,6,PURPLE,change_power,change_power,,NONE,0,NO,NO,,,e.dicehistory = []; e.setvar(~furyvalue~|0);,,,e.setvar(~furyvalue~|0);,,,,,,,var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){e.setvar(~furyvalue~|a);}
Stink Bomb_upgraded,Inflict [poison]1 for each dice|used on this[;] plus [poison]1,1,if(simulation) { inflict(POISON|3); } else { var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){inflict(POISON|a + 1); sfx(~_poison~); e.setvar(~furyvalue~|a);} else{inflict(POISON|e.getvar(~furyvalue~)+1); sfx(~_poison~);} e.dicehistory = []; },Toxic,COUNTDOWN,6,PURPLE,,,,NONE,0,NO,NO,,,e.dicehistory = []; e.setvar(~furyvalue~|0);,,,e.setvar(~furyvalue~|0);,,,,,,,var a = 0; a = e.dicehistory.length; if(e.dicehistory.length > 0){e.setvar(~furyvalue~|a);}
Stink Bomb_downgraded,Inflict [poison]1 poison|(Dice history erased),1,inflict(POISON); sfx(~_poison~);,Toxic,COUNTDOWN,6,PURPLE,,,,NONE,0,NO,NO,,,e.dicehistory = []; e.setvar(~furyvalue~|0);,,,,,,,,,,
Mirror Spatula,Flip a dice[;] on 6|get +1 dice this fight,1,givedice(7-d); if(d == 6){self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN3,,PURPLE,change_power,change_power,,NONE,0,YES,NO,,1,,,,,,,,,,,
Mirror Spatula_upgraded,Flip a dice[;] on even|get +1 dice this fight,1,givedice(7-d); if(d %2  == 0){self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN3,,PURPLE,,,,NONE,0,YES,NO,,,,,,,,,,,,,
Mirror Spatula_downgraded,Flip a dice[;] on 6|get +1 dice this fight,1,givedice(7-d); if(d == 6){self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN4,,PURPLE,,,,NONE,0,YES,NO,,,,,,,,,,,,,
Reagent,Activate all poison on|enemy until none is left,2,if(simulation){bonus(500*getstatus(POISON)); } else{ function ceil(n) {var round = n - n%1; if (n != round) {return round + 1;} else {return round;}} if(getstatus(POISON) > 0){var total = 0; for(i in 0...getstatus(POISON)+1){ if(target.innate.indexOf(~strongpoison~) > -1){ total += ceil(i/2);} else if(target.innate.indexOf(~weakpoison~) > -1){ total += 2*i;} else{total += i;} } target.symbolparticle(POISON); pierceattack(total); sfx(~take_damage_from_poison_status~); removestatus(POISON|ALL); } else{self.textparticle(~No effect!~);} },Toxic,COUNTDOWN,30,PURPLE,change_power,change_power,,NONE,0,NO,NO,,,,,,,,,,,,,
Reagent_upgraded,Activate all poison on|enemy until none is left,1,if(simulation){bonus(500*getstatus(POISON)); } else{ function ceil(n) {var round = n - n%1; if (n != round) {return round + 1;} else {return round;}} if(getstatus(POISON) > 0){var total = 0; for(i in 0...getstatus(POISON)+1){ if(target.innate.indexOf(~strongpoison~) > -1){ total += ceil(i/2);} else if(target.innate.indexOf(~weakpoison~) > -1){ total += 2*i;} else{total += i;} } target.symbolparticle(POISON); pierceattack(total); sfx(~take_damage_from_poison_status~); removestatus(POISON|ALL); } else{self.textparticle(~No effect!~);} },Toxic,COUNTDOWN,30,PURPLE,,,,NONE,0,NO,NO,,,,,,,,,,,,,
Reagent_downgraded,Do [sword]1 damage for|every [poison]1 on enemy,2,attack(getstatus(POISON)); sfxdamage(target|getstatus(POISON));,Toxic,COUNTDOWN,30,PURPLE,,,,NONE,0,NO,NO,,,,,,,,,,,,,
Reagent_weakened,Do [sword]1 damage for|every [poison]1 on enemy,1,attack(getstatus(POISON)); sfxdamage(target|getstatus(POISON));,Toxic,COUNTDOWN,30,PURPLE,,,,NONE,0,NO,NO,,,,,,,,,,,,,
Chew the Scenery,Do [sword]<double> damage[;]|lose a dice,2,attack(d*2); sfxdamage(target|d*2); self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Bear Smash,MAX5,,ORANGE,change_power,change_power,,NONE,0,NO,NO,finale,,,,,,,,,,,,self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;
Chew the Scenery_upgraded,Do [sword]<double> damage[;]|lose a dice,2,attack(d*2); sfxdamage(target|d*2); self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Bear Smash,NORMAL,,ORANGE,,,,NONE,0,NO,NO,finale,,,,,,,,,,,,self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;
Chew the Scenery_downgraded,Do [sword]<d6> damage[;]|lose a dice,2,attack(d); sfxdamage(target|d); self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Bear Smash,MAX5,,ORANGE,,,,NONE,0,NO,NO,finale,,,,,,,,,,,,self.extradice--; sfx(~magic_gaindice~); if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;
Star Cauldron,Inflict a random status[;]|get a new dice,1,var rstatus = rand([FIRE|FIRE|ICE|ICE|LOCK|POISON|POISON|SHOCK|SHOCK|WEAKEN|CURSE|~fade~]); inflict(rstatus|1); givedice(); if(rstatus != ~fade~) { sfx(~_~ + rstatus.toLowerCase()); } else { sfx(~_vanish~); } /*status probability revised a little by diane; also threw in fade because why not*/,Stardust,ODD,,PINK,change_power,change_power,,NONE,0,NO,NO,,1,,,,,,,,,,,givedice();
Star Cauldron_upgraded,Add a status[;] reroll dice|,1,var rstatus = rand([FIRE|FIRE|ICE|ICE|LOCK|POISON|POISON|SHOCK|SHOCK|WEAKEN|CURSE|~fade~]); inflict(rstatus|1); givedice(); if(rstatus != ~fade~) { sfx(~_~ + rstatus.toLowerCase()); } else { sfx(~_vanish~); },Stardust,ODD,,PINK,,,,NONE,2,NO,NO,,,,,,,,,,,,,givedice();
Star Cauldron_downgraded,Get a new dice,1,givedice();,Stardust,ODD,,PINK,,,,NONE,0,YES,NO,,,,,,,,,,,,,
[END GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Nine Iron,Deal [sword]<d6> damage|On 6[;] deal [sword]3 more,2,if(d == 6){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_upgraded,Deal [sword]<d6> damage|On even[;] deal [sword]3 more,2,if(d % 2 == 0){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shrug,Gain [shield]4 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]4); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_upgraded,Gain [shield]6 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]6); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_downgraded,Gain [shield]3 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Budge,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Budge_upgraded,Odd: value +1[;] Even: value -1|[grey](3 uses this turn),1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,,,,,3,YES,NO,mf,,,,,,,,,,,,
Budge_downgraded,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Asklepios,Deal [sword]6 damage|Restore [heal]3 health,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_upgraded,Deal [sword]8 damage|Restore [heal]3 health,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_downgraded,Deal [sword]3 damage|Restore [heal]3 health,2,attack(3); sfxdamage(target[;]3); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_upgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_downgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_upgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_downgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Rock Crusher,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,change_power,change_power,,,2,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_upgraded,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,4,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_downgraded,Dice value -1[;]|then split it in two,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Flame Lance,Burn [fire]all dice,1,inflict(FIRE[;]ALL); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_upgraded,Burn [fire]all dice[;] deal [fire]1|damage per dice burned,1,inflict(FIRE[;]ALL); sfx(~_fire~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]FIRE); sfxdamage(target[;]s);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_downgraded,Burn [fire]2 dice,1,inflict(FIRE[;]2); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance,Freeze [ice]all dice,1,inflict(ICE[;]ALL); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_upgraded,Freeze [ice]all dice[;] deal [ice]1|damage per dice frozen,1,inflict(ICE[;]ALL); sfx(~_ice~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]ICE); sfxdamage(target[;]s);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_downgraded,Freeze [ice]2 dice,1,inflict(ICE[;]2); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Minigun,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,change_power,change_power,,none,1,NO,NO,mf,,,,e.usesleft = turn; e.updatereuseabledescription();,,,,,,,,
Minigun_upgraded,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,,,,none,2,NO,NO,mf,,,,e.usesleft = turn+1; e.updatereuseabledescription();,,,,,,,,
Minigun_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Whelm,MAX4,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shielding Potion,Gain [shield]12 shield|[gray](once per battle),2,inflictself(SHIELD[;]12); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_upgraded,Gain [shield]15 shield|[gray](once per battle),2,inflictself(SHIELD[;]15); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_downgraded,Gain [shield]8 shield|[gray](once per battle),2,inflictself(SHIELD[;]8); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Cherry Bomb,Start of turn: deal [sword]5 dmg|[gray](once per battle),1,attack(5); sfxdamage(target[;]5);,Throwing Knife,,,RED,change_power,change_power,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,1,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Cherry Bomb_upgraded,Start of turn: deal [sword]8 dmg|[gray](once per battle),1,attack(8); sfxdamage(target[;]8);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Cherry Bomb_downgraded,Start of turn: deal [sword]1 dmg|[gray](once per battle),1,attack(1); sfxdamage(target[;]1);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Sacridice,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN3,,RED,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Sacridice_upgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN2,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Sacridice_downgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN5,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Precognition,Gain a random blessing|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]self[;]1[;]d); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,change_power,noeffect,,,0,YES,NO,mf,1,,,,,,,,,,donothing();,
Precognition_upgraded,Gain 2 random blessings|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; for(x in [0[;]0]){ var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]target[;]1[;]d); }; sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,mf,,,,,,,,,,,donothing();,
Mass Grimoire,Activate equipment that|can take a single <slotdoubles>,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,2,,,,,,,,,,,
Mass Grimoire_upgraded,Activate items that take <slotdoubles>|,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Mass Grimoire_downgraded,No effect,1,sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Magnum Opus,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Magnum Opus_upgraded,Deal [sword]<d6> damage|Gain [shield]4 shield,1,attack(d); inflictself(SHIELD[;]4); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]4); sfx(~_shield~);
Magnum Opus_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Blood Pact,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Blood Pact_upgraded,Lose [heart]3 health[;] then|drain [heart]<d6> health,1,pierceattackself(3); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4|FREE1,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(3); sfx(~_drain~);
Blood Pact_downgraded,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Push Knife,[sword]2[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(2); sfxdamage(target[;]2); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,change_power,change_power,,,-1,NO,NO,mf,1,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_upgraded,[sword]3[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(3); sfxdamage(target[;]3); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,,,,,-1,NO,NO,mf,,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_downgraded,Deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Megabump,MIN2,,RED,,,,none,-1,NO,NO,mf,,,,,,,,,,,,
Philosopher's Stone,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_upgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX2,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Molten Core,Deal [sword]20 damage|Gain [shield]10 shield,1,attack(20); sfxdamage(target[;]20); sfx(~_magic~); inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,change_power,change_power,,,0,NO,NO,mf,2,,,,,,,,,,,inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);
Molten Core_upgraded,Deal [sword]25 damage|Gain [shield]15 shield,1,attack(25); sfxdamage(target[;]25); sfx(~_magic~); inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);
Molten Core_downgraded,Deal [sword]10 damage|Gain [shield]5 shield,1,attack(10); sfxdamage(target[;]10); sfx(~_magic~); inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);
Magma Storm,[fire]2 dmg to you and enemy|[gray](Reusable),1,attack(2[;]FIRE); sfx(~_fire~); boomerang(2[;]FIRE);,Boom!,COUNTDOWN,2,RED,change_power,change_power,,,-1,NO,NO,mf,1,,,,,,,,,,,
Magma Storm_upgraded,[fire]4 dmg to you and enemy|[gray](Reusable),1,attack(4[;]FIRE); sfx(~_fire~); boomerang(4[;]FIRE);,Boom!,COUNTDOWN,2,RED,,,,,-1,NO,NO,mf,,,,,,,,,,,,
Magma Storm_downgraded,[fire]2 dmg to yourself|[gray](Reusable),1,attackself(2[;]FIRE); sfx(~_fire~);,Boom!,COUNTDOWN,2,RED,,,,,-1,YES,NO,mf,,,,,,,,,,,,
Canesword,Deal [sword]<d6> dmg. On 6[;] next|item has +1 use this turn,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,EVEN,,GREEN,change_power,change_power,reequipnext,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };
Canesword_upgraded,Deal [sword]<d6> dmg. On 6[;] next|item has +1 use this turn,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };
Canesword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Efficiency,EVEN,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Starsword,Deal [sword]<d6> damage. On 6[;]|inflict a random status,2,attack(d); sfxdamage(target[;]d); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Starsword_upgraded,Deal [sword]<d6> damage. On 6[;]|inflict 2x a random status,2,attack(d); sfxdamage(target[;]d); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starsword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Stardust,NORMAL,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Come On And Slam,Deal [sword]<d6> damage[;] on 6[;]|reroll your remaining dice,2,attack(d); sfxdamage(target[;]d); if(d == 6){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };,Clone Device,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };
Come On And Slam_upgraded,Deal [sword]<d6> damage[;] on even[;]|reroll your remaining dice,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };,Clone Device,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,if(d %2 == 0){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };
Come On And Slam_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Clone Device,NORMAL,,BRIGHTCYAN,,,,none,0,NO,NO,,,,,,,,,,,,,
Orb of Discord,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,MAX4,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Orb of Discord_upgraded,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Orb of Discord_downgraded,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,MAX2,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Prestidigitate,Deal [sword]<d6> damage|Roll an extra dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,MIN4,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Prestidigitate_upgraded,Deal [sword]<d6> damage|Roll an extra dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Prestidigitate_downgraded,Deal [sword]<d6> damage|Roll an extra dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,REQUIRE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Keytar,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target[;]d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2);,Zapthwack,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Keytar_upgraded,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target[;]d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2);,Zapthwack,MAX4|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Keytar_downgraded,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target[;]d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~[;]~~[;]0.2);,Zapthwack,MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Baseball Bat,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,MAX5,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Baseball Bat_upgraded,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Baseball Bat_downgraded,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Revoke,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,MAX5,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Revoke_upgraded,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Revoke_downgraded,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,MAX3,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Starburst,Deal [sword]3 damage for each|unique status on enemy,1,var amount = 3; var total = 0; for(x in target.status){ if(!x.invisible){ total+=amount; } }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,EVEN,,PINK,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Starburst_upgraded,Deal [sword]3 damage for each|unique status on enemy,1,var amount = 3; var total = 0; for(x in target.status){ if(!x.invisible){ total+=amount; } }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,NORMAL,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Starburst_downgraded,Deal [sword]2 damage for each|unique status on enemy,1,var amount = 2; var total = 0; for(x in target.status){ if(!x.invisible){ total+=amount; } }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,EVEN,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Staple Gun,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Staple Gun_upgraded,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Staple Gun_downgraded,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Starstaff,Deal [sword]6 damage|Inflict a random status,2,attack(6); sfxdamage(target[;]6); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,8,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Starstaff_upgraded,Deal [sword]6 damage|Inflict 2x random status,2,attack(6); sfxdamage(target[;]6); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,8,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starstaff_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6);,Stardust,COUNTDOWN,8,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Sour Note,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){ inflict(WEAKEN); sfx(~_weaken~); }; givedice(d);,Magic Spanner,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sour Note_upgraded,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){ inflict(WEAKEN); sfx(~_weaken~); }; givedice(d);,Magic Spanner,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Sour Note_downgraded,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){ inflict(WEAKEN); sfx(~_weaken~); }; givedice(d);,Magic Spanner,MAX3|MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Steamstaff,Even turn: [sword]6 dmg + [fire]1|Odd turn: [sword]6 dmg + [ice]1,2,if(turn % 2 == 0){ attack(6); inflict(FIRE); sfx(~_fire~); }else{ attack(6); sfx(~_ice~); inflict(ICE); }; sfxdamage(target[;]6);,Ember,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,if(turn % 2 == 0){ e.changecolour(~RED~); }else{ e.changecolour(~BLUE~); };,,,,,,,,
Steamstaff_upgraded,Even turn: [sword]8 dmg + [fire]1|Odd turn: [sword]8 dmg + [ice]1,2,if(turn % 2 == 0){ attack(8); inflict(FIRE); sfx(~_fire~); }else{ attack(8); sfx(~_ice~); inflict(ICE); }; sfxdamage(target[;]8);,Ember,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,if(turn % 2 == 0){ e.changecolour(~RED~); }else{ e.changecolour(~BLUE~); };,,,,,,,,
Steamstaff_downgraded,Even turn: [sword]3 dmg + [fire]1|Odd turn: [sword]3 dmg + [ice]1,2,if(turn % 2 == 0){ attack(3); inflict(FIRE); sfx(~_fire~); }else{ attack(3); sfx(~_ice~); inflict(ICE); }; sfxdamage(target[;]3);,Ember,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,if(turn % 2 == 0){ e.changecolour(~RED~); }else{ e.changecolour(~BLUE~); };,,,,,,,,
Umbrella,Gain [reduce]1 reduce|Return the dice,1,inflictself(REDUCE); sfx(~_shield~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Pillow Fort,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Umbrella_upgraded,Gain [reduce]1 reduce|Return the dice,1,inflictself(REDUCE); sfx(~_shield~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Pillow Fort,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Umbrella_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,DOUBLES|DOUBLES,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; }; sfx(~_magic~);,Unlimited Limit,MAX3,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal_upgraded,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; }; sfx(~_magic~);,Unlimited Limit,MAX4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal_downgraded,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){ self.limitvalue = self.limitmax; }; sfx(~_magic~);,Unlimited Limit,MAX2,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Waltzer,Deal [sword]3 damage|Repeat this every 3 turns,1,attack(3); sfxdamage(target[;]3); if(simulation) { attack(3); } else { var s = new elements.Skill(~Waltzer Quine~); s.execute(self[;]target); },Whacksies,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Waltzer_upgraded,Deal [sword]3 damage|Repeat this every 2 turns,1,attack(3); sfxdamage(target[;]3); if(simulation) { attack(3); } else { var s = new elements.Skill(~Waltzer Quine Upgraded~); s.execute(self[;]target); },Whacksies,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Waltzer_downgraded,Deal [sword]3 damage|Repeat this every 4 turns,1,attack(3); sfxdamage(target[;]3); if(simulation) { attack(3); } else { var s = new elements.Skill(~Waltzer Quine Downgraded~); s.execute(self[;]target); },Whacksies,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Natural Charm,Roll two dice that|add up to 7,1,givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]]));,Magic Dice,COUNTDOWN,7,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Natural Charm_upgraded,Roll two dice that|add up to 7|[gray](2 uses this turn),1,givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]]));,Magic Dice,COUNTDOWN,7,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Natural Charm_downgraded,Roll a new dice,1,givedice();,Magic Dice,COUNTDOWN,7,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Glue Pact,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,MAX2|MAX2,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Glue Pact_upgraded,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Glue Pact_downgraded,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,REQUIRE2|REQUIRE2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Repast Rapier,Deal [sword]<d6> damage. On 6[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));,Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));
Repast Rapier_upgraded,Deal [sword]<d6> damage. On even[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); };,Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));
Repast Rapier_downgraded,Deal [sword]<d6> damage. On 6[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); };,Regenerate,MIN4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(~healaftercombat~[;]2); sfx(~_cure~); }; self.setvar(~healaftercombat~[;]getstatusself(~healaftercombat~));
Hand Sanitiser,Heal [heal]1[;] and [heal]1 next turn|,1,attackself(-1); sfx(~_heal~); inflictself(~mf_healnextturn~);,Revitalize,COUNTDOWN,3,GREEN,change_power,change_power,,,2,YES,NO,,1,,,,,,,,,,,
Hand Sanitiser_upgraded,Heal [heal]1[;] and [heal]1 next turn|,1,attackself(-1); sfx(~_heal~); inflictself(~mf_healnextturn~);,Revitalize,COUNTDOWN,3,GREEN,,,,,5,YES,NO,,,,,,,,,,,,,
Hand Sanitiser_downgraded,Heal [heal]1[;] and [heal]1 next turn,1,attackself(-1); sfx(~_heal~); inflictself(~mf_healnextturn~);,Revitalize,COUNTDOWN,3,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Plug Socket,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); givedice();,Static Shock,NORMAL,,YELLOW,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Plug Socket_upgraded,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); var da = []; for(x in [0[;]0]){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Static Shock,NORMAL|NORMAL,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Plug Socket_downgraded,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); givedice();,Static Shock,MIN4,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Metal Crusher,Combine dice[;] split|excess into 1s,2,if(d > 6){ var da = [6]; while(d > 6){ da.push(1); d-=1; }; givedice(da); }else{ givedice(d); },Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_upgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){ var da = [6]; while(d > 6){ da.push(1); d-=1; }; givedice(da); }else{ givedice(d); },Magic Spanner,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_downgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){ var da = [6]; while(d > 6){ da.push(1); d-=1; }; givedice(da); }else{ givedice(d); },Magic Spanner,MAX4|MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Wispy Kaboom Smash,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Snake Eyes,,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,,,,,,
Wispy Kaboom Smash_upgraded,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Snake Eyes,,,PURPLE,,,,,-1,NO,NO,,,,,,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,,,,,,
Wispy Kaboom Smash_downgraded,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Snake Eyes,,,PURPLE,,,,,2,NO,NO,,,,,,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,for(mydice in self.dicepool){ if(mydice.basevalue == 1 && mydice.available()){ mydice.animate(~disappear~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); break; }; };,,,,,,
Pinball Machine,Roll a high dice (4-6)[;]|and deal that much damage,1,var r = rand([4[;]5[;]6]); givedice(r); attack(r); sfxdamage(target[;]r);,Magic Dice,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4[;]5[;]6]); givedice(r);
Pinball Machine_upgraded,Roll a high dice (4-6)[;]|and deal [sword]6 damage,1,var r = rand([4[;]5[;]6]); givedice(r); attack(6); sfxdamage(target[;]6);,Magic Dice,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4[;]5[;]6]); givedice(r);
Pinball Machine_downgraded,Roll a high dice (4-6)[;]|and deal [sword]3 damage,1,var r = rand([4[;]5[;]6]); givedice(r); attack(3); sfxdamage(target[;]r);,Magic Dice,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4[;]5[;]6]); givedice(r);
Stop Sign,Deal [sword]6 damage|Lock [lock]1 dice,2,attack(6); sfxdamage(target[;]6); inflict(LOCK); sfx(~_lock~[;]~~[;]0.2);,Padlock,NORMAL|NORMAL,8,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stop Sign_upgraded,Deal [sword]<d6> damage|Lock [lock]1 dice,2,attack(d); sfxdamage(target[;]d); inflict(LOCK); sfx(~_lock~[;]~~[;]0.2);,Padlock,NORMAL|NORMAL,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Stop Sign_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6);,Padlock,NORMAL|NORMAL,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Popcorn,Get two higher|dice next turn,1,var poss = []; for(ad in actualdice){ poss = []; var x = ad.basevalue+1; while(x <= 6){ poss.push(x); x+=1; }; inflictself(~stash~+rand(poss)); inflictself(~illuminate~); }; sfx(~magic_gaindice~);,Magic Dice,MAX5|MAX5,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Popcorn_upgraded,Get two higher|dice next turn|,1,var poss = []; for(ad in actualdice){ poss = []; var x = ad.basevalue+1; while(x <= 6){ poss.push(x); x+=1; }; inflictself(~stash~+rand(poss)); inflictself(~illuminate~); }; sfx(~magic_gaindice~);,Magic Dice,MAX5|MAX5,,YELLOW,,,,,2,YES,NO,,,,,,,,,,,,,
Popcorn_downgraded,Get a higher|dice next turn,1,var poss = []; for(ad in actualdice){ poss = []; var x = ad.basevalue+1; while(x <= 6){ poss.push(x); x+=1; }; inflictself(~stash~+rand(poss)); inflictself(~illuminate~); }; sfx(~magic_gaindice~);,Magic Dice,MAX5,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Sneksword,Deal [sword]<d6> damage|On 6[;] roll two ones,2,attack(d); sfxdamage(target[;]d); if(d == 6){ givedice([1[;]1]); };,Magic Lockpick,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ givedice([1[;]1]); };
Sneksword_upgraded,Deal [sword]<d6> damage|On even[;] roll two ones,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ givedice([1[;]1]); };,Magic Lockpick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){ givedice([1[;]1]); };
Sneksword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Magic Lockpick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Janky Spanner,Roll a 6,1,givedice(6);,Magic Six,MIN2|MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Janky Spanner_upgraded,Roll a 6,1,givedice(6);,Magic Six,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Janky Spanner_downgraded,Combine dice[;] discard excess,1,if(d >= 6){ givedice(6); }else{ givedice(d); };,Magic Six,MIN2|MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Incapacitate,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target[;]4); inflict(~mf_stun~); sfx(~_shock~);,Jackhammer,NORMAL|NORMAL,8,YELLOW,change_power,change_power,stun,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate_upgraded,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target[;]4); inflict(~mf_stun~); sfx(~_shock~);,Jackhammer,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate_downgraded,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target[;]4); inflict(~mf_stun~); sfx(~_shock~);,Jackhammer,REQUIRE4|REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Booster Pack,Roll an extra dice for|every 6 you have,1,var ret = []; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ ret.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; }; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Booster Pack_upgraded,Roll an extra dice for|every 5 or 6 you have,1,var ret = []; for(mydice in self.dicepool){ if(mydice.available() && (mydice.basevalue == 6 # mydice.basevalue == 5)){ ret.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; }; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,,,,none,0,YES,NO,,,,,,,,,,,,,
Booster Pack_downgraded,Roll an extra dice|if you have a 6,1,var ret = []; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ ret = rand([1[;]2[;]3[;]4[;]5[;]6]); }; }; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,,,,none,0,YES,NO,,,,,,,,,,,,,
Poison Thread,Inflict [poison]1 poison|[gray](3 uses this turn),1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN3,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Poison Thread_upgraded,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN3,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Poison Thread_downgraded,Inflict [poison]1 poison,1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Metal Crusher,Combine dice[;] split|excess into 1s,2,if(d > 6){var da = [6]; while(d > 6){da.push(1); d-=1;}; givedice(da);}else{givedice(d);},Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_upgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){var da = [6]; while(d > 6){da.push(1); d-=1;}; givedice(da);}else{givedice(d);},Magic Spanner,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_downgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){var da = [6]; while(d > 6){da.push(1); d-=1;}; givedice(da);}else{givedice(d);},Magic Spanner,MAX4|MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Mitosis,Get 3 copies of a dice,1,givedice([d[;]d[;]d]);,Replicate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Mitosis_upgraded,Get 4 copies of a dice,1,givedice([d[;]d[;]d[;]d]);,Replicate,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Mitosis_downgraded,Get 3 copies of a dice,1,givedice([d[;]d[;]d]);,Replicate,REQUIRE1|REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Fruit Loot,Restore half of your|missing health ([heal]<var:halfmissinghealth>[]),1,attackself(-self.getvar(~halfmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,change_power,change_power,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Fruit Loot_upgraded,Restore 3/4 of your|missing health ([heal]<var:tqmissinghealth>[]),1,attackself(-self.getvar(~tqmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Fruit Loot_downgraded,Restore 1/4 of your|missing health ([heal]<var:qmissinghealth>[]),1,attackself(-self.getvar(~qmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Locktrick,Dice value +1[;] then|split it in two,1,if(d == 6){ givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]])); }else{ givedice(split(d+1)); };,Magic Lockpick,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Locktrick_upgraded,Dice value +1[;] then|split it in two,1,if(d == 6){ givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]])); }else{ givedice(split(d+1)); };,Magic Lockpick,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Locktrick_downgraded,Split a dice in two,1,givedice(split(d));,Magic Lockpick,ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rockfall,Roll two dice that are|lower than <d6>,1,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice([rand(t)[;]rand(t)]); };,Magic Dice,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rockfall_upgraded,Roll three dice that are|lower than <d6>,1,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice([rand(t)[;]rand(t)[;]rand(t)]); };,Magic Dice,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rockfall_downgraded,Roll a dice that is|lower than <d6>,1,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };,Magic Dice,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Plague Stave,Deal [sword]6 damage|Inflict [poison]2 poison,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Plague Stave_upgraded,Deal [sword]8 damage|Inflict [poison]2 poison,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Plague Stave_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Demote,Dice value -3,1,givedice(d-3);,Magic Dice,MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Demote_upgraded,1-3: Dice value +3|4-6: Dice value -3,1,if(d>3){ givedice(d-3); }else{ givedice(d+3); };,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Demote_downgraded,Dice value -3,1,givedice(d-3);,Magic Dice,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Iron Fist,Deal [sword]<d6> damage|Gain [shield]<d6> shield,2,sfx(~_shield~); attack(d[;]SHIELD); inflictself(SHIELD[;]d); sfxdamage(target[;]d);,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|d); sfx(~_shield~);
Iron Fist_upgraded,Deal [sword]<d6> damage|Gain [shield]<d6> shield,2,sfx(~_shield~); attack(d|SHIELD); inflictself(SHIELD[;]d); sfxdamage(target[;]d);,Barricade,MAX3|FREE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|d); sfx(~_shield~);
Iron Fist_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Barricade,MAX3,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Rusty Shield,Gain [shield]<d6> shield[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rusty Shield_upgraded,Gain [shield]<d6> shield[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Barricade,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Rusty Shield_downgraded,Gain [shield]<d6> shield,2,inflictself(SHIELD[;]d); sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Drumkit,[sword]5 damage + [weaken]1 weaken|,1,attack(5); sfxdamage(target|5); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Drumkit_upgraded,[sword]7 damage + [weaken]1 weaken|,1,attack(7); sfxdamage(target|7); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Drumkit_downgraded,[sword]3 damage + [weaken]1 weaken|,1,attack(3); sfxdamage(target|3); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Burner Phone,Roll 3 new dice|[gray](once per battle),1,var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,,
Burner Phone_upgraded,Roll 4 new dice|[gray](once per battle),1,var da = []; for(x in 0...4){da.push(rand([1|2|3|4|5|6]));}; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,YES,,,,,,,,,,,,,
Burner Phone_downgraded,Roll 2 new dice|[gray](once per battle),1,var da = []; for(x in 0...2){da.push(rand([1|2|3|4|5|6]));}; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,YES,,,,,,,,,,,,,
Energy Drink,Roll 3 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Energy Drink_upgraded,Roll 4 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...4){da.push(rand([1|2|3|4|5|6]));}; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Energy Drink_downgraded,Roll 2 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...2){da.push(rand([1|2|3|4|5|6]));}; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Blastdice Potion,Deal [fire]10 dmg + [fire]1 burn|Lose a dice this fight,1,attack(10|FIRE); sfxdamage(target|10); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Blastdice Potion_upgraded,Deal [fire]13 dmg + [fire]1 burn|Lose a dice this fight,1,attack(13|FIRE); sfxdamage(target|13); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Blastdice Potion_downgraded,Deal [fire]7 dmg + [fire]1 burn|Lose a dice this fight,1,attack(7|FIRE); sfxdamage(target|7); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Gavel,Deal [shock]<d6> damage|Shock [shock]2 items,1,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gavel_upgraded,[shock]<d6> damage[;] shock [shock]2|,1,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,,,,,2,NO,NO,,,,,,,,,,,,,
Gavel_downgraded,Shock [shock]2 items,1,inflict(SHOCK[;]2); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Inspiring Tune,Restore [heal]5 health,2,attackself(-5); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,finale,,,,,,,,,,,,
Inspiring Tune_upgraded,Restore [heal]8 health,2,attackself(-8); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Inspiring Tune_downgraded,Restore [heal]2 health,2,attackself(-2); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Have a Ball,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4|MAX4|MAX4,,ORANGE,change_power,change_power,,none,2,NO,NO,finale,,,,,,,,,,,,
Have a Ball_upgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4,,ORANGE,,,,none,8,NO,NO,finale,,,,,,,,,,,,
Have a Ball_downgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4|MAX4|MAX4,,ORANGE,,,,none,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,REQUIRE1,,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck_upgraded,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,ODD,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck_downgraded,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,REQUIRE1|REQUIRE1,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Star of the Show,Inflict a random status|[gray](Reuseable),2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,change_power,change_power,,,-1,NO,NO,finale,,,,,,,,,,,,
Star of the Show_upgraded,Inflict 2x a random status|[gray](Reuseable),2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Star of the Show_downgraded,Inflict a random status,2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Emergency Barricade,Gain [shield]1 shield|[gray](Reuseable),2,inflictself(SHIELD); sfx(~_shield~);,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,-1,NO,NO,finale,,,,,,,,,,,,
Emergency Barricade_upgraded,Gain [shield]1[;] heal [heal]1|[gray](Reuseable),2,inflictself(SHIELD); attackself(-1); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.3);,Magic Dice,NORMAL,,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Emergency Barricade_downgraded,Gain [shield]1 shield|[gray](Reuseable),2,inflictself(SHIELD); sfx(~_shield~);,Magic Dice,EVEN,,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Battle Sax,Deal [weaken]<double> damage|Weaken [weaken]1 item,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~); inflict(WEAKEN);,Burrower,MAX3,,ORANGE,change_power,change_power,weaken,,0,NO,NO,finale,,,,,,,,,,,,
Battle Sax_upgraded,Deal [weaken]<double> damage|Weaken [weaken]2 items,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~); inflict(WEAKEN[;]2);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Battle Sax_downgraded,Deal [weaken]<double> damage,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Nanobots,Gain [shield]<d6> shield|Gain 1 more if at [shield]0 shield,1,if(getstatusself(SHIELD) == 0){ inflictself(SHIELD[;]d + 1); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Nanobots_upgraded,Gain [shield]<d6> shield|Gain double if at [shield]0 shield,1,if(getstatusself(SHIELD) == 0){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Nanobots_downgraded,Gain [shield]<d6> shield,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Exoskeleton,Gain [shield]2 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,removestatusself(SHIELD|getstatusself(~shielddown~)); removestatusself(~shielddown~|ALL);,,,,if(target.hp > 0){inflictself(SHIELD|2); sfx(~_shield~); inflictself(~shielddown~|2);};,,,,
Exoskeleton_upgraded,Gain [shield]3 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,,,,,0,NO,NO,,,,,removestatusself(SHIELD|getstatusself(~shielddown~)); removestatusself(~shielddown~|ALL);,,,,if(target.hp > 0){inflictself(SHIELD|3); sfx(~_shield~); inflictself(~shielddown~|3);};,,,,
Exoskeleton_downgraded,Gain [shield]1 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,,,,,0,NO,NO,,,,,removestatusself(SHIELD|getstatusself(~shielddown~)); removestatusself(~shielddown~|ALL);,,,,if(target.hp > 0){inflictself(SHIELD|1); sfx(~_shield~); inflictself(~shielddown~|1);};,,,,
Starstream,Each attack of [sword]4 or more|also inflicts a random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,change_power,change_power,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 3 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Starstream_upgraded,Each attack of [sword]4 or more|also inflicts 2x random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,,,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 3 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Starstream_downgraded,Each attack of [sword]8 or more|also inflicts a random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,,,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 7 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Auto Turret,Deal [sword]3 damage at the|start of each turn,1,attack(3); sfxdamage(target[;]3);,Bubble Gun,,,RED,change_power,change_power,,none,0,NO,NO,nomidturnsummon,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Auto Turret_upgraded,Deal [sword]4 damage at the|start of each turn,1,attack(4); sfxdamage(target[;]4);,Bubble Gun,,,RED,,,,none,0,NO,NO,nomidturnsummon,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Auto Turret_downgraded,Deal [sword]2 damage at the|start of each turn,1,attack(2); sfxdamage(target[;]2);,Bubble Gun,,,RED,,,,none,0,NO,NO,nomidturnsummon,,,,,if(e.isready()) e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]false);,,,,,,,
Pea Pod,Gain [mana]1 mana|[gray](Reusable),1,inflictself(MANA[;]1); sfx(~_mana~);,,COUNTDOWN,5,GREEN,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Pea Pod_upgraded,Gain [mana]2 mana|[gray](Reusable),1,inflictself(MANA[;]2); sfx(~_mana~);,,COUNTDOWN,5,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Pea Pod_downgraded,Gain [mana]1 mana|[gray](Reusable),1,inflictself(MANA); sfx(~_mana~);,,COUNTDOWN,5,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Bloodroot,Drain [heart]2 health. If above|half health[;] gain [mana]1 mana,1,drain(2); sfx(~_drain~); if(self.hp >= self.maxhp/2){ inflictself(MANA); sfx(~_mana~); };,,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(self.hp >= self.maxhp/2){ inflictself(MANA); sfx(~_mana~); };
Bloodroot_upgraded,Drain [heart]2 health|Gain [mana]1 mana,1,drain(2); sfx(~_drain~); inflictself(MANA); sfx(~_mana~);,,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(MANA); sfx(~_mana~);
Bloodroot_downgraded,Drain [heart]2 health,1,drain(2); sfx(~_drain~);,,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Coffee Bean,Gain [mana]1 mana|Roll a new dice,1,inflictself(MANA); givedice(); sfx(~_mana~);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Coffee Bean_upgraded,Gain [mana]2 mana|Roll a new dice,1,inflictself(MANA[;]2); givedice(); sfx(~_mana~);,,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Coffee Bean_downgraded,Roll a new dice,1,givedice();,,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Pear Spear,Restore [heal]4 health|Gain [mana]1 mana,1,pierceattackself(-4); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE6,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Pear Spear_upgraded,Restore [heal]6 health|Gain [mana]1 mana,1,pierceattackself(-6); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pear Spear_downgraded,Restore [heal]2 health|Gain [mana]1 mana,1,pierceattackself(-2); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Carnation,Cost [mana]3: [sword]<triple> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,,MAX4,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Carnation_upgraded,Cost [mana]3: [sword]<triple> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Carnation_downgraded,Cost [mana]3: [sword]<d6> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Swingset,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<d6> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d);,,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d); sfx(~_thinghappens~[;]~~[;]0.2);
Swingset_upgraded,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<double> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d*2);,,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d*2); sfx(~_thinghappens~[;]~~[;]0.2);
Swingset_downgraded,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<d6> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d);,,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d); sfx(~_thinghappens~[;]~~[;]0.2);
[END FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Power Glove,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX4,,ORANGE,change_requirements,change_function,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_upgraded,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_downgraded,Do [sword]<d6> damage|[80%][gray]''It's so bad!''[],1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Innovate,Get a dice you don't have,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,ncr,2,,,,,,,,,,,
Innovate_upgraded,Get a dice you don't have|,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Innovate_downgraded,Get a 4[;] if you don't have one,1,var flag = true; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue == 4) { flag = false; } } if (flag == false) { givedice(d); self.textparticle(~You've got a 4!~); } else { givedice(4); },Reroll,NORMAL,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector,Gain [shield]2 shield|[gray](single usen't),1,inflictself(SHIELD[;]2); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,change_power,change_power,,,4,YES,NO,ncr,1,,,,,,,,,,,
Pocket Protector_upgraded,Gain [shield]3 shield|[gray](single usen't),1,inflictself(SHIELD[;]3); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector_downgraded,Gain [shield]1 shield|[gray](single usen't),1,inflictself(SHIELD[;]1); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Dime,Roll 2 sixes,2,givedice([6[;]6]); /* 'dime a dozen' */,Rollout,EVEN|EVEN,,GREEN,change_power,change_power,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_downgraded,Roll 2 sixes,2,givedice([6[;]6]);,Rollout,REQUIRE6|EVEN,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_upgraded,Roll 2 sixes|,2,givedice([6[;]6]);,Rollout,EVEN|EVEN,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Sickle,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]1 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,reducesize,change_power,,none,0,NO,NO,ncr|excludefromrandomlists,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Sickle_downgraded,Do [shock]<d6> damage,2,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr|excludefromrandomlists,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_weakened,Do [shock]<d6> damage,1,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr|excludefromrandomlists,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_deckupgrade,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]2 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK[;]2); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr|excludefromrandomlists,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Lightreaver,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Lightreaver_upgraded,Deal [sword]<d6> damage. On even[;]|copy a dice for next turn,1,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Lightreaver_downgraded,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,REQUIRE4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket,Get a new dice[;]|inflict [lock]Lock,1,givedice(); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Locket_upgraded,Get a new dice[;] do [sword]2[;]|inflict [lock]Lock,1,givedice(); attack(2); sfxdamage(target[;]2); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket_downgraded,Inflict [lock]Lock,1,inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Biohazard,Inflict [poison]<d6> poison|[gray](once per battle),2,inflict(POISON[;]d); sfx(~_poison~);,Anthrax,NORMAL,,PURPLE,change_power,complicate,,,0,NO,YES,ncr,,,,,,,,,,,,
Biohazard_upgraded,Inflict [poison]<d6> poison|[gray](cooldown of 3 turns),2,inflict(POISON[;]d); e.setvar(~biocooldown~[;]3); sfx(~_poison~);,Anthrax,NORMAL,,PURPLE,,,,,0,NO,NO,ncr,,e.setvar(~biocooldown~[;]0);,e.setvar(~biocooldown~[;]0);,if(e.getvar(~biocooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = ~On cooldown~; e.unavailabledetails = [~Available in ~ + e.getvar(~biocooldown~) + ~turns.~]; e.setvar(~biocooldown~[;]e.getvar(~biocooldown~) - 1); },,,,,,,,
Silver Sword,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target[;]d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { inflict(VAMPIRE); target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } },,,,,,,,,,
Silver Sword_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target[;]d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { inflict(VAMPIRE); target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } },,,,,,,,,,
Silver Sword_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target[;]d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { inflict(VAMPIRE); target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } },,,,,,,,,,
Technology,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A little overbearing sometimes''[],1,attack(d); sfxdamage(target[;]d);,Emulator,MAX4,,YELLOW,change_power,change_function,,,0,NO,NO,ncr,1,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,if(target.hp > 0) { var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } } },,,,
Technology_upgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A modern quasi-religion''[],1,attack(d); sfxdamage(target[;]d);,Emulator,NORMAL,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,if(target.hp > 0) { var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } } },,,,
Technology_downgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''Technology works.''[],1,attack(d); sfxdamage(target[;]d);,Emulator,MAX4,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,if(target.hp > 0) { var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } } },,,,
Smoke Signal,Stash dice for next|turn[;] then return it,1,inflictself(~stash~+d[;]1); inflictself(~illuminate~); givedice(d);,Light Switch,MIN4,,RED,simplify,complicate,,,0,YES,NO,ncr,1,,,,,,,,,,,
Loud Yelling,Weaken [weaken]2 equipment,1,inflict(WEAKEN[;]2);,Scream,REQUIRE5,,ORANGE,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Yelling_downgraded,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Scream,REQUIRE5,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Loud Brostep,Shock [shock]2 equipment,1,inflict(SHOCK[;]2);,Electrify,REQUIRE5,,YELLOW,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Brostep_downgraded,Shock [shock]1 equipment,1,inflict(SHOCK);,Electrify,REQUIRE5,,YELLOW,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Raw Energy,Do [vanish]<d6> damage[;]|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); /*inferno*/,Delude,NORMAL|NORMAL,,PINK,change_power,complicate,,,0,NO,NO,ncr,1,,,,,,,,,,,
Raw Energy_upgraded,Do [vanish]<d6> damage[;]|Inflict [vanish]2 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]2);,Delude,NORMAL|NORMAL,,PINK,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sheer Will,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); bonus(1000); /*burning light*/,Delude,MIN4,,PINK,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Sheer Will_downgraded,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~);,Delude,MAX3,,PINK,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop,Do [sword]3 damage. On 6[;]|drain [heart]2 health instead,1,if(d == 6) { drain(2); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); } /*originally 'on snap; drain 2 health instead' but you will not believe how difficult it is to *replace* the effect of a card on snap rather than adding to it: github.com/TerryCavanagh/diceydungeons.com/issues/1889*/,Rejuvenate,MIN3,,PINK,change_power,change_power,,none,0,NO,NO,ncr,1,,,,,,,,,,,
Bop Bop_upgraded,Do [sword]3 damage. On 6[;]|drain [heart]3 health instead,1,if(d == 6) { drain(3); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop_downgraded,Do [sword]3 damage. On 6[;]|heal [heart]2 health instead,1,if(d == 6) { attackself(-2); sfx(~_heal~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,if(d == 6) { e.castdirection = -1; } else { e.castdirection = 1; },,,if(d == 6) { attackself(-2); sfx(~_heal~); }
Ephemeral Axe,Do [sword]<double> damage|[gray](once per battle),1,attack(d / 0.5); sfxdamage(target[;]d / 0.5); /*every day it becomes stranger and stranger that i've never touched drugs in my life*/,Fury,MAX5,,PURPLE,simplify,complicate,,,0,NO,YES,ncr,1,,,,,,,,,,,
Boiling Cauldron,Take [fire]2 damage[;]|get 2 new dice,1,attackself(2[;]FIRE); sfxdamage(self[;]2); sfx(~_fire~); givedice([for(i in 0...2) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,change_power,change_power,,,0,YES,NO,ncr,1,,,,,,,,,,,
Boiling Cauldron_upgraded,Take [fire]3 damage[;]|get 3 new dice,1,attackself(3[;]FIRE); sfxdamage(self[;]3); sfx(~_fire~); givedice([for(i in 0...3) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Boiling Cauldron_downgraded,Take [fire]1 damage[;]|get a new dice,1,attackself(1[;]FIRE); sfxdamage(self[;]1); sfx(~_fire~); givedice();,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Polarized Cauldron,Do [sword]1 damage|Get a dice of different parity,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_upgraded,Do [sword]1 damage|Get a dice of different parity|,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Pulsing Cauldron,Do [sword]1 damage|On low (1-3)[;] get a high dice|On high (4-6)[;] get a low dice,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_upgraded,Do [sword]1 damage|On 1-3[;] get 4-6. On 4-6[;] get 1-3|,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sparkthrower,Do [sword]2 damage|[shock]<timesused> shock[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(SHOCK[;]e.timesused + 1);,Electrify,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,ncr|excludefromrandomlists,1,,,,,,,,,,,
Sparkthrower_downgraded,Do [sword]1 damage|[shock]<timesused> shock[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(SHOCK[;]e.timesused + 1);,Electrify,NORMAL,,GREEN,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Sparkthrower_upgraded,Do [sword]3 damage|[shock]<timesused> shock[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(SHOCK[;]e.timesused + 1);,Electrify,NORMAL,,GREEN,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Earsplitter,Do [sword]2 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(WEAKEN[;]e.timesused + 1);,Scream,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,ncr|excludefromrandomlists,1,,,,,,,,,,,
Earsplitter_downgraded,Do [sword]1 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(WEAKEN[;]e.timesused + 1);,Scream,NORMAL,,PURPLE,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Earsplitter_upgraded,Do [sword]3 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(WEAKEN[;]e.timesused + 1);,Scream,NORMAL,,PURPLE,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Silver Sword@witch,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,witchonly|ncr,2,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword?@witch,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,ODD|FREE5,,GRAY,change_power,change_power,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,2,,,,,,,,,,,
Silver Sword?@witch_downgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,REQUIRE5|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
Silver Sword?@witch_upgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,FREE5|ODD|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
Glue Gun,[lock]Counter a random dice|that's not countered yet|,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,COUNTDOWN,5,PURPLE,change_power,change_power,,none,3,NO,NO,ncr,,,,,,,,,,,,
Glue Gun_upgraded,[lock]Counter a random dice|that's not countered yet|,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,COUNTDOWN,5,PURPLE,,,,none,6,NO,NO,ncr,,,,,,,,,,,,
Glue Gun_downgraded,[lock]Counter a random dice|that's not countered yet|,1,var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,COUNTDOWN,5,PURPLE,,,,none,2,NO,NO,ncr,,,,,,,,,,,,
Flamebringer,Do [sword]2 damage|Last use: +[fire]4 burn|,1,attack(2); sfxdamage(target[;]2); if(e.usesleft == 0) { inflict(FIRE[;]4); sfx(~_fire~[;]~~[;]0.2); },Heat Ray,COUNTDOWN,4,RED,change_power,change_power,,,4,NO,NO,ncr,1,,,,,,,,,,,
Flamebringer_downgraded,Do [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Heat Ray,COUNTDOWN,4,RED,,,,,4,NO,NO,ncr,,,,,,,,,,,,
Flamebringer_upgraded,Do [sword]3 damage|Last use: +[fire]4 burn|,1,attack(3); sfxdamage(target[;]3); if(e.usesleft == 0) { inflict(FIRE[;]4); sfx(~_fire~[;]~~[;]0.2); } /*attack(2); if(e.usesleft == 0) { attack(8[;]FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]10); } else { sfxdamage(target[;]2); }*/,Heat Ray,COUNTDOWN,4,RED,,,,,4,NO,NO,ncr,,,,,,,,,,,,
Spin Attack,Do [sword]<d6> damage. On 6[;]|[lock]counter a random dice|that's not countered yet,2,attack(d); sfxdamage(target[;]d); if(d == 6) { var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~[;]~~[;]0.2); } },Copyright Strike,NORMAL,,PURPLE,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Spin Attack_downgraded,Do [sword]<d6> damage. On 6[;]|[lock]counter the lowest dice|that's not countered yet,2,attack(d); sfxdamage(target[;]d); if(d == 6) { var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + availablecounters[0]); sfx(~_lock~[;]~~[;]0.2); } },Copyright Strike,NORMAL,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Spin Attack_upgraded,Do [sword]<d6> damage. On 6[;]|[lock]counter the highest dice|that's not countered yet,2,attack(d); sfxdamage(target[;]d); if(d == 6) { var availablecounters = [1[;]2[;]3[;]4[;]5[;]6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + availablecounters[availablecounters.length - 1]); sfx(~_lock~[;]~~[;]0.2); } },Copyright Strike,NORMAL,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Tootsie Pop,Reroll the dice. On 6[;]|instead return two 6s,2,if(d == 6) givedice([6[;]6]); else givedice();,Megabump,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tootsie Pop_upgraded,Roll a higher dice. On 6[;]|instead return two 6s,2,if(d >= 6) givedice([6[;]6]); else givedice(rand([6[;]5[;]4[;]3[;]2[;]1].splice(0[;]6-d))); /*awful. who wrote this*/,Megabump,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Tootsie Pop_downgraded,Reroll the dice. On 6[;]|instead return two 1s,2,if(d == 6) givedice([1[;]1]); else givedice();,Megabump,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Deadbolt,Do [sword]6 damage[;]|50% chance to [lock]Lock,2,attack(6); var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { inflict(LOCK); sfx(~_lock~); self.textparticle(~Success!~); },Copyright Strike,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Deadbolt_upgraded,Do [sword]6 damage[;]|if filled perfectly[;] [lock]Lock,2,var dicehistory = runscript(~getfixeddh~[;][e]); attack(6); var sum = 0; for (i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; } if (sum == e.countdown) { inflict(LOCK); sfx(~_lock~); self.textparticle(~Success!~); },Copyright Strike,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,e.setvar(~sourceequipment~[;]e);,e.resetvar(~sourceequipment~); e.resetvar(~dicehistory~);,e.setvar(~sourceequipment~[;]e);,,,,,,,runscript(~fixfurydh~[;][e]);,
Deadbolt_downgraded,Do [sword]6 damage,2,attack(6); /*var sfxdone = false; var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { inflict(LOCK); sfx(~_lock~); sfxdone = true; } odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { inflictself(LOCK); if(!sfxdone) { sfx(~_lock~); } } */,Copyright Strike,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Saving Throw,Get a new dice. On 1[;]|get a dice over 3,1,if(d == 1) { givedice(rand([4[;]5[;]6])); } else givedice();,Double Whammy,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Saving Throw_upgraded,Get a dice over 3,1,givedice(rand([4[;]5[;]6]));,Double Whammy,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Saving Throw_downgraded,Get a new dice. On 1[;]|get a dice 3 or less,1,if(d == 1) { givedice(rand([1[;]2[;]3])); } else givedice();,Double Whammy,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Bonecrusher,Deal [sword]<d6> damage. On 4[;]|[curse]Curse the enemy,1,attack(d); sfxdamage(target[;]d); if(d == 4) inflict(CURSE);,Cackle,MAX4,,GRAY,change_power,change_function,,,0,NO,NO,,2,,,,,,,,,,,
Bonecrusher_upgraded,Deal [sword]<d6> damage. On even[;]|[curse]Curse the enemy,1,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) inflict(CURSE);,Cackle,MAX4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Bonecrusher_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Cackle,MAX4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Veneer,Charge limit break by [confuse]2,1,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 2; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },Magic Six,NORMAL,,ORANGE,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Veneer_upgraded,Charge limit break by [confuse]3,1,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 3; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },Magic Six,NORMAL,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Veneer_downgraded,Charge limit break by [confuse]1,1,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 1; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } /*ultimately i quite like what i'd ended up with for ncr jester. by settling for bop bop draining on 6 rather than on snap; it essentially takes on the roles of bop *and* sweets both at once while not being redundant to zoop zoop (since zoop zoop does less damage on 4s and 5s); which allows me to replace sweets with an item that doesn't heal whatsoever. also; ncr almost entirely outdoes vanilla pack with snap (and pu pack if you don't copy kapow) since heal doubles as damage; zoop zoop does 6 damage when snapped; and your limit gets charged *again*; but zoop zoop+ isn't nearly as strong as boop+ or kapow+; which balances it somewhat*/,Magic Six,NORMAL,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Sceptre,Deal [vanish]6 damage|Inflict [vanish]1 vanish,2,sfxdamage(target[;]6); attack(6[;] VANISH); inflict(~fade~); /*staff*/,Hadoken,COUNTDOWN,8,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sceptre_downgraded,Deal [vanish]3 damage|Inflict [vanish]1 vanish,2,sfxdamage(target[;]3); attack(3[;] VANISH); inflict(~fade~);,Hadoken,COUNTDOWN,8,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Sceptre_upgraded,Deal [vanish]8 damage|Inflict [vanish]1 vanish,2,sfxdamage(target[;]8); attack(8[;] VANISH); inflict(~fade~);,Hadoken,COUNTDOWN,8,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Revolver,Do damage equal to|2x excess value inserted,2,var dicehistory = e.dicehistory; var sum = 0; for(i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; if(sum >= e.countdown) { break; } } if(sum - e.countdown > 0) { attack(2 * (sum - e.countdown)); sfx(~_fire~[;]~~[;]0.1); sfxdamage(2 * (sum - e.countdown)); } else self.textparticle(~No effect!~);,Dice Bash,COUNTDOWN,6,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Revolver_upgraded,Do damage equal to|2x excess value inserted,1,var dicehistory = e.dicehistory; var sum = 0; for(i in 0...dicehistory.length) { sum += dicehistory[i].basevalue; if(sum >= e.countdown) { break; } } if(sum - e.countdown > 0) { attack(2 * (sum - e.countdown)); sfx(~_fire~[;]~~[;]0.1); sfxdamage(2 * (sum - e.countdown)); } else self.textparticle(~No effect!~);,Dice Bash,COUNTDOWN,6,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Revolver_downgraded,Do [sword]6 damage,2,attack(6); sfx(~_fire~[;]~~[;]0.1);,Dice Bash,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Revolver_weakened,Do [sword]6 damage,1,attack(6); sfx(~_fire~[;]~~[;]0.1);,Dice Bash,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flicker,Vanish [vanish]1 duplicate dice,1,inflict(~fade~); sfx(~_vanish~);,Delude,EVEN,,PINK,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Stockpick,Split a dice in two[;]|repeat in [jinx]2 turns,2,givedice(split(d)[;]~splitdice~); jinx(~Stockpick~[;]~split a %VAR% in two~[;]~Split a %VAR% in two~[;]~var dicelist = split(%VAR%); inflict(\~stash\~ + dicelist[0]); inflict(\~stash\~ + dicelist[1]); inflict(\~illuminate\~); sfx(\~splitdice\~);~[;]self[;]self[;]2[;]d);,Light Switch,NORMAL,,PINK,change_power,change_function,,_thinghappens,0,YES,NO,,,,,,,,,,,,,
Stockpick_upgraded,Split dice[;] repeat in [jinx]2 turns|On 6[;] boost Jinxes by 1 turn,2,givedice(split(d)[;]~splitdice~); jinx(~Stockpick~[;]~split a %VAR% in two~[;]~Split a %VAR% in two~[;]~var dicelist = split(%VAR%); inflict(\~stash\~ + dicelist[0]); inflict(\~stash\~ + dicelist[1]); inflict(\~illuminate\~); sfx(\~splitdice\~);~[;]self[;]self[;]2[;]d); if(d == 6) { boostjinxcountdowns(self[;] 1); boostjinxcountdowns(target[;] 1); },Light Switch,NORMAL,,PINK,,,,_thinghappens,0,YES,NO,,,,,,,,,,,,,
Stockpick_downgraded,Split a dice in two,2,givedice(split(d)[;]~splitdice~);,Light Switch,NORMAL,,PINK,,,,_thinghappens,0,YES,NO,,,,,,,,,,,,,
Plasma Rifle,Do [sword]5 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(5); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,10,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Plasma Rifle_upgraded,Do [sword]5 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(5); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,7,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Plasma Rifle_downgraded,Do [sword]3 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(3); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,10,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Plasma Rifle_weakened,Do [sword]3 damage[;] return|the first dice put in this,1,var dicehistory = e.dicehistory; attack(3); sfx(~_damage~[;]~~[;]0.1); sfx(~_plasma~); givedice(dicehistory[0].basevalue);,Dice Bash,COUNTDOWN,7,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Compact Resonator,Do [weaken]<double> damage. Passive:|[weaken]weaken yourself when you|use a card on the enemy,1,attack(d * 2[;]WEAKEN); sfxdamage(target[;]d * 2);,Burrower,MAX5,,ORANGE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,inflictself(~ncr_restraint_all~); e.animate(~flashandshake~);,,,,,,,
Compact Resonator_upgraded,Do [weaken]<double> dmg. Passive:|[weaken]weaken yourself when you|use a card on the enemy,1,attack(d * 2[;]WEAKEN); sfxdamage(target[;]d * 2);,Burrower,MAX5|FREE1,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,inflictself(~ncr_restraint_all~); e.animate(~flashandshake~);,,,,,,,
Jester's Glove,Take [sword]<d6> damage|Snap an item next turn,1,attackself(d); sfxdamage(self[;]d); jinx(~Jester's Glove~[;]~[glove]snap an equipment~[;]~[glove]Snap an equipment~[;]~inflict(\~ncr_snap\~); sfx(\~jester_snap\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~[;]~~[;]0.15);,Improvise,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Jester's Glove_upgraded,Take [sword]<d6> damage|Snap an item next turn|On 6[;] take no damage,1,if(d != 6) { attackself(d); sfxdamage(self[;]d); } jinx(~Jester's Glove~[;]~[glove]snap an equipment~[;]~[glove]Snap an equipment~[;]~inflict(\~ncr_snap\~); sfx(\~jester_snap\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~[;]~~[;]d != 6 ? 0.15 : 0);,Improvise,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Jester's Glove_downgraded,Take [sword]<d6> damage|Snap an item next turn,1,attackself(d); sfxdamage(self[;]d); jinx(~Jester's Glove~[;]~[glove]snap an equipment~[;]~[glove]Snap an equipment~[;]~inflict(\~ncr_snap\~); sfx(\~jester_snap\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~[;]~~[;]0.15);,Improvise,MIN3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Eternal Cauldron,Do [sword]1 damage[;] reroll dice|30% chance to fail|[gray](Reuseable),1,if(!chance(30)) { givedice(); attack(1); sfxdamage(target[;]1); } else { self.textparticle(~No effect!~); },Rollout,NORMAL,,GRAY,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,if(!chance(30)) { givedice(); } else { self.textparticle(~No effect!~); }
Eternal Cauldron_upgraded,Do [sword]1 damage[;] reroll dice|15% chance to fail|[gray](Reuseable),1,if(!chance(15)) { givedice(); attack(1); sfxdamage(target[;]1); } else { self.textparticle(~No effect!~); },Rollout,NORMAL,,GRAY,,,,,-1,NO,NO,,,,,,,,,,,,,if(!chance(15)) { givedice(); } else { self.textparticle(~No effect!~); }
Eternal Cauldron_downgraded,Reroll the dice|30% chance to fail|[gray](Reuseable),1,if(!chance(30)) { givedice(); } else { self.textparticle(~No effect!~); },Rollout,NORMAL,,GRAY,,,,,-1,YES,NO,,,,,,,,,,,,,
Two Handed Spatula,Flip both dice upside down,2,givedice([7 - actualdice[0].basevalue[;]7 - actualdice[1].basevalue]);,Omegaflip,NORMAL|NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Two Handed Spatula_downgraded,Flip both dice upside down,2,givedice([7 - actualdice[0].basevalue[;]7 - actualdice[1].basevalue]);,Omegaflip,MAX3|MIN4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Two Handed Spatula_upgraded,Flip both dice upside down|,2,givedice([7 - actualdice[0].basevalue[;]7 - actualdice[1].basevalue]);,Omegaflip,NORMAL|NORMAL,,GREEN,,,,none,2,YES,NO,,,,,,,,,,,,,
Contact Juggling,Do [sword]<d6>[;] return dice[;]|reroll a random dice,1,attack(d); sfxdamage(target[;]d); var availdice = []; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); } givedice(d);,Proximity Mine,MAX3,,YELLOW,increaserange,change_power,,,0,NO,NO,,1,,,,,,,,,,,var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()); } givedice(d);
Contact Juggling_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Proximity Mine,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Two Handed Spike,Even total: Do [sword]<d6>|Odd total: Gain [shield]<d6>|[gray](once per battle),1,if(d%2 == 0){ attack(d); sfx(~_shield~); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },Pillow Fort,NORMAL|NORMAL,,RED,change_power,complicate,,none,0,YES,YES,,,,,,,,,,if(d % 2 == 0) { e.castdirection = 1; } else { e.castdirection = -1; },,,
Two Handed Spike_upgraded,Even total: Gain [shield]<d6>|Odd total: Do [sword]<d6>|[gray](once per battle),1,if(d%2 == 1){ attack(d); sfx(~_shield~); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },Pillow Fort,NORMAL|NORMAL,,RED,,,,none,0,YES,YES,,,,,,,,,,if(d % 2 == 1) { e.castdirection = 1; } else { e.castdirection = -1; },,,
Proton Pack,[vanish]<d6> dmg[;] +[vanish]2 vanish|[gray](once per battle),1,if(target.name == ~Wisp~) { d = 999; } sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]2); /*flamethrower*/,Hadoken,NORMAL|NORMAL,,PINK,change_power,complicate,,,0,NO,YES,,,if(target.name == ~Wisp~) { target.innate.push(~is weak to proton packs~); },,,,,,,,,,
Proton Pack_upgraded,[vanish]<d6> dmg[;] +[vanish]4 vanish|[gray](once per battle),2,if(target.name == ~Wisp~) { d = 999; } sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]4);,Hadoken,NORMAL|NORMAL|NORMAL|NORMAL,,PINK,,,,,0,NO,YES,,,if(target.name == ~Wisp~) { target.innate.push(~is weak to proton packs~); },,,,,,,,,,
Stopwatch,At start of turn[;] [lock]Counter|equal to turn count[;] max 6,1,,Confiscate,,,GRAY,change_power,change_power,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,1,,,,e.animate(~flash~); var cr = turn; if(cr > 6) { cr = 6; } inflict(~counter_~ + cr); sfx(~_lock~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Stopwatch_upgraded,At start of turn[;] [lock]Counter|equal to turn count[;] max 6[;]|then deal [sword]2 damage,1,attack(2); sfxdamage(target[;]2);,Confiscate,,,GRAY,,,,none,0,NO,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,,e.animate(~flash~); var cr = turn; if(cr > 6) { cr = 6; } inflict(~counter_~ + cr); sfx(~_lock~); e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0.5[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Stopwatch_downgraded,At start of turn[;] [lock]Counter|equal to turn count[;] max 6[;]|but take [sword]2 damage,1,attackself(2); sfxdamage(self[;]2);,Confiscate,,,GRAY,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,,e.animate(~flash~); var cr = turn; if(cr > 6) { cr = 6; } inflict(~counter_~ + cr); sfx(~_lock~); e.doequipmentaction(self[;]target[;]-e.castdirection[;][][;]0.5[;]true);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Occam's Razor,Do [sword]<d6> damage[;] error|out your remaining items,2,attack(d); sfxdamage(target[;]d); inflictself(~ncr_error_all~); /*if self cpu instead of dice do actual error manually*/,Razor Blade,NORMAL|FREE2,,YELLOW,reducesize,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~ncr_error_all~);
Occam's Razor_downgraded,Do [sword]<d6> damage[;] error|out your remaining items,2,attack(d); sfxdamage(target[;]d); inflictself(~ncr_error_all~);,Razor Blade,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~ncr_error_all~);
Occam's Razor_weakened,Do [sword]<d6> damage[;] error|out your remaining items,1,attack(d); sfxdamage(target[;]d); inflictself(~ncr_error_all~);,Razor Blade,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~ncr_error_all~);
Tension,Gain [fury]2 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY[;]2); self.endturnnow();,Fury,NORMAL|NORMAL,9,RED,change_power,change_power,,,0,YES,YES,,2,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Tension_upgraded,Gain [fury]2 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY[;]2); self.endturnnow();,Fury,COUNTDOWN,9,RED,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Tension_downgraded,Gain [fury]1 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY); self.endturnnow();,Fury,NORMAL|NORMAL,9,RED,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Tension_weakened,Gain [fury]1 fury[;] end your turn|[gray](once per battle),1,inflictself(FURY); self.endturnnow();,Fury,COUNTDOWN,9,RED,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Reverse Emulation,Mimic the gadget of the|last card the enemy used,1,self.textparticle(~No effect!~); /*reference to this video: www.youtube.com/watch?v=ar9WRwCiSr0 */,Boltzmann Brain,EVEN,,PURPLE,simplify,change_power,,none,0,YES,NO,hidereuseable,,,e.resetvar(~sourceequipment~);,runscript(~ncrmod/reverseemulation~[;][self[;]target[;]e]);,if(e.fulldescription.indexOf(~(passive: get [curse]1[])~) != -1) { inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~); },var alreadyupdating = false; if(self.getskillcard() != null && self.getskillcard().name == ~Inventor Gadgets~) alreadyupdating = true; if(!onlimit && !alreadyupdating) { self.setvar(~invgadgets_eqsused~[;]self.getvar(~invgadgets_eqsused~) + 1); if(self.getvar(~invgadgets_eqsused~) % 2 == 0) { self.setvar(~invgadgets_eqsused_display~[;]self.getvar(~invgadgets_eqsused_display~) + 1); } },,,if(e.getvar(~sourceequipment~) != e) { runscript(~ncrmod/reverseemulation~[;][self[;]target[;]e.getvar(~sourceequipment~)]); },,,
Reverse Emulation_downgraded,[quote]Bubble Gun[quote]|Do [sword]1 damage,1,attack(1); sfxdamage(target[;]999);,Boltzmann Brain,EVEN,,PURPLE,,,,none,0,NO,NO,hidereuseable,,,,,,,,,,,,
Ale Bat,Do [sword]<d6> damage. 1st|move each turn is reversed.,2,attack(d); sfxdamage(target[;]d);,Drunken Boxing,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(~reversenexttarget~);,,,,,,,
Ale Bat_upgraded,Take [sword]<d6> damage. 1st|move each turn is reversed.,2,attackself(d); sfxdamage(self[;]d);,Drunken Boxing,NORMAL|FREE3,,ORANGE,,,,,0,YES,NO,,,,,,e.animate(~flashandshake~); inflictself(~reversenexttarget~);,,,,,,,
Ale Bat_downgraded,Do [sword]<d6> damage. 1st|move each turn is reversed.,2,attack(d); sfxdamage(target[;]d);,Drunken Boxing,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflictself(~reversenexttarget~);,,,,,,,
Gravity,Inflict [weaken]1[;] get a lower dice|[gray](Reuseable),1,givedice(rand([1[;]2[;]3[;]4[;]5[;]6].splice(0[;]d - 1))); inflict(WEAKEN);,Mirror Smash,REQUIRE6,,ORANGE,increaserange,change_power,,_weaken,-1,NO,NO,,1,,,,,,,,,,,givedice(rand([1[;]2[;]3[;]4[;]5[;]6].splice(0[;]d - 1)));
Gravity_downgraded,Get a lower dice|[gray](Reuseable),1,givedice(rand([1[;]2[;]3[;]4[;]5[;]6].splice(0[;]d - 1)));,Mirror Smash,REQUIRE6,,ORANGE,,,,_weaken,-1,YES,NO,,,,,,,,,,,,,
Russian Roulette,Do [sword]<double> damage to|either you or the enemy,1,if(e.castdirection == -1) { attackself(d * 2); sfxdamage(self[;]d * 2); } else { attack(d * 2); sfxdamage(target[;]d * 2); },Drunken Boxing,NORMAL,,RED,add3,change_function,,,0,NO,NO,,,,,,,,,,var odds = 50; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; } if(!chance(odds)) { e.castdirection = -1; } else { e.castdirection = 1; },,,if(e.castdirection == -1) { attackself(d * 2); sfxdamage(self[;]d * 2); }
Russian Roulette_downgraded,Do [sword]<double> damage to yourself,1,attackself(d * 2); sfxdamage(self[;]d * 2);,Drunken Boxing,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Scrap Crystal,Recover [heal]3 health|(Always offered as scrap),1,attackself(-3);,Rejuvenate,MIN4,,GRAY,change_power,complicate,,_heal,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Crystal_upgraded,Recover [heal]3 health|(Always offered as scrap)|,1,attackself(-3);,Rejuvenate,MIN4,,GRAY,,,,_heal,2,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Crystal_downgraded,Recover [heal]3 health|(Always offered as scrap),1,attackself(-3);,Rejuvenate,REQUIRE5,,GRAY,,,,_heal,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scraptula,Flip a dice upside down|(Always offered as scrap),1,givedice(7-d);,Parity Flip,RANGE25,,GRAY,simplify,change_power,,none,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scraptula_downgraded,Flip a dice upside down|(Always offered as scrap),1,givedice(7-d);,Parity Flip,RANGE45,,GRAY,,,,none,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Lamp,Stash a <slotdoubles>[;] return both dice|(Always offered as scrap),1,inflictself(~stash~+d); inflictself(~lantern~); givedice([d[;]d]);,Light Switch,DOUBLES|DOUBLES,,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Lamp_upgraded,Stash higher dice[;] return both|(Always offered as scrap),1,inflictself(~lantern~); if(actualdice[0].basevalue > actualdice[1].basevalue) { inflictself(~stash~+(actualdice[0].basevalue)); } else { inflictself(~stash~+(actualdice[1].basevalue)); } givedice([for(dice in actualdice) dice.basevalue]);,Light Switch,NORMAL|NORMAL,8,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Lamp_downgraded,Stash a <slotdoubles>[;] return a dice|(Always offered as scrap),1,inflictself(~stash~+d); inflictself(~lantern~); givedice(d);,Light Switch,DOUBLES|DOUBLES,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrapstick,Burn self[;] do [fire]3 dmg|(Always offered as scrap)|,1,var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE); sfxdamage(target[;]3); attack(3[;]FIRE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } } /*-we walked in?*/,Blowtorch,EVEN,,GRAY,change_power,change_power,,,-1,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapstick_upgraded,Do [fire]3 damage|(Always offered as scrap)|,1,sfxdamage(target[;]3); attack(3[;]FIRE);,Blowtorch,EVEN,,GRAY,,,,,-1,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapstick_downgraded,Burn self twice[;] do [fire]3 dmg|(Always offered as scrap)|,1,var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE[;]2); sfxdamage(target[;]3); attack(3[;]FIRE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(dicelist.length > 1) { dicelist[1].animate(inflictwhat[;]0.2); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value -= 2; } } } },Blowtorch,EVEN,,GRAY,,,,,-1,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapsies,In [jinx]<d6> turns[;] do [sword]<triple>|(Always offered as scrap),1,jinx(~Scrapsies~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;](d * 3)); sfx(~_thinghappens~);,Drunken Boxing,MAX3,,GRAY,change_power,change_power,,none,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapsies_upgraded,In [jinx]2 turns[;] do [sword]<triple>|(Always offered as scrap),1,jinx(~Scrapsies+~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;](d * 3)); sfx(~_thinghappens~);,Drunken Boxing,MAX3,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrapsies_downgraded,In [jinx]<d6> turns[;] do [sword]<double>|(Always offered as scrap),1,jinx(~Scrapsies-~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]d[;](d * 2)); sfx(~_thinghappens~);,Drunken Boxing,MAX3,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Slingshot,Do [sword]<double>[;] get a new dice|(Always offered as scrap),1,attack(d * 2); givedice();,Gadget Roll,MAX2,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Slingshot_upgraded,Do [sword]4[;] get a new dice|(Always offered as scrap),1,attack(4); givedice();,Gadget Roll,MAX2,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Slingshot_downgraded,Get a new dice|(Always offered as scrap),1,givedice();,Gadget Roll,MAX2,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Trap,Lock dice that roll <d6>|(Always offered as scrap),1,inflict(~counter_~ + d);,Copyright Strike,ODD,,GRAY,simplify,change_function,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Trap_downgraded,Lock dice that roll 3|(Always offered as scrap),1,inflict(~counter_3~);,Copyright Strike,ODD,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Hall of Daggers,[]+[sword]<d6> damage this fight|([sword]<var:hallofdaggersdmg> damage),2,self.setvar(~hallofdaggersdmg~|self.getvar(~hallofdaggersdmg~) + d); sfx(~upgradeequipment~);,Infinity Mirror,MAX3,,RED,,,,,,YES,,excludefromrandomlists,,,self.setvar(~hallofdaggersdmg~|0);,,if(e.availablethisturn && self.getvar(~hallofdaggersdmg~) > 0) { e.animate(~flashandshake~); attack(self.getvar(~hallofdaggersdmg~)); sfxdamage(target|self.getvar(~hallofdaggersdmg~)); },,,,,,,
Bulletproof Glass,Lose a dice this fight|Gain [shield]<d6> now[;] and each turn,1,if((self.dice + self.extradice + self.bonusdice) > 1) { inflictself(SHIELD|d); self.extradice--; inflictself(~ncr_lingeringshield~|d); sfx(~_survive~); } else { self.textparticle(~No effect!~); },Retreat,MAX3,,ORANGE,increaserange,decreaserange,,,,YES,,,,,,,,,,,,,,
Buzzsaw,Combine dice[;]|split total in 4,1,if(d > 3) { var dicetogive = []; var options = [1|2|3|4|5|6]; var t = d; while(t - 3 < options.length) { options.pop(); } var r1 = rand(options); while(chance((r1 * r1) * 2.5)) { r1 = rand(options); } t -= r1; while(t - 2 < options.length) { options.pop(); } var r2 = rand(options); while(chance((r2 * r2) * 1.6666)) { r2 = rand(options); } t -= r2; while(t - 1 < options.length) { options.pop(); } var r3 = rand(options); while(chance((r3 * r3) * 0.8333)) { r3 = rand(options); } t -= r3; while(t < options.length) { options.pop(); } var r4 = options[options.length - 1]; t -= r4; dicetogive = [r1|r2|r3|r4]; shuffle(dicetogive); givedice(dicetogive|~splitdice~); } else { givedice([for(dice in actualdice) dice.basevalue]); self.textparticle(~no~); },Razor Blade,MIN3|MIN3,,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Buzzsaw_upgraded,Combine dice[;]|split total in 6,1,if(d > 5) { var dicetogive = []; var options = [1|2|3|4|5|6]; var t = d; while(t - 5 < options.length) { options.pop(); } var r1 = rand(options); while(chance((r1 * r1) * 2.5)) { r1 = rand(options); } t -= r1; while(t - 4 < options.length) { options.pop(); } var r2 = rand(options); while(chance((r2 * r2) * 2)) { r2 = rand(options); } t -= r2; while(t - 3 < options.length) { options.pop(); } var r3 = rand(options); while(chance((r3 * r3) * 1.5)) { r3 = rand(options); } t -= r3; while(t - 2 < options.length) { options.pop(); } var r4 = rand(options); while(chance((r4 * r4) * 1)) { r4 = rand(options); } t -= r4; while(t - 1 < options.length) { options.pop(); } var r5 = rand(options); while(chance((r5 * r5) * 0.5)) { r5 = rand(options); } t -= r5; while(t < options.length) { options.pop(); } var r6 = options[options.length - 1]; t -= r6; dicetogive = [r1|r2|r3|r4|r5|r6]; shuffle(dicetogive); givedice(dicetogive); } else { givedice(actualdice|~splitdice~); self.textparticle(~too lazy 4 this~); },Razor Blade,MIN3|MIN3|MIN3,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Buzzsaw_downgraded,Combine dice[;]|split total in 4,1,if(d > 3) { var dicetogive = []; var options = [1|2|3|4|5|6]; var t = d; while(t - 3 < options.length) { options.pop(); } var r1 = rand(options); while(chance((r1 * r1) * 2.5)) { r1 = rand(options); } t -= r1; while(t - 2 < options.length) { options.pop(); } var r2 = rand(options); while(chance((r2 * r2) * 1.6666)) { r2 = rand(options); } t -= r2; while(t - 1 < options.length) { options.pop(); } var r3 = rand(options); while(chance((r3 * r3) * 0.8333)) { r3 = rand(options); } t -= r3; while(t < options.length) { options.pop(); } var r4 = options[options.length - 1]; t -= r4; dicetogive = [r1|r2|r3|r4]; shuffle(dicetogive); givedice(dicetogive|~splitdice~); } else { givedice([for(dice in actualdice) dice.basevalue]); self.textparticle(~no~); },Razor Blade,MIN5|MIN5,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Tear Down This Wall,Do [sword]<d6> damage. On even[;]|set a random dice to <d6>,2,attack(d); sfxdamage(target|d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); } },Perfectionism,NORMAL,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); } }
Tear Down This Wall_upgraded,Do [sword]<d6> damage[;]|set a random dice to <d6>,2,attack(d); sfxdamage(target|d); var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); },Perfectionism,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); }
Tear Down This Wall_downgraded,Do [sword]<d6> damage. On even[;]|set a random dice to <d6>-1,2,attack(d); sfxdamage(target|d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d - 1){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d - 1| self.screenposition()); } } /*i am so original it is crazy!*/,Perfectionism,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d - 1){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d - 1| self.screenposition()); } } /*i am so original it is crazy!*/ /*this is a funyn coment i dont know who made it but its funny :) -gaetana*/
Nail Rat,Inflict [poison]2[;] get 2 dice|(You lose [heart]2 hp each turn),1,inflict(POISON|2); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]);,Anthrax,COUNTDOWN,5,PURPLE,change_power,change_power,,_poison,0,NO,NO,,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]);
Nail Rat_downgraded,Inflict [poison]2 poison|(You lose [heart]2 hp each turn),1,inflict(POISON|2);,Anthrax,COUNTDOWN,5,PURPLE,,,,_poison,0,NO,NO,,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,
Nail Rat_upgraded,Inflict [poison]2[;] get 2 dice|with values of 3 or less|(You lose [heart]2 hp each turn),1,inflict(POISON|2); givedice([rand([1|2|3])|rand([1|2|3])]);,Anthrax,COUNTDOWN,5,PURPLE,,,,_poison,0,NO,NO,,,,,,e.animate(~flashandshake~); pierceattackself(2); sfx(~_damage~);,,,,,,,givedice([rand([1|2|3])|rand([1|2|3])]);
Luckpick,Split a dice. 33% chance|to get this dice back,1,var odds = 33; if(getstatusself(~luck~) > 0){ odds = 66; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~Success!~); givedice([d|s[0]|s[1]]|~splitdice~); } else { givedice(s|~splitdice~); },Razor Blade,NORMAL,,GREEN,change_power,change_function,,none,0,YES,NO,,,,,,,,,,,,,
Luckpick_upgraded,Split a dice. 66% chance|to get this dice back,1,var odds = 66; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~Success!~); givedice([d|s[0]|s[1]]|~splitdice~); } else { givedice(s|~splitdice~); },Razor Blade,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Luckpick_downgraded,Split a dice. 33% chance|to return this dice instead,1,var odds = 33; if(getstatusself(~luck~) > 0){ odds = 66; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~No effect!~); givedice(d); } else { givedice(s|~splitdice~); },Razor Blade,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Plight,Half of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 2; if(p % 1 != 0) { p += 0.5; } removestatus(POISON|p); inflict(~alternate_poison~|p);,Emetic,COUNTDOWN,18,PURPLE,change_power,change_function,poison,_poison,0,NO,NO,,1,,,,,,,,,,,
Plight_downgraded,1/4 of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 4; if(p % 1 != 0) { p += 0.5; } removestatus(POISON|p); inflict(~alternate_poison~|p);,Emetic,COUNTDOWN,18,PURPLE,,,,_poison,0,NO,NO,,,,,,,,,,,,,
Plight_upgraded,Half of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 2; if(p % 1 != 0) { p += 0.5; } removestatus(POISON|p); inflict(~alternate_poison~|p);,Emetic,COUNTDOWN,12,PURPLE,,,,_poison,0,NO,NO,,,,,,,,,,,,,
Plight_weakened,1/4 of target's [poison]poison|becomes alt. poison,1,var p = getstatus(POISON) / 4; if(p % 1 != 0) { p += 0.5; } removestatus(POISON|p); inflict(~alternate_poison~|p);,Emetic,COUNTDOWN,12,PURPLE,,,,_poison,0,NO,NO,,,,,,,,,,,,,
Third Place Cauldron,Get a different dice[;] do [sword]3|,1,var dicelist = [1|2|3|4|5|6]; dicelist.remove(d); givedice(rand(dicelist)); attack(3); sfxdamage(target|3);,Magic Dice,REQUIRE3,,ORANGE,change_power,change_function,,,3,NO,NO,,1,,,,,,,,,,,
Third Place Cauldron_upgraded,Get a higher dice[;] do [sword]3|,1,if(d >= 6) givedice(d + 1); else givedice(rand([6|5|4|3|2|1].splice(0|6-d))); attack(3); sfxdamage(target|3);,Magic Dice,REQUIRE3,,ORANGE,,,,,3,NO,NO,,,,,,,,,,,,,
Third Place Cauldron_downgraded,Do [sword]3 damage|,1,attack(3); sfxdamage(target|3);,Magic Dice,REQUIRE3,,ORANGE,,,,,3,NO,NO,,,,,,,,,,,,,
Autohook,Gain [recycle]Re-Equip for|every 4 items used|this fight (items used: <var:itemuses>),1,/*i decided; you know what; if i'm really going to implement all of these ridiculous reequip edgecases for stuff like whipcrack; i'm not letting them go to waste*/,Sustainability,,,GREEN,change_power,change_power,,none,0,NO,NO,,,self.setvar(~itemuses~|0);,self.setvar(~itemuses~|0);,,,if(!onlimit) { /*kludge so if you have more than one autohook the recorded equipment use count isn't inflated*/ var alleq = [for(eq in self.equipment) if(eq.name == ~Autohook~) eq]; if(alleq[0] == e) self.setvar(~itemuses~|self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 4 == 0) { sfx(~_recycle~); e.animate(~flashandshake~); inflictself(REEQUIPNEXT); } },,,,,,
Autohook_upgraded,Gain [recycle]Re-Equip at start|of fight[;] and for every 4|items used this fight (<var:itemuses>),1,,Sustainability,,,GREEN,,,,none,0,NO,NO,,,self.setvar(~itemuses~|0);,self.setvar(~itemuses~|0);,,if(turn == 1) { e.animate(~flashandshake~); inflictself(REEQUIPNEXT); sfx(~_recycle~); },if(!onlimit) { var alleq = [for(eq in self.equipment) if(eq.name == ~Autohook~) eq]; if(alleq[0] == e) self.setvar(~itemuses~|self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 4 == 0) { sfx(~_recycle~); e.animate(~flashandshake~); inflictself(REEQUIPNEXT); } },,,,,,
Autohook_downgraded,Gain [recycle]Re-Equip for|every 5 items used|this fight (items used: <var:itemuses>),1,,Sustainability,,,GREEN,,,,none,0,NO,NO,,,self.setvar(~itemuses~|0);,self.setvar(~itemuses~|0);,,,if(!onlimit) { var alleq = [for(eq in self.equipment) if(eq.name == ~Autohook~) eq]; if(alleq[0] == e) self.setvar(~itemuses~|self.getvar(~itemuses~) + 1); if(self.getvar(~itemuses~) % 5 == 0) { sfx(~_recycle~); e.animate(~flashandshake~); inflictself(REEQUIPNEXT); } },,,,,,
Trinity Charm,Roll a 3[;] 33% chance|to roll another 3,1,var odds = 33.33; if(getstatusself(~luck~) > 0){ odds = 66.66; } if(getstatusself(~luck+~) > 0){ odds = 100; }   if(chance(odds)) { self.textparticle(~Success!~); givedice([3|3]); } else{ givedice(3); },Trinity,MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Trinity Charm_upgraded,Roll a 3[;] 33% chance|to roll another 3,1,var odds = 33.33; if(getstatusself(~luck~) > 0){ odds = 66.66; } if(getstatusself(~luck+~) > 0){ odds = 100; }   if(chance(odds)) { self.textparticle(~Success!~); givedice([3|3]); } else{ givedice(3); },Trinity,COUNTDOWN,4,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Trinity Charm_downgraded,Roll a 3,1,givedice(3); /*tc has gone through a million and one iterations. in its very first incarnation it was a 3-countdown 33% chance to roll a 3; 3 uses this turn but it kind of captured the very essence of why jackeea doesn't like chance items. same with when its chance was to roll three 3s. at some point the base was needs 3 and the upgrade made it min 3. the incarnation this was in before i wrote this note and redesigned it was the same as before; but min3 and the upgrade made it a countdown of 3. for the longest time i refused to touch tc because i didn't want it to involve any number that wasn't a 3. this incarnation involves a 4 (min; countdown) and a 2 (how many 3s you roll when the chance succeeds). oh well. (also: in its very first few stages; it was green. how bizarre is that?) (also also: if this were morefluff i would've just stuck with the first design and never rethought it. nah jk ilu jackeea)*/,Trinity,MIN4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Spear,Do [sword]<d6> damage|Get a new dice,1,attack(d); sfxdamage(target|d); givedice(); /*my attempt at coming up with a generic 'spear' item. the original spear after which starspear; magic spear; etc. are named was renamed six shooter*/,Focus,REQUIRE6,,RED,increaserange,change_power,,,,,,,2,,,,,,,,,,,givedice();
Spear_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Focus,REQUIRE6,,RED,,,,,,,,,,,,,,,,,,,,
Ubernudge,-<d6> to all dice[;]|won't nudge below 1,1,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if(mydice.basevalue == 1) continue; else { if(mydice.basevalue - d < 1){ mydice.animatereroll(1| self.screenposition()| c * 0.05); } else { mydice.animatereroll((mydice.basevalue - d)| self.screenposition()| c * 0.05); } c++; } } },Double Whammy,MAX2,,GREEN,increaserange,decreaserange,,diceroll,0,YES,NO,,1,,,,,,,,,,,
Fatal Attraction,Drain [heart]4 health,2,drain(4); sfx(~_drain~);,Blood Sip,MAX4,,ORANGE,simplify,change_power,,,,,,finale,,,,,,,,,,,,
Fatal Attraction_downgraded,Drain [heart]4 health,2,drain(4); sfx(~_drain~);,Blood Sip,REQUIRE4,,ORANGE,,,,,,,,finale,,,,,,,,,,,,
Passivecation Program,Lock [lock]2 dice,2,inflict(LOCK|2); sfx(~_lock~); /*ncrmod jester finale cards include: brainwashing the enemy to become a model member of dystopian society*/,Copyright Strike,COUNTDOWN,10,ORANGE,change_power,change_power,,,,,,finale,,,,,,,,,,,,
Passivecation Program_downgraded,Blind [blind]2 dice,2,inflict(BLIND|2); sfx(~_blind~);,Copyright Strike,COUNTDOWN,10,ORANGE,,,,,,,,finale,,,,,,,,,,,,
Passivecation Program_upgraded,Lock [lock]3 dice,2,inflict(LOCK|3); sfx(~_lock~);,Copyright Strike,COUNTDOWN,10,ORANGE,,,,,,,,finale,,,,,,,,,,,,
We Watch and We Wait,In [jinx]<d6> turns[;]|deal [sword]20 damage,2,jinx(~Watch and Wait~|~take [sword]20 damage~|~Take [sword]20 damage~|~attack(20); sfxdamage(null|20); sfx(\~_fire\~|\~\~|0.1); ~|target|self|d|0);  sfx(~_thinghappens~);,Drunken Boxing,MIN4,,ORANGE,increaserange,complicate,,,,,,finale,,,,,,,,,,,,
Anger,Burn [fire]<d6> dice,2,inflict(FIRE|d); sfx(~_fire~);,Heat Ray,MIN2,,ORANGE,add2,complicate,,,,,,finale,,,,,,,,,,,,
Face the Music,Do [sword]1 dmg[;] +[weaken]1 weaken|,2,attack(1); sfxdamage(target|1); inflict(WEAKEN); sfx(~_weaken~);,Guitar Solo,EVEN,,ORANGE,change_power,change_power,,,-1,,,finale,,,,,,,,,,,,
Face the Music_downgraded,Do [sword]1 dmg[;] +[weaken]1 weaken|,2,attack(1); sfxdamage(target|1); inflict(WEAKEN); sfx(~_weaken~);,Guitar Solo,EVEN,,ORANGE,,,,,3,,,finale,,,,,,,,,,,,
Face the Music_upgraded,Do [sword]1 dmg[;] +[weaken]1 weaken|,2,attack(1); sfxdamage(target|1); inflict(WEAKEN); sfx(~_weaken~);,Guitar Solo,MIN2,,ORANGE,,,,,-1,,,finale,,,,,,,,,,,,
Revelation,Get two blessings at|the start of next turn,2,jinx(~Revelation~|~get 2 blessings~|~Get 2 blessings~|~for(i in 0...2) { var randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflict(randomstatus | a); if(randomstatus == REDUCE) randomstatus = SHIELD; if(randomstatus == REEQUIPNEXT) randomstatus = 'recycle'; sfx('_' + randomstatus.toLowerCase()|''|i * 0.2); }~|self|self|1|d); sfx(~_thinghappens~),,NORMAL|NORMAL,,ORANGE,,,,,,YES,,finale,,,,,,,,,,,,
Crazy Glue,[lock]Counter a random dice|that's not countered yet,1,var availablecounters = [1|2|3|4|5|6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,NORMAL,,PURPLE,change_power,change_power,,,,,,,,,,,,,,,,,,
Crazy Glue_downgraded,[lock]Counter a random dice|that's not countered yet,1,var availablecounters = [1|2|3|4|5|6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,ODD,,PURPLE,,,,,,,,,,,,,,,,,,,,
Crazy Glue_upgraded,[lock]Counter a random dice|higher than or equal to <d6>,1,var availablecounters = [6|5|4|3|2|1].splice(0|7-d); for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },Confiscate,NORMAL,,PURPLE,,,,,,,,,,,,,,,,,,,,
Thermostat,Remove up to [ice]1 from you|Inflict [ice] equal to excess,1,,Reset Button,,,BRIGHTCYAN,change_power,noeffect,,none,0,NO,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,1,,,e.setvar(~thermoactions~|1 - getstatusself(ICE)); removestatusself(ICE);,e.animate(~flashandshake~); if(e.getvar(~thermoactions~) > 0) { inflict(ICE|e.getvar(~thermoactions~)); sfx(~_ice~); },,,,,,,
Thermostat_upgraded,Remove up to [ice]2 from you|Inflict [ice] equal to excess,1,,Reset Button,,,BRIGHTCYAN,,,,none,0,NO,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,e.setvar(~thermoactions~|2 - getstatusself(ICE)); removestatusself(ICE|2);,e.animate(~flashandshake~); if(e.getvar(~thermoactions~) > 0) { inflict(ICE|e.getvar(~thermoactions~)); sfx(~_ice~); },,,,,,,
Hot Table,Get a 6[;] but [fire]burn|yourself twice each turn,1,/*'hot table' is craps terminology for a particular table with a very good winning streak*/,Mirror Smash,,,RED,change_power,change_power,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,2,,,inflictself(FIRE|2);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 6; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self|target|-e.castdirection|[]|0.5|true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Hot Table_upgraded,Get a 6[;] but [fire]burn|yourself once each turn,1,/*former ignore reequip method*/,Mirror Smash,,,RED,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,inflictself(FIRE);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 6; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self|target|-e.castdirection|[]|0.5|true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Hot Table_downgraded,Get a 5[;] but [fire]burn|yourself twice each turn,1,/*former ignore reequip method*/,Mirror Smash,,,RED,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,inflictself(FIRE|2);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 5; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self|target|-e.castdirection|[]|0.5|true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Hot Table_weakened,Get a 5[;] but [fire]burn|yourself once each turn,1,/*former ignore reequip method*/,Mirror Smash,,,RED,,,,none,0,YES,NO,cannotreuse|shockavoid|altpoisonavoid|nomidturnsummon,,,,inflictself(FIRE);,e.animate(~flash~); var mynewdice = new elements.Dice(); mynewdice.basevalue = 5; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192; sfx(~jackpot_rolldice~); e.doequipmentaction(self|target|-e.castdirection|[]|0.5|true);,,,,,e.preventdefault = true; e.maintainfury = true;,,
Murk,Roll a new [blind]blind dice|[gray](Reuseable),1,givedice(); self.dicepool[self.dicepool.length - 1].blind = true; self.symbolparticle(~blind~); sfx(~_blind~);,Random Roll,NORMAL,,GRAY,change_power,removereusable,,none,4,YES,NO,,1,,,,,,,,,,,
Murk_upgraded,Roll 4 new [blind]blind dice,1,givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); for(i in 1...5) { if(self.dicepool[self.dicepool.length - i] != null) { self.dicepool[self.dicepool.length - i].blind = true; } } self.symbolparticle(~blind~); sfx(~_blind~);,Random Roll,NORMAL,,GRAY,,,,none,0,YES,NO,,,,,,,,,,,,,
Zoop Zoop,Do [sword]<d6> damage|[sword]3 less if above 3,1,attack(d > 3 ? d - 3 : d); sfxdamage(target|d > 3 ? d - 3 : d);,Underwhelm,NORMAL,,PURPLE,change_power,change_power,,none,0,,,,1,,,,,,,,,,,
Zoop Zoop_upgraded,Do [sword]<d6> damage|[sword]2 less if above 2,1,attack(d > 2 ? d - 2 : d); sfxdamage(target|d > 2 ? d - 2 : d);,Underwhelm,NORMAL,,PURPLE,,,,none,0,,,,,,,,,,,,,,,
Zoop Zoop_downgraded,Do [sword]<d6> damage|[sword]3 less if above 3,1,attack(d > 3 ? d - 3 : d); sfxdamage(target|d > 3 ? d - 3 : d);,Underwhelm,MAX4,,PURPLE,,,,none,0,,,,,,,,,,,,,,,
Bumper Sticker,Each turn[;] add 1 to|your two lowest dice,1,,Megabump,,,GREEN,change_power,change_power,,,,,,shockavoid|altpoisonavoid,,,,,var c = 0; var extradice = []; e.animate(~flashandshake~); for(i in 0...2) { var dicelist = [for(dice in self.dicepool) if(dice.available() && !dice.intween()) dice]; if(dicelist.length > 0) { var lowestdice = dicelist[0]; for(dice in dicelist) if(dice.basevalue < lowestdice.basevalue) lowestdice = dice; if (lowestdice.basevalue >= 6){ extradice.push(1); lowestdice.animatereroll(6| self.screenposition()| c * 0.05); } else { lowestdice.animatereroll((lowestdice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,,,,,,,
Bumper Sticker_upgraded,Each turn[;] add 1 to|your three lowest dice,1,,Megabump,,,GREEN,,,,,,,,shockavoid|altpoisonavoid,,,,,var c = 0; var extradice = []; e.animate(~flashandshake~); for(i in 0...3) { var dicelist = [for(dice in self.dicepool) if(dice.available() && !dice.intween()) dice]; if(dicelist.length > 0) { var lowestdice = dicelist[0]; for(dice in dicelist) if(dice.basevalue < lowestdice.basevalue) lowestdice = dice; if (lowestdice.basevalue >= 6){ extradice.push(1); lowestdice.animatereroll(6| self.screenposition()| c * 0.05); } else { lowestdice.animatereroll((lowestdice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,,,,,,,
Bumper Sticker_downgraded,Each turn[;] add 1 to|your lowest dice,1,,Megabump,,,GREEN,,,,,,,,shockavoid|altpoisonavoid,,,,,var c = 0; var extradice = []; e.animate(~flashandshake~); for(i in 0...1) { var dicelist = [for(dice in self.dicepool) if(dice.available() && !dice.intween()) dice]; if(dicelist.length > 0) { var lowestdice = dicelist[0]; for(dice in dicelist) if(dice.basevalue < lowestdice.basevalue) lowestdice = dice; if (lowestdice.basevalue >= 6){ extradice.push(1); lowestdice.animatereroll(6| self.screenposition()| c * 0.05); } else { lowestdice.animatereroll((lowestdice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,,,,,,,
[END NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,0,,,
[BEGIN INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Blighted Zap,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Blighted Zap_upgraded,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Blighted Zap_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,Blight,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Bet,Deal +[sword]1 each attack|until you take [sword]10 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,id|shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 10) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 1); },,,removestatusself(~Permaboost~[;] 1); removestatusself(~Permadown~[;] 1);,,,,
Bet_upgraded,Deal +[sword]1 each attack|until you take [sword]16 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,id|shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 16) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 2); },,,removestatusself(~Permaboost~[;] 1);,,,,
Roulette,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> dmg,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,MAX4,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Roulette_upgraded,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> dmg,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,NORMAL|FREE1,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Roulette_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,Random Hit,MAX3,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Countvalanche,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Countvalanche_upgraded,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,1,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Countvalanche_downgraded,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] 3);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parry,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parry_downgraded,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry_downgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parrying Sword,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX4,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Sword_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Sword_downgraded,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX2,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Power Up,Deal [sword]1 extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,REQUIRE1,,RED,change_power,noeffect,,,0,YES,NO,id,1,,,,,,,,,,,
Power Up_upgraded,Deal [sword]<d6> extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,MAX2,,RED,,,,,0,YES,NO,id,,,,,,,,,,,,
Forbidden Magic,Do [sword]<d6> damage[;]|inflict [curse]Curse,1,attack(d); inflict(CURSE); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Forbidden Magic_upgraded,Do [sword]<d6> damage[;]|inflict [curse]2 curse,1,attack(d); inflict(CURSE[;] 2); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,id,,,,,,,,,,,,
Forbidden Magic_downgraded,Do [sword]<d6> damage,1,attack(d) sfxdamage(target[;] d);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,id,,,,,,,,,,,,
Regen Ale,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,Regenerative Ablity,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,id|regenitem,1,,,,,,,,,,,
Regen Ale_upgraded,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,,MAX3,,GREEN,,,,,0,YES,NO,id|regenitem,,,,,,,,,,,,
Regen Ale_downgraded,Heal [heal]2 HP,1,attackself(-2); sfx(~_cure~);,,REQUIRE2,,GREEN,,,,,0,YES,NO,id|regenitem,,,,,,,,,,,,
[END INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Vise Flip,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Skill,DOUBLES|DOUBLES,,GRAY,change_power,noeffect,,,0,YES,NO,fd|appearsforparts,1,,,,,,,,,,,
Vise Flip_upgraded,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Skill,NORMAL|NORMAL,,GRAY,change_power,noeffect,,,0,YES,NO,fd|appearsforparts,,,,,,,,,,,,
Poor Yorick,Curse both fighters[;]|count -3 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Cackle,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,if(e.shockedsetting <= 0  && e.availablethisturn){ var mydice = new elements.Dice(); mydice.basevalue = 3; e.assigndice(mydice); mydice.assigned = e; self.dicepool.push(mydice);e.animate(~flash~);},,,,,,
Poor Yorick_upgraded,Curse both fighters[;]|count -4 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Cackle,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,if(e.shockedsetting <= 0  && e.availablethisturn){ var mydice = new elements.Dice(); mydice.basevalue = 4; e.assigndice(mydice); mydice.assigned = e; self.dicepool.push(mydice);e.animate(~flash~);},,,,,,
Poor Yorick_downgraded,Curse yourself[;]|count -3 on each item use,1,inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Cackle,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,if(e.shockedsetting <= 0  && e.availablethisturn){ var mydice = new elements.Dice(); mydice.basevalue = 3; e.assigndice(mydice); mydice.assigned = e; self.dicepool.push(mydice);e.animate(~flash~);},,,,,,
Flame Whip,Do [fire]<d6> damage[;]|burn yourself,2,attack(d[;]FIRE); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2); var dmg = new elements.Skill(~Against All Odds_old~); dmg.script=~sfxdamage(target[;] ~+d+~);~; var ex = new motion.actuators.SimpleActuator(null[;]0.1[;]null); ex._repeat = 1; ex.onRepeat(dmg.execute[;][self[;]target]); ex.move(); sfx(~_whooshweapons~);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE);
Flame Whip_upgraded,Do [fire]<d6> damage[;]|roll a burning dice,2,attack(d[;]FIRE); inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); var dmg = new elements.Skill(~Against All Odds_old~); dmg.script=~sfxdamage(target[;] ~+d+~);~; var ex = new motion.actuators.SimpleActuator(null[;]0.1[;]null); ex._repeat = 1; ex.onRepeat(dmg.execute[;][self[;]target]); ex.move(); sfx(~_whooshweapons~);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,inflictself(FIRE);givedice();
Frozen Gloves,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d[;]ICE); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);
Frozen Gloves_upgraded,Do [ice]<d6> damage[;]|roll a one,2,attack(d[;]ICE); givedice(1); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,givedice(1);
Iron Helmet,Add [shield]<d6> shield[;] in two|turns[;] take [sword]<d6> dmg,2,inflictself(SHIELD[;]d);jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;]d); sfx(~_shield~[;]~~[;]0.2); sfx(~_thinghappens~|~~|0.2);,Pillow Fort,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Iron Helmet_upgraded,Add [shield]<d6> shield[;] in three|turns[;] take [sword]<d6> dmg,2,inflictself(SHIELD[;]d);jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]3[;]d); sfx(~_shield~[;]~~[;]0.2); sfx(~_thinghappens~|~~|0.2);,Pillow Fort,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Iron Helmet_downgraded,Add [shield]<d6> shield[;] next|turn[;] take [sword]<d6> dmg,2,inflictself(SHIELD[;]d);jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]1[;]d); sfx(~_shield~[;]~~[;]0.2); sfx(~_thinghappens~|~~|0.2);,Pillow Fort,NORMAL|FREE3,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Dullplicate,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,fd,1,,,,,,,,,,,
Dullplicate_downgraded,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,REQUIRE1,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Dullplicate_upgraded,Duplicate all unused <d6>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Switchblade,Do [sword]<d6>[;] return all dice|used on this on last use|[gray](Reuseable),1,attack(d);sfxdamage(target|d); var dicearray = e.getvar(~switchbladedice~); dicearray.push(d); if(e.usesleft <= 0) givedice(dicearray); else e.setvar(~switchbladedice~|dicearray);,Pirate Glove,MAX3,,RED,change_power,change_power,,,4,NO,NO,,,,e.setvar(~switchbladedice~|[]);,e.setvar(~switchbladedice~|[]);,,,,e.setvar(~switchbladedice~|[]);,,,,
Switchblade_upgraded,Do [sword]<d6>[;] return all dice|used on this on last use|[gray](Reuseable),1,attack(d);sfxdamage(target|d); var dicearray = e.getvar(~switchbladedice~); dicearray.push(d - 1); if(e.usesleft <= 0) givedice(dicearray); else e.setvar(~switchbladedice~|dicearray);,Pirate Glove,MAX3|FREE1,,RED,change_power,change_power,,,3,NO,NO,,,,e.setvar(~switchbladedice~|[]);,e.setvar(~switchbladedice~|[]);,,,,e.setvar(~switchbladedice~|[]);,,,,
Switchblade_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);sfxdamage(target|d);,Pirate Glove,MAX3,,RED,change_power,change_power,,,4,NO,NO,,,,,,,,,,,,,
Half Moon Cauldron_upgraded,Set a random dice to 6|[gray](Reuseable),1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 6){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(6| self.screenposition()); sfx(~diceroll~);} },Reversal,MAX5,,GREEN,change_power,change_power,,,2,YES,NO,fd,1,,,,,,,,,,,
Half Moon Cauldron_downgraded,Set a random dice to 4|[gray](Reuseable),1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 4){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(4| self.screenposition()); sfx(~diceroll~);} },Reversal,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Berlin Blade,Do [sword]3 damage[comma]|set a random dice to <d6>,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); sfx(~diceroll~);} }attack(3);sfxdamage(target|3);,Reversal,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,fd,1,,,,,,,,,,,
Berlin Blade_upgraded,Do [sword]3 damage[comma]|return dice,1,attack(3);sfxdamage(target|3);givedice(d);,Reversal,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Berlin Blade_downgraded,Do [sword]1 damage[comma]|set a random dice to <d6>,1,if(!simulation) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); sfx(~diceroll~);} }attack(1);sfxdamage(target|1);,Reversal,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Magic Kapow,Do [sword]3 damage[comma] [sword]6 if any|M. Kapow was used this turn,1,if(self.hasstatus(~mkapowcharge~)) {attack(6);sfxdamage(target|6);}else {attack(3);sfxdamage(target|3);}inflictself(~mkapowcharge~);sfx(~_magic~);,Reversal,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,fd,1,,,,,,,,,,,
Magic Kapow_downgraded,Do [sword]2 damage[comma] [sword]4 if any|M. Kapow was used this turn,1,if(self.hasstatus(~mkapowcharge~)) {attack(4);sfxdamage(target|4);}else {attack(2);sfxdamage(target|2);}inflictself(~mkapowcharge~);sfx(~_magic~);,Reversal,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Magic Kapow_upgraded,Do [sword]4 damage[comma] [sword]8 if any|M. Kapow was used this turn,1,if(self.hasstatus(~mkapowcharge~)) {attack(8);sfxdamage(target|8);}else {attack(4);sfxdamage(target|4);}inflictself(~mkapowcharge~);sfx(~_magic~);,Reversal,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
[END FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN YETMOREEPISODES],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Swiftsword,Do [sword]<d6> damage[;] on 6[;]|split a random dice in two|[90%][quote]I sawed this dice in half![quote],2,attack(d); sfxdamage(target|d); if (d==6) {var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); }},Magic Lockpick,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,yme,,,,,,,,,,,,if (d==6) {var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); }}
Swiftsword_upgraded,Do [sword]<d6> dmg[;] on even[;]|split a random dice in two|[90%][quote]I sawed this dice in half![quote],2,attack(d); sfxdamage(target|d); if (d%2==0) {var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); }},Magic Lockpick,NORMAL,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,if (d%2==0) {var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); }}
Swiftsword_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Magic Lockpick,NORMAL,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,
Engineer's Wrench,Do [sword]<d6> damage[;] on 6[;]|[95%]add [sword]2[;] heal [heal]2 or gain [dodge]1,2,if (d==6) {var choice = rand([0|1|2]); if (choice==0) {attack(d+2); sfxdamage(target|d+2);} else if (choice==1) {attack(d); sfxdamage(target|d); attackself(-2); sfx(~_heal~);} else {attack(d); sfxdamage(target|d); inflictself(DODGE); sfx(~_dodge~);}} else {attack(d); sfxdamage(target|d);},Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,yme,,,,,,,,,,,,if (d==6) {var choice = rand([0|1|2]); if (choice==1) {attackself(-2); sfx(~_heal~);} else {inflictself(DODGE); sfx(~_dodge~);}}
Engineer's Wrench_upgraded,Do [sword]<d6> damage[;] on 6[;]|[95%]add [sword]2[;] heal [heal]2 or gain [dodge]1,1,if (d==6) {var choice = rand([0|1|2]); if (choice==0) {attack(d+2); sfxdamage(target|d+2);} else if (choice==1) {attack(d); sfxdamage(target|d); attackself(-2); sfx(~_heal~);} else {attack(d); sfxdamage(target|d); inflictself(DODGE); sfx(~_dodge~);}} else {attack(d); sfxdamage(target|d);},Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,yme,,,,,,,,,,,,if (d==6) {var choice = rand([0|1|2]); if (choice==1) {attackself(-2); sfx(~_heal~);} else {inflictself(DODGE); sfx(~_dodge~);}}
Engineer's Wrench_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,yme,,,,,,,,,,,,
Engineer's Wrench_weakened,Do [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,yme,,,,,,,,,,,,
Air Fryer,Do [fire]3 damage[;] inflict [shock]1|[gray](Reusable),1,attack(3|FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Firebomb,COUNTDOWN,7,RED,change_power,change_power,,,3,NO,NO,yme,,,,,,,,,,,,
Air Fryer_upgraded,Do [fire]5 damage[;] inflict [shock]1|[gray](Reusable),1,attack(5|FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Firebomb,COUNTDOWN,7,RED,,,,,3,NO,NO,yme,,,,,,,,,,,,
Air Fryer_downgraded,Do [fire]1 damage[;] inflict [shock]1|[gray](Reusable),1,attack(1|FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Firebomb,COUNTDOWN,7,RED,,,,,3,NO,NO,yme,,,,,,,,,,,,
Box Office,Gain [reduce]1 reduce|[gray](Reusable),2,inflictself(REDUCE); sfx(~_shield~);,Protection,COUNTDOWN,6,ORANGE,change_power,change_power,,,3,YES,NO,finale|yme,,,,,,,,,,,,
Box Office_upgraded,Gain [reduce]2 reduce|[gray](Reusable),2,inflictself(REDUCE[;]2); sfx(~_shield~);,Protection,COUNTDOWN,6,ORANGE,,,,,3,YES,NO,finale|yme,,,,,,,,,,,,
Box Office_downgraded,Gain [shield]1 shield|[gray](Reusable),2,inflictself(SHIELD); sfx(~_shield~);,Protection,COUNTDOWN,6,ORANGE,,,,,3,YES,NO,finale|yme,,,,,,,,,,,,
Constructive Criticism,Take [sword]4 damage[;] |in [jinx]1 turn[;] gain [fury][]Fury,2,attackself(4); sfxdamage(target[;]4); jinx(~Constructive Criticism~[;]~gain [fury]1 Fury~[;]~Gain [fury]1 Fury~[;]~if(getstatus(\~spookyfury\~)>0){target.textparticle(\~No effect!\~);} else {inflict(FURY);sfx(\~_fury\~);}~[;]self[;]self[;]1[;](d * 3)); sfx(~_thinghappens~); self.status[self.status.length-1].symbol = ~fury~;,Fury,EVEN,,ORANGE,change_power,change_power,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Constructive Criticism_upgraded,In [jinx]1 turn[;] gain [fury][]Fury,2,jinx(~Constructive Criticism~[;]~gain [fury]1 Fury~[;]~Gain [fury]1 Fury~[;]~inflict(FURY);sfx(\~_fury\~);~[;]self[;]self[;]1[;](d * 3)); sfx(~_thinghappens~); for (st in self.status) { if (st.name == ~Constructive Criticism~) { st.symbol = ~fury~; } },Fury,EVEN,,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Constructive Criticism_downgraded,Take [sword]4 damage,2,attackself(4); sfxdamage(target[;]4);,Fury,EVEN,,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
One I Prepared Earlier,Get some dice that add up |to 7 next turn,2,var currenttot = 0; while (currenttot < 7) { var nextdice = rand([1[;]2[;]3[;]4[;]5[;]6]); trace(nextdice); if (currenttot+nextdice>7) { trace(~Is too big! Use ~+(7-currenttot)); inflictself(~stash~+(7-currenttot)); currenttot = 7; } else { inflictself(~stash~+nextdice); currenttot += nextdice; } } inflictself(~illuminate~); sfx(~_thinghappens~);,Magic Dice,COUNTDOWN,7,ORANGE,change_power,change_power,,,0,YES,NO,finale|yme,,,,,,,,,,,,
One I Prepared Earlier_upgraded,Get some dice that add up |to 10 next turn,2,var currenttot = 0; while (currenttot < 10) { var nextdice = rand([1[;]2[;]3[;]4[;]5[;]6]); trace(nextdice); if (currenttot+nextdice>10) { trace(~Is too big! Use ~+(10-currenttot)); inflictself(~stash~+(10-currenttot)); currenttot = 10; } else { inflictself(~stash~+nextdice); currenttot += nextdice; } } inflictself(~illuminate~); sfx(~_thinghappens~);,Magic Dice,COUNTDOWN,7,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
One I Prepared Earlier_downgraded,Get some dice that add up |to 1 next turn,2,var currenttot = 0; while (currenttot < 1) { var nextdice = rand([1[;]2[;]3[;]4[;]5[;]6]); trace(nextdice); if (currenttot+nextdice>1) { trace(~Is too big! Use ~+(1-currenttot)); inflictself(~stash~+(1-currenttot)); currenttot = 1; } else { inflictself(~stash~+nextdice); currenttot += nextdice; } } inflictself(~illuminate~); sfx(~_thinghappens~);,Magic Dice,COUNTDOWN,7,ORANGE,,,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Slapstick,Take [sword]<d6> damage|Fully recharge your limit,2,attackself(d); sfxdamage(target[;]d); self.limitvalue = self.limitmax;,Unlimited Limit,MIN4,,ORANGE,simplify,complicate,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Final Mirror,+1 dice this fight,2,if(simulation) { bonus(1000); } else{ self.extradice++; sfx(~magic_gaindice~); },Infinity Mirror,MIN5,,ORANGE,increaserange,complicate,,,0,YES,NO,finale|yme,,,,,,,,,,,,
Scrap War,Do [sword]5 damage|(Always offered as scrap),1,attack(5); sfxdamage(target[;]5);,Plasma Gun,REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap War_upgraded,Do [sword]10 damage|(Always offered as scrap),1,attack(10); sfxdamage(target[;]10);,Plasma Gun,REQUIRE1|REQUIRE2,,GRAY,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap War_downgraded,Do [sword]1 damage|(Always offered as scrap),1,attack(1); sfxdamage(target[;]1);,Plasma Gun,REQUIRE1,,GRAY,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Bleeding Edge,Everyone drains [heart]<d6> health|(Always offered as scrap),1,sfx(~_drain~); var s = new elements.Skill(~Against All Odds_Old~); s.script=~drain(~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][target[;]self]); tw.move(); var s = new elements.Skill(~Against All Odds_Old~); s.script=~drain(~+d+~);~; var tw = new motion.actuators.SimpleActuator(null[;]0.01[;]null); tw._repeat = 1; tw.onRepeat(s.execute[;][self[;]target]); tw.move();,Blood Sip,NORMAL,,,add2,complicate,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap Petal,Inflict [poison]??? poison|(Always offered as scrap),1,var poison = 0; for (ad in actualdice) { if (ad.basevalue == 3 # ad.basevalue == 5) { poison+=d-1; } } if (poison > 0) { inflict(POISON[;]poison); sfx(~_poison~); },Poison Arrow,MAX3|MAX3,,,change_power,change_power,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap Petal_upgraded,Inflict [poison]??? poison|(Always offered as scrap),1,var poison = 0; for (ad in actualdice) { if (ad.basevalue == 3 # ad.basevalue == 5) { poison+=d-1; } } if (poison > 0) { inflict(POISON[;]poison); sfx(~_poison~); },Poison Arrow,NORMAL|NORMAL,,,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Scrap Petal_downgraded,Inflict [poison]??? poison|(Always offered as scrap),1,var poison = 0; for (ad in actualdice) { if (ad.basevalue == 3 # ad.basevalue == 5) { poison+=d-1; } } if (poison > 0) { inflict(POISON[;]poison); sfx(~_poison~); },Poison Arrow,MAX3|MAX3,,,,,,,0,NO,NO,appearsforparts|yme,,,,,,,,,,,,
Ultimate Heal,Cost [star]MAX[]: Heal [heal]2 hp|(Always offered as scrap),1,if (self.limitvalue == self.limitmax) { self.limitvalue = 0; attackself(-2); sfx(~_heal~); } else { self.textparticle(~Can't afford!~); },Regenerate,EVEN,,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Ultimate Heal_upgraded,Cost [star]2[]: Heal [heal]2 hp|(Always offered as scrap),1,if (self.limitvalue >= 2) { self.limitvalue -= 2; attackself(-2); sfx(~_heal~); } else { self.textparticle(~Can't afford!~); },Regenerate,EVEN,,GRAY,,,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Ultimate Heal_downgraded,Cost [star]MAX[]: Take [sword]2|(Always offered as scrap),1,if (self.limitvalue == self.limitmax) { self.limitvalue = 0; attackself(2); sfxdamage(self[;]2); } else { self.textparticle(~Can't afford!~); },Regenerate,EVEN,,GRAY,,,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Fire Broke,[]-[heart]1 for each status on you|(Always offered as scrap),1,pierceattackself(getstatusself(ALL)); sfxdamage(self|getstatusself(ALL));,Stardust,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,appearsforparts|yme,,,,,,,,,,,,
Overhelm,[shield]<timesused> shield[;] +[shield]1 each use|[gray](Reuseable),2,inflictself(SHIELD[;]e.timesused+1); sfx(~_shield~);,Barricade,ODD,,ORANGE,change_power,change_power,,,2,YES,NO,yme,,,,,,,,,,,,
Overhelm_upgraded,[shield]<timesused> shield[;] +[shield]1 each use|[gray](Reuseable),2,inflictself(SHIELD[;]e.timesused+1); sfx(~_shield~);,Barricade,ODD,,ORANGE,,,,,3,YES,NO,yme,,,,,,,,,,,,
Overhelm_downgraded,[shield]<timesused> shield[;] +[shield]1 each use|[gray](Reuseable),2,inflictself(SHIELD[;]e.timesused+1); sfx(~_shield~);,Barricade,REQUIRE5,,ORANGE,,,,,2,YES,NO,yme,,,,,,,,,,,,
Polar Moon Shieldspike,[shield]1 or [sword]1[;] <d6> times|+[shield]3 on odd turns[;]|+[sword]3 on even turns,2,var swords = 0; var shields = 0; if (turn%2==0) {swords+=3;} else {shields+=3;} for (i in 0...d) {if (chance(50)) {swords++;} else {shields++;}} attack(swords); inflictself(SHIELD|shields); sfx(~_shield~); sfxdamage(target|swords);,Plasma Gun,MAX5,,RED,increaserange,complicate,,,0,NO,NO,yme,,,,,,,,,,,,var swords = 0; var shields = 0; if (turn%2==0) {swords+=3;} else {shields+=3;} for (i in 0...d) {if (chance(50)) {swords++;} else {shields++;}} inflictself(SHIELD|shields); sfx(~_shield~);
BIG SHOT,Do [sword]<d6> damage[;]|do [sword]<d6>/2 in 2 turns|[70%][quote]Now's your chance to be a BIG SHOT![quote],2,jinx(~BIG SHOT~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d/2); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,Plasma Gun,MIN4|MIN4,,YELLOW,change_power,change_power,,,0,NO,NO,yme,,,,,,,,,,,,
BIG SHOT_upgraded,Do [sword]<d6> damage[;]|do [sword]<d6> in 2 turns|[70%][quote]Now's your chance to be a BIG SHOT![quote],2,jinx(~BIG SHOT~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,Plasma Gun,MIN4|MIN4,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,
BIG SHOT_downgraded,Do [sword]<d6> damage[;]|do [sword]<d6>/2 in 2 turns|[70%][quote]Now's your chance to be a BIG SHOT![quote],2,jinx(~BIG SHOT~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]d/2); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,Plasma Gun,MAX3|MAX3,,YELLOW,,,,,0,NO,NO,yme,,,,,,,,,,,,
[END YETMOREEPISODES],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
